// <auto-generated>
// generated from './diagnostic_information_map_generated.rs' by 'src/compiler'

#[allow(non_upper_case_globals)]
pub mod Diagnostics {
    use crate::{DiagnosticCategory, DiagnosticMessage};

    fn diag(
        code: u32,
        category: DiagnosticCategory,
        key: &'static str,
        message: &'static str,
    ) -> DiagnosticMessage {
        DiagnosticMessage::new(
            code,
            category,
            key,
            message.into(),
        )
    }

    lazy_static! {
        pub static ref Unterminated_string_literal: DiagnosticMessage = diag(
            1002,
            DiagnosticCategory::Error,
            "Unterminated_string_literal_1002",
            "Unterminated string literal.",
        );
    }
    lazy_static! {
        pub static ref Identifier_expected: DiagnosticMessage = diag(
            1003,
            DiagnosticCategory::Error,
            "Identifier_expected_1003",
            "Identifier expected.",
        );
    }
    lazy_static! {
        pub static ref _0_expected: DiagnosticMessage = diag(
            1005,
            DiagnosticCategory::Error,
            "_0_expected_1005",
            "'{0}' expected.",
        );
    }
    lazy_static! {
        pub static ref A_file_cannot_have_a_reference_to_itself: DiagnosticMessage = diag(
            1006,
            DiagnosticCategory::Error,
            "A_file_cannot_have_a_reference_to_itself_1006",
            "A file cannot have a reference to itself.",
        );
    }
    lazy_static! {
        pub static ref The_parser_expected_to_find_a_to_match_the_token_here: DiagnosticMessage = diag(
            1007,
            DiagnosticCategory::Error,
            "The_parser_expected_to_find_a_to_match_the_token_here_1007",
            "The parser expected to find a '}' to match the '{' token here.",
        );
    }
    lazy_static! {
        pub static ref Trailing_comma_not_allowed: DiagnosticMessage = diag(
            1009,
            DiagnosticCategory::Error,
            "Trailing_comma_not_allowed_1009",
            "Trailing comma not allowed.",
        );
    }
    lazy_static! {
        pub static ref Asterisk_Slash_expected: DiagnosticMessage = diag(
            1010,
            DiagnosticCategory::Error,
            "Asterisk_Slash_expected_1010",
            "'*/' expected.",
        );
    }
    lazy_static! {
        pub static ref An_element_access_expression_should_take_an_argument: DiagnosticMessage = diag(
            1011,
            DiagnosticCategory::Error,
            "An_element_access_expression_should_take_an_argument_1011",
            "An element access expression should take an argument.",
        );
    }
    lazy_static! {
        pub static ref Unexpected_token: DiagnosticMessage = diag(
            1012,
            DiagnosticCategory::Error,
            "Unexpected_token_1012",
            "Unexpected token.",
        );
    }
    lazy_static! {
        pub static ref A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma: DiagnosticMessage = diag(
            1013,
            DiagnosticCategory::Error,
            "A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma_1013",
            "A rest parameter or binding pattern may not have a trailing comma.",
        );
    }
    lazy_static! {
        pub static ref A_rest_parameter_must_be_last_in_a_parameter_list: DiagnosticMessage = diag(
            1014,
            DiagnosticCategory::Error,
            "A_rest_parameter_must_be_last_in_a_parameter_list_1014",
            "A rest parameter must be last in a parameter list.",
        );
    }
    lazy_static! {
        pub static ref Parameter_cannot_have_question_mark_and_initializer: DiagnosticMessage = diag(
            1015,
            DiagnosticCategory::Error,
            "Parameter_cannot_have_question_mark_and_initializer_1015",
            "Parameter cannot have question mark and initializer.",
        );
    }
    lazy_static! {
        pub static ref A_required_parameter_cannot_follow_an_optional_parameter: DiagnosticMessage = diag(
            1016,
            DiagnosticCategory::Error,
            "A_required_parameter_cannot_follow_an_optional_parameter_1016",
            "A required parameter cannot follow an optional parameter.",
        );
    }
    lazy_static! {
        pub static ref An_index_signature_cannot_have_a_rest_parameter: DiagnosticMessage = diag(
            1017,
            DiagnosticCategory::Error,
            "An_index_signature_cannot_have_a_rest_parameter_1017",
            "An index signature cannot have a rest parameter.",
        );
    }
    lazy_static! {
        pub static ref An_index_signature_parameter_cannot_have_an_accessibility_modifier: DiagnosticMessage = diag(
            1018,
            DiagnosticCategory::Error,
            "An_index_signature_parameter_cannot_have_an_accessibility_modifier_1018",
            "An index signature parameter cannot have an accessibility modifier.",
        );
    }
    lazy_static! {
        pub static ref An_index_signature_parameter_cannot_have_a_question_mark: DiagnosticMessage = diag(
            1019,
            DiagnosticCategory::Error,
            "An_index_signature_parameter_cannot_have_a_question_mark_1019",
            "An index signature parameter cannot have a question mark.",
        );
    }
    lazy_static! {
        pub static ref An_index_signature_parameter_cannot_have_an_initializer: DiagnosticMessage = diag(
            1020,
            DiagnosticCategory::Error,
            "An_index_signature_parameter_cannot_have_an_initializer_1020",
            "An index signature parameter cannot have an initializer.",
        );
    }
    lazy_static! {
        pub static ref An_index_signature_must_have_a_type_annotation: DiagnosticMessage = diag(
            1021,
            DiagnosticCategory::Error,
            "An_index_signature_must_have_a_type_annotation_1021",
            "An index signature must have a type annotation.",
        );
    }
    lazy_static! {
        pub static ref An_index_signature_parameter_must_have_a_type_annotation: DiagnosticMessage = diag(
            1022,
            DiagnosticCategory::Error,
            "An_index_signature_parameter_must_have_a_type_annotation_1022",
            "An index signature parameter must have a type annotation.",
        );
    }
    lazy_static! {
        pub static ref readonly_modifier_can_only_appear_on_a_property_declaration_or_index_signature: DiagnosticMessage = diag(
            1024,
            DiagnosticCategory::Error,
            "readonly_modifier_can_only_appear_on_a_property_declaration_or_index_signature_1024",
            "'readonly' modifier can only appear on a property declaration or index signature.",
        );
    }
    lazy_static! {
        pub static ref An_index_signature_cannot_have_a_trailing_comma: DiagnosticMessage = diag(
            1025,
            DiagnosticCategory::Error,
            "An_index_signature_cannot_have_a_trailing_comma_1025",
            "An index signature cannot have a trailing comma.",
        );
    }
    lazy_static! {
        pub static ref Accessibility_modifier_already_seen: DiagnosticMessage = diag(
            1028,
            DiagnosticCategory::Error,
            "Accessibility_modifier_already_seen_1028",
            "Accessibility modifier already seen.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_must_precede_1_modifier: DiagnosticMessage = diag(
            1029,
            DiagnosticCategory::Error,
            "_0_modifier_must_precede_1_modifier_1029",
            "'{0}' modifier must precede '{1}' modifier.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_already_seen: DiagnosticMessage = diag(
            1030,
            DiagnosticCategory::Error,
            "_0_modifier_already_seen_1030",
            "'{0}' modifier already seen.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_cannot_appear_on_class_elements_of_this_kind: DiagnosticMessage = diag(
            1031,
            DiagnosticCategory::Error,
            "_0_modifier_cannot_appear_on_class_elements_of_this_kind_1031",
            "'{0}' modifier cannot appear on class elements of this kind.",
        );
    }
    lazy_static! {
        pub static ref super_must_be_followed_by_an_argument_list_or_member_access: DiagnosticMessage = diag(
            1034,
            DiagnosticCategory::Error,
            "super_must_be_followed_by_an_argument_list_or_member_access_1034",
            "'super' must be followed by an argument list or member access.",
        );
    }
    lazy_static! {
        pub static ref Only_ambient_modules_can_use_quoted_names: DiagnosticMessage = diag(
            1035,
            DiagnosticCategory::Error,
            "Only_ambient_modules_can_use_quoted_names_1035",
            "Only ambient modules can use quoted names.",
        );
    }
    lazy_static! {
        pub static ref Statements_are_not_allowed_in_ambient_contexts: DiagnosticMessage = diag(
            1036,
            DiagnosticCategory::Error,
            "Statements_are_not_allowed_in_ambient_contexts_1036",
            "Statements are not allowed in ambient contexts.",
        );
    }
    lazy_static! {
        pub static ref A_declare_modifier_cannot_be_used_in_an_already_ambient_context: DiagnosticMessage = diag(
            1038,
            DiagnosticCategory::Error,
            "A_declare_modifier_cannot_be_used_in_an_already_ambient_context_1038",
            "A 'declare' modifier cannot be used in an already ambient context.",
        );
    }
    lazy_static! {
        pub static ref Initializers_are_not_allowed_in_ambient_contexts: DiagnosticMessage = diag(
            1039,
            DiagnosticCategory::Error,
            "Initializers_are_not_allowed_in_ambient_contexts_1039",
            "Initializers are not allowed in ambient contexts.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_cannot_be_used_in_an_ambient_context: DiagnosticMessage = diag(
            1040,
            DiagnosticCategory::Error,
            "_0_modifier_cannot_be_used_in_an_ambient_context_1040",
            "'{0}' modifier cannot be used in an ambient context.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_cannot_be_used_here: DiagnosticMessage = diag(
            1042,
            DiagnosticCategory::Error,
            "_0_modifier_cannot_be_used_here_1042",
            "'{0}' modifier cannot be used here.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_cannot_appear_on_a_module_or_namespace_element: DiagnosticMessage = diag(
            1044,
            DiagnosticCategory::Error,
            "_0_modifier_cannot_appear_on_a_module_or_namespace_element_1044",
            "'{0}' modifier cannot appear on a module or namespace element.",
        );
    }
    lazy_static! {
        pub static ref Top_level_declarations_in_d_ts_files_must_start_with_either_a_declare_or_export_modifier: DiagnosticMessage = diag(
            1046,
            DiagnosticCategory::Error,
            "Top_level_declarations_in_d_ts_files_must_start_with_either_a_declare_or_export_modifier_1046",
            "Top-level declarations in .d.ts files must start with either a 'declare' or 'export' modifier.",
        );
    }
    lazy_static! {
        pub static ref A_rest_parameter_cannot_be_optional: DiagnosticMessage = diag(
            1047,
            DiagnosticCategory::Error,
            "A_rest_parameter_cannot_be_optional_1047",
            "A rest parameter cannot be optional.",
        );
    }
    lazy_static! {
        pub static ref A_rest_parameter_cannot_have_an_initializer: DiagnosticMessage = diag(
            1048,
            DiagnosticCategory::Error,
            "A_rest_parameter_cannot_have_an_initializer_1048",
            "A rest parameter cannot have an initializer.",
        );
    }
    lazy_static! {
        pub static ref A_set_accessor_must_have_exactly_one_parameter: DiagnosticMessage = diag(
            1049,
            DiagnosticCategory::Error,
            "A_set_accessor_must_have_exactly_one_parameter_1049",
            "A 'set' accessor must have exactly one parameter.",
        );
    }
    lazy_static! {
        pub static ref A_set_accessor_cannot_have_an_optional_parameter: DiagnosticMessage = diag(
            1051,
            DiagnosticCategory::Error,
            "A_set_accessor_cannot_have_an_optional_parameter_1051",
            "A 'set' accessor cannot have an optional parameter.",
        );
    }
    lazy_static! {
        pub static ref A_set_accessor_parameter_cannot_have_an_initializer: DiagnosticMessage = diag(
            1052,
            DiagnosticCategory::Error,
            "A_set_accessor_parameter_cannot_have_an_initializer_1052",
            "A 'set' accessor parameter cannot have an initializer.",
        );
    }
    lazy_static! {
        pub static ref A_set_accessor_cannot_have_rest_parameter: DiagnosticMessage = diag(
            1053,
            DiagnosticCategory::Error,
            "A_set_accessor_cannot_have_rest_parameter_1053",
            "A 'set' accessor cannot have rest parameter.",
        );
    }
    lazy_static! {
        pub static ref A_get_accessor_cannot_have_parameters: DiagnosticMessage = diag(
            1054,
            DiagnosticCategory::Error,
            "A_get_accessor_cannot_have_parameters_1054",
            "A 'get' accessor cannot have parameters.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value: DiagnosticMessage = diag(
            1055,
            DiagnosticCategory::Error,
            "Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Prom_1055",
            "Type '{0}' is not a valid async function return type in ES5/ES3 because it does not refer to a Promise-compatible constructor value.",
        );
    }
    lazy_static! {
        pub static ref Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher: DiagnosticMessage = diag(
            1056,
            DiagnosticCategory::Error,
            "Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher_1056",
            "Accessors are only available when targeting ECMAScript 5 and higher.",
        );
    }
    lazy_static! {
        pub static ref The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: DiagnosticMessage = diag(
            1058,
            DiagnosticCategory::Error,
            "The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_t_1058",
            "The return type of an async function must either be a valid promise or must not contain a callable 'then' member.",
        );
    }
    lazy_static! {
        pub static ref A_promise_must_have_a_then_method: DiagnosticMessage = diag(
            1059,
            DiagnosticCategory::Error,
            "A_promise_must_have_a_then_method_1059",
            "A promise must have a 'then' method.",
        );
    }
    lazy_static! {
        pub static ref The_first_parameter_of_the_then_method_of_a_promise_must_be_a_callback: DiagnosticMessage = diag(
            1060,
            DiagnosticCategory::Error,
            "The_first_parameter_of_the_then_method_of_a_promise_must_be_a_callback_1060",
            "The first parameter of the 'then' method of a promise must be a callback.",
        );
    }
    lazy_static! {
        pub static ref Enum_member_must_have_initializer: DiagnosticMessage = diag(
            1061,
            DiagnosticCategory::Error,
            "Enum_member_must_have_initializer_1061",
            "Enum member must have initializer.",
        );
    }
    lazy_static! {
        pub static ref Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method: DiagnosticMessage = diag(
            1062,
            DiagnosticCategory::Error,
            "Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method_1062",
            "Type is referenced directly or indirectly in the fulfillment callback of its own 'then' method.",
        );
    }
    lazy_static! {
        pub static ref An_export_assignment_cannot_be_used_in_a_namespace: DiagnosticMessage = diag(
            1063,
            DiagnosticCategory::Error,
            "An_export_assignment_cannot_be_used_in_a_namespace_1063",
            "An export assignment cannot be used in a namespace.",
        );
    }
    lazy_static! {
        pub static ref The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type_Did_you_mean_to_write_Promise_0: DiagnosticMessage = diag(
            1064,
            DiagnosticCategory::Error,
            "The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type_Did_you_mean_to_wri_1064",
            "The return type of an async function or method must be the global Promise<T> type. Did you mean to write 'Promise<{0}>'?",
        );
    }
    lazy_static! {
        pub static ref In_ambient_enum_declarations_member_initializer_must_be_constant_expression: DiagnosticMessage = diag(
            1066,
            DiagnosticCategory::Error,
            "In_ambient_enum_declarations_member_initializer_must_be_constant_expression_1066",
            "In ambient enum declarations member initializer must be constant expression.",
        );
    }
    lazy_static! {
        pub static ref Unexpected_token_A_constructor_method_accessor_or_property_was_expected: DiagnosticMessage = diag(
            1068,
            DiagnosticCategory::Error,
            "Unexpected_token_A_constructor_method_accessor_or_property_was_expected_1068",
            "Unexpected token. A constructor, method, accessor, or property was expected.",
        );
    }
    lazy_static! {
        pub static ref Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces: DiagnosticMessage = diag(
            1069,
            DiagnosticCategory::Error,
            "Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces_1069",
            "Unexpected token. A type parameter name was expected without curly braces.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_cannot_appear_on_a_type_member: DiagnosticMessage = diag(
            1070,
            DiagnosticCategory::Error,
            "_0_modifier_cannot_appear_on_a_type_member_1070",
            "'{0}' modifier cannot appear on a type member.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_cannot_appear_on_an_index_signature: DiagnosticMessage = diag(
            1071,
            DiagnosticCategory::Error,
            "_0_modifier_cannot_appear_on_an_index_signature_1071",
            "'{0}' modifier cannot appear on an index signature.",
        );
    }
    lazy_static! {
        pub static ref A_0_modifier_cannot_be_used_with_an_import_declaration: DiagnosticMessage = diag(
            1079,
            DiagnosticCategory::Error,
            "A_0_modifier_cannot_be_used_with_an_import_declaration_1079",
            "A '{0}' modifier cannot be used with an import declaration.",
        );
    }
    lazy_static! {
        pub static ref Invalid_reference_directive_syntax: DiagnosticMessage = diag(
            1084,
            DiagnosticCategory::Error,
            "Invalid_reference_directive_syntax_1084",
            "Invalid 'reference' directive syntax.",
        );
    }
    lazy_static! {
        pub static ref Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher_Use_the_syntax_0: DiagnosticMessage = diag(
            1085,
            DiagnosticCategory::Error,
            "Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher_Use_the_syntax_0_1085",
            "Octal literals are not available when targeting ECMAScript 5 and higher. Use the syntax '{0}'.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_cannot_appear_on_a_constructor_declaration: DiagnosticMessage = diag(
            1089,
            DiagnosticCategory::Error,
            "_0_modifier_cannot_appear_on_a_constructor_declaration_1089",
            "'{0}' modifier cannot appear on a constructor declaration.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_cannot_appear_on_a_parameter: DiagnosticMessage = diag(
            1090,
            DiagnosticCategory::Error,
            "_0_modifier_cannot_appear_on_a_parameter_1090",
            "'{0}' modifier cannot appear on a parameter.",
        );
    }
    lazy_static! {
        pub static ref Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement: DiagnosticMessage = diag(
            1091,
            DiagnosticCategory::Error,
            "Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement_1091",
            "Only a single variable declaration is allowed in a 'for...in' statement.",
        );
    }
    lazy_static! {
        pub static ref Type_parameters_cannot_appear_on_a_constructor_declaration: DiagnosticMessage = diag(
            1092,
            DiagnosticCategory::Error,
            "Type_parameters_cannot_appear_on_a_constructor_declaration_1092",
            "Type parameters cannot appear on a constructor declaration.",
        );
    }
    lazy_static! {
        pub static ref Type_annotation_cannot_appear_on_a_constructor_declaration: DiagnosticMessage = diag(
            1093,
            DiagnosticCategory::Error,
            "Type_annotation_cannot_appear_on_a_constructor_declaration_1093",
            "Type annotation cannot appear on a constructor declaration.",
        );
    }
    lazy_static! {
        pub static ref An_accessor_cannot_have_type_parameters: DiagnosticMessage = diag(
            1094,
            DiagnosticCategory::Error,
            "An_accessor_cannot_have_type_parameters_1094",
            "An accessor cannot have type parameters.",
        );
    }
    lazy_static! {
        pub static ref A_set_accessor_cannot_have_a_return_type_annotation: DiagnosticMessage = diag(
            1095,
            DiagnosticCategory::Error,
            "A_set_accessor_cannot_have_a_return_type_annotation_1095",
            "A 'set' accessor cannot have a return type annotation.",
        );
    }
    lazy_static! {
        pub static ref An_index_signature_must_have_exactly_one_parameter: DiagnosticMessage = diag(
            1096,
            DiagnosticCategory::Error,
            "An_index_signature_must_have_exactly_one_parameter_1096",
            "An index signature must have exactly one parameter.",
        );
    }
    lazy_static! {
        pub static ref _0_list_cannot_be_empty: DiagnosticMessage = diag(
            1097,
            DiagnosticCategory::Error,
            "_0_list_cannot_be_empty_1097",
            "'{0}' list cannot be empty.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_list_cannot_be_empty: DiagnosticMessage = diag(
            1098,
            DiagnosticCategory::Error,
            "Type_parameter_list_cannot_be_empty_1098",
            "Type parameter list cannot be empty.",
        );
    }
    lazy_static! {
        pub static ref Type_argument_list_cannot_be_empty: DiagnosticMessage = diag(
            1099,
            DiagnosticCategory::Error,
            "Type_argument_list_cannot_be_empty_1099",
            "Type argument list cannot be empty.",
        );
    }
    lazy_static! {
        pub static ref Invalid_use_of_0_in_strict_mode: DiagnosticMessage = diag(
            1100,
            DiagnosticCategory::Error,
            "Invalid_use_of_0_in_strict_mode_1100",
            "Invalid use of '{0}' in strict mode.",
        );
    }
    lazy_static! {
        pub static ref with_statements_are_not_allowed_in_strict_mode: DiagnosticMessage = diag(
            1101,
            DiagnosticCategory::Error,
            "with_statements_are_not_allowed_in_strict_mode_1101",
            "'with' statements are not allowed in strict mode.",
        );
    }
    lazy_static! {
        pub static ref delete_cannot_be_called_on_an_identifier_in_strict_mode: DiagnosticMessage = diag(
            1102,
            DiagnosticCategory::Error,
            "delete_cannot_be_called_on_an_identifier_in_strict_mode_1102",
            "'delete' cannot be called on an identifier in strict mode.",
        );
    }
    lazy_static! {
        pub static ref for_await_loops_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules: DiagnosticMessage = diag(
            1103,
            DiagnosticCategory::Error,
            "for_await_loops_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules_1103",
            "'for await' loops are only allowed within async functions and at the top levels of modules.",
        );
    }
    lazy_static! {
        pub static ref A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement: DiagnosticMessage = diag(
            1104,
            DiagnosticCategory::Error,
            "A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement_1104",
            "A 'continue' statement can only be used within an enclosing iteration statement.",
        );
    }
    lazy_static! {
        pub static ref A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement: DiagnosticMessage = diag(
            1105,
            DiagnosticCategory::Error,
            "A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement_1105",
            "A 'break' statement can only be used within an enclosing iteration or switch statement.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_a_for_of_statement_may_not_be_async: DiagnosticMessage = diag(
            1106,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_a_for_of_statement_may_not_be_async_1106",
            "The left-hand side of a 'for...of' statement may not be 'async'.",
        );
    }
    lazy_static! {
        pub static ref Jump_target_cannot_cross_function_boundary: DiagnosticMessage = diag(
            1107,
            DiagnosticCategory::Error,
            "Jump_target_cannot_cross_function_boundary_1107",
            "Jump target cannot cross function boundary.",
        );
    }
    lazy_static! {
        pub static ref A_return_statement_can_only_be_used_within_a_function_body: DiagnosticMessage = diag(
            1108,
            DiagnosticCategory::Error,
            "A_return_statement_can_only_be_used_within_a_function_body_1108",
            "A 'return' statement can only be used within a function body.",
        );
    }
    lazy_static! {
        pub static ref Expression_expected: DiagnosticMessage = diag(
            1109,
            DiagnosticCategory::Error,
            "Expression_expected_1109",
            "Expression expected.",
        );
    }
    lazy_static! {
        pub static ref Type_expected: DiagnosticMessage = diag(
            1110,
            DiagnosticCategory::Error,
            "Type_expected_1110",
            "Type expected.",
        );
    }
    lazy_static! {
        pub static ref A_default_clause_cannot_appear_more_than_once_in_a_switch_statement: DiagnosticMessage = diag(
            1113,
            DiagnosticCategory::Error,
            "A_default_clause_cannot_appear_more_than_once_in_a_switch_statement_1113",
            "A 'default' clause cannot appear more than once in a 'switch' statement.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_label_0: DiagnosticMessage = diag(
            1114,
            DiagnosticCategory::Error,
            "Duplicate_label_0_1114",
            "Duplicate label '{0}'.",
        );
    }
    lazy_static! {
        pub static ref A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement: DiagnosticMessage = diag(
            1115,
            DiagnosticCategory::Error,
            "A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement_1115",
            "A 'continue' statement can only jump to a label of an enclosing iteration statement.",
        );
    }
    lazy_static! {
        pub static ref A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement: DiagnosticMessage = diag(
            1116,
            DiagnosticCategory::Error,
            "A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement_1116",
            "A 'break' statement can only jump to a label of an enclosing statement.",
        );
    }
    lazy_static! {
        pub static ref An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode: DiagnosticMessage = diag(
            1117,
            DiagnosticCategory::Error,
            "An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode_1117",
            "An object literal cannot have multiple properties with the same name in strict mode.",
        );
    }
    lazy_static! {
        pub static ref An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name: DiagnosticMessage = diag(
            1118,
            DiagnosticCategory::Error,
            "An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name_1118",
            "An object literal cannot have multiple get/set accessors with the same name.",
        );
    }
    lazy_static! {
        pub static ref An_object_literal_cannot_have_property_and_accessor_with_the_same_name: DiagnosticMessage = diag(
            1119,
            DiagnosticCategory::Error,
            "An_object_literal_cannot_have_property_and_accessor_with_the_same_name_1119",
            "An object literal cannot have property and accessor with the same name.",
        );
    }
    lazy_static! {
        pub static ref An_export_assignment_cannot_have_modifiers: DiagnosticMessage = diag(
            1120,
            DiagnosticCategory::Error,
            "An_export_assignment_cannot_have_modifiers_1120",
            "An export assignment cannot have modifiers.",
        );
    }
    lazy_static! {
        pub static ref Octal_literals_are_not_allowed_in_strict_mode: DiagnosticMessage = diag(
            1121,
            DiagnosticCategory::Error,
            "Octal_literals_are_not_allowed_in_strict_mode_1121",
            "Octal literals are not allowed in strict mode.",
        );
    }
    lazy_static! {
        pub static ref Variable_declaration_list_cannot_be_empty: DiagnosticMessage = diag(
            1123,
            DiagnosticCategory::Error,
            "Variable_declaration_list_cannot_be_empty_1123",
            "Variable declaration list cannot be empty.",
        );
    }
    lazy_static! {
        pub static ref Digit_expected: DiagnosticMessage = diag(
            1124,
            DiagnosticCategory::Error,
            "Digit_expected_1124",
            "Digit expected.",
        );
    }
    lazy_static! {
        pub static ref Hexadecimal_digit_expected: DiagnosticMessage = diag(
            1125,
            DiagnosticCategory::Error,
            "Hexadecimal_digit_expected_1125",
            "Hexadecimal digit expected.",
        );
    }
    lazy_static! {
        pub static ref Unexpected_end_of_text: DiagnosticMessage = diag(
            1126,
            DiagnosticCategory::Error,
            "Unexpected_end_of_text_1126",
            "Unexpected end of text.",
        );
    }
    lazy_static! {
        pub static ref Invalid_character: DiagnosticMessage = diag(
            1127,
            DiagnosticCategory::Error,
            "Invalid_character_1127",
            "Invalid character.",
        );
    }
    lazy_static! {
        pub static ref Declaration_or_statement_expected: DiagnosticMessage = diag(
            1128,
            DiagnosticCategory::Error,
            "Declaration_or_statement_expected_1128",
            "Declaration or statement expected.",
        );
    }
    lazy_static! {
        pub static ref Statement_expected: DiagnosticMessage = diag(
            1129,
            DiagnosticCategory::Error,
            "Statement_expected_1129",
            "Statement expected.",
        );
    }
    lazy_static! {
        pub static ref case_or_default_expected: DiagnosticMessage = diag(
            1130,
            DiagnosticCategory::Error,
            "case_or_default_expected_1130",
            "'case' or 'default' expected.",
        );
    }
    lazy_static! {
        pub static ref Property_or_signature_expected: DiagnosticMessage = diag(
            1131,
            DiagnosticCategory::Error,
            "Property_or_signature_expected_1131",
            "Property or signature expected.",
        );
    }
    lazy_static! {
        pub static ref Enum_member_expected: DiagnosticMessage = diag(
            1132,
            DiagnosticCategory::Error,
            "Enum_member_expected_1132",
            "Enum member expected.",
        );
    }
    lazy_static! {
        pub static ref Variable_declaration_expected: DiagnosticMessage = diag(
            1134,
            DiagnosticCategory::Error,
            "Variable_declaration_expected_1134",
            "Variable declaration expected.",
        );
    }
    lazy_static! {
        pub static ref Argument_expression_expected: DiagnosticMessage = diag(
            1135,
            DiagnosticCategory::Error,
            "Argument_expression_expected_1135",
            "Argument expression expected.",
        );
    }
    lazy_static! {
        pub static ref Property_assignment_expected: DiagnosticMessage = diag(
            1136,
            DiagnosticCategory::Error,
            "Property_assignment_expected_1136",
            "Property assignment expected.",
        );
    }
    lazy_static! {
        pub static ref Expression_or_comma_expected: DiagnosticMessage = diag(
            1137,
            DiagnosticCategory::Error,
            "Expression_or_comma_expected_1137",
            "Expression or comma expected.",
        );
    }
    lazy_static! {
        pub static ref Parameter_declaration_expected: DiagnosticMessage = diag(
            1138,
            DiagnosticCategory::Error,
            "Parameter_declaration_expected_1138",
            "Parameter declaration expected.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_declaration_expected: DiagnosticMessage = diag(
            1139,
            DiagnosticCategory::Error,
            "Type_parameter_declaration_expected_1139",
            "Type parameter declaration expected.",
        );
    }
    lazy_static! {
        pub static ref Type_argument_expected: DiagnosticMessage = diag(
            1140,
            DiagnosticCategory::Error,
            "Type_argument_expected_1140",
            "Type argument expected.",
        );
    }
    lazy_static! {
        pub static ref String_literal_expected: DiagnosticMessage = diag(
            1141,
            DiagnosticCategory::Error,
            "String_literal_expected_1141",
            "String literal expected.",
        );
    }
    lazy_static! {
        pub static ref Line_break_not_permitted_here: DiagnosticMessage = diag(
            1142,
            DiagnosticCategory::Error,
            "Line_break_not_permitted_here_1142",
            "Line break not permitted here.",
        );
    }
    lazy_static! {
        pub static ref or_expected: DiagnosticMessage = diag(
            1144,
            DiagnosticCategory::Error,
            "or_expected_1144",
            "'{' or ';' expected.",
        );
    }
    lazy_static! {
        pub static ref Declaration_expected: DiagnosticMessage = diag(
            1146,
            DiagnosticCategory::Error,
            "Declaration_expected_1146",
            "Declaration expected.",
        );
    }
    lazy_static! {
        pub static ref Import_declarations_in_a_namespace_cannot_reference_a_module: DiagnosticMessage = diag(
            1147,
            DiagnosticCategory::Error,
            "Import_declarations_in_a_namespace_cannot_reference_a_module_1147",
            "Import declarations in a namespace cannot reference a module.",
        );
    }
    lazy_static! {
        pub static ref Cannot_use_imports_exports_or_module_augmentations_when_module_is_none: DiagnosticMessage = diag(
            1148,
            DiagnosticCategory::Error,
            "Cannot_use_imports_exports_or_module_augmentations_when_module_is_none_1148",
            "Cannot use imports, exports, or module augmentations when '--module' is 'none'.",
        );
    }
    lazy_static! {
        pub static ref File_name_0_differs_from_already_included_file_name_1_only_in_casing: DiagnosticMessage = diag(
            1149,
            DiagnosticCategory::Error,
            "File_name_0_differs_from_already_included_file_name_1_only_in_casing_1149",
            "File name '{0}' differs from already included file name '{1}' only in casing.",
        );
    }
    lazy_static! {
        pub static ref const_declarations_must_be_initialized: DiagnosticMessage = diag(
            1155,
            DiagnosticCategory::Error,
            "const_declarations_must_be_initialized_1155",
            "'const' declarations must be initialized.",
        );
    }
    lazy_static! {
        pub static ref const_declarations_can_only_be_declared_inside_a_block: DiagnosticMessage = diag(
            1156,
            DiagnosticCategory::Error,
            "const_declarations_can_only_be_declared_inside_a_block_1156",
            "'const' declarations can only be declared inside a block.",
        );
    }
    lazy_static! {
        pub static ref let_declarations_can_only_be_declared_inside_a_block: DiagnosticMessage = diag(
            1157,
            DiagnosticCategory::Error,
            "let_declarations_can_only_be_declared_inside_a_block_1157",
            "'let' declarations can only be declared inside a block.",
        );
    }
    lazy_static! {
        pub static ref Unterminated_template_literal: DiagnosticMessage = diag(
            1160,
            DiagnosticCategory::Error,
            "Unterminated_template_literal_1160",
            "Unterminated template literal.",
        );
    }
    lazy_static! {
        pub static ref Unterminated_regular_expression_literal: DiagnosticMessage = diag(
            1161,
            DiagnosticCategory::Error,
            "Unterminated_regular_expression_literal_1161",
            "Unterminated regular expression literal.",
        );
    }
    lazy_static! {
        pub static ref An_object_member_cannot_be_declared_optional: DiagnosticMessage = diag(
            1162,
            DiagnosticCategory::Error,
            "An_object_member_cannot_be_declared_optional_1162",
            "An object member cannot be declared optional.",
        );
    }
    lazy_static! {
        pub static ref A_yield_expression_is_only_allowed_in_a_generator_body: DiagnosticMessage = diag(
            1163,
            DiagnosticCategory::Error,
            "A_yield_expression_is_only_allowed_in_a_generator_body_1163",
            "A 'yield' expression is only allowed in a generator body.",
        );
    }
    lazy_static! {
        pub static ref Computed_property_names_are_not_allowed_in_enums: DiagnosticMessage = diag(
            1164,
            DiagnosticCategory::Error,
            "Computed_property_names_are_not_allowed_in_enums_1164",
            "Computed property names are not allowed in enums.",
        );
    }
    lazy_static! {
        pub static ref A_computed_property_name_in_an_ambient_context_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: DiagnosticMessage = diag(
            1165,
            DiagnosticCategory::Error,
            "A_computed_property_name_in_an_ambient_context_must_refer_to_an_expression_whose_type_is_a_literal_t_1165",
            "A computed property name in an ambient context must refer to an expression whose type is a literal type or a 'unique symbol' type.",
        );
    }
    lazy_static! {
        pub static ref A_computed_property_name_in_a_class_property_declaration_must_have_a_simple_literal_type_or_a_unique_symbol_type: DiagnosticMessage = diag(
            1166,
            DiagnosticCategory::Error,
            "A_computed_property_name_in_a_class_property_declaration_must_have_a_simple_literal_type_or_a_unique_1166",
            "A computed property name in a class property declaration must have a simple literal type or a 'unique symbol' type.",
        );
    }
    lazy_static! {
        pub static ref A_computed_property_name_in_a_method_overload_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: DiagnosticMessage = diag(
            1168,
            DiagnosticCategory::Error,
            "A_computed_property_name_in_a_method_overload_must_refer_to_an_expression_whose_type_is_a_literal_ty_1168",
            "A computed property name in a method overload must refer to an expression whose type is a literal type or a 'unique symbol' type.",
        );
    }
    lazy_static! {
        pub static ref A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: DiagnosticMessage = diag(
            1169,
            DiagnosticCategory::Error,
            "A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_1169",
            "A computed property name in an interface must refer to an expression whose type is a literal type or a 'unique symbol' type.",
        );
    }
    lazy_static! {
        pub static ref A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: DiagnosticMessage = diag(
            1170,
            DiagnosticCategory::Error,
            "A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type__1170",
            "A computed property name in a type literal must refer to an expression whose type is a literal type or a 'unique symbol' type.",
        );
    }
    lazy_static! {
        pub static ref A_comma_expression_is_not_allowed_in_a_computed_property_name: DiagnosticMessage = diag(
            1171,
            DiagnosticCategory::Error,
            "A_comma_expression_is_not_allowed_in_a_computed_property_name_1171",
            "A comma expression is not allowed in a computed property name.",
        );
    }
    lazy_static! {
        pub static ref extends_clause_already_seen: DiagnosticMessage = diag(
            1172,
            DiagnosticCategory::Error,
            "extends_clause_already_seen_1172",
            "'extends' clause already seen.",
        );
    }
    lazy_static! {
        pub static ref extends_clause_must_precede_implements_clause: DiagnosticMessage = diag(
            1173,
            DiagnosticCategory::Error,
            "extends_clause_must_precede_implements_clause_1173",
            "'extends' clause must precede 'implements' clause.",
        );
    }
    lazy_static! {
        pub static ref Classes_can_only_extend_a_single_class: DiagnosticMessage = diag(
            1174,
            DiagnosticCategory::Error,
            "Classes_can_only_extend_a_single_class_1174",
            "Classes can only extend a single class.",
        );
    }
    lazy_static! {
        pub static ref implements_clause_already_seen: DiagnosticMessage = diag(
            1175,
            DiagnosticCategory::Error,
            "implements_clause_already_seen_1175",
            "'implements' clause already seen.",
        );
    }
    lazy_static! {
        pub static ref Interface_declaration_cannot_have_implements_clause: DiagnosticMessage = diag(
            1176,
            DiagnosticCategory::Error,
            "Interface_declaration_cannot_have_implements_clause_1176",
            "Interface declaration cannot have 'implements' clause.",
        );
    }
    lazy_static! {
        pub static ref Binary_digit_expected: DiagnosticMessage = diag(
            1177,
            DiagnosticCategory::Error,
            "Binary_digit_expected_1177",
            "Binary digit expected.",
        );
    }
    lazy_static! {
        pub static ref Octal_digit_expected: DiagnosticMessage = diag(
            1178,
            DiagnosticCategory::Error,
            "Octal_digit_expected_1178",
            "Octal digit expected.",
        );
    }
    lazy_static! {
        pub static ref Unexpected_token_expected: DiagnosticMessage = diag(
            1179,
            DiagnosticCategory::Error,
            "Unexpected_token_expected_1179",
            "Unexpected token. '{' expected.",
        );
    }
    lazy_static! {
        pub static ref Property_destructuring_pattern_expected: DiagnosticMessage = diag(
            1180,
            DiagnosticCategory::Error,
            "Property_destructuring_pattern_expected_1180",
            "Property destructuring pattern expected.",
        );
    }
    lazy_static! {
        pub static ref Array_element_destructuring_pattern_expected: DiagnosticMessage = diag(
            1181,
            DiagnosticCategory::Error,
            "Array_element_destructuring_pattern_expected_1181",
            "Array element destructuring pattern expected.",
        );
    }
    lazy_static! {
        pub static ref A_destructuring_declaration_must_have_an_initializer: DiagnosticMessage = diag(
            1182,
            DiagnosticCategory::Error,
            "A_destructuring_declaration_must_have_an_initializer_1182",
            "A destructuring declaration must have an initializer.",
        );
    }
    lazy_static! {
        pub static ref An_implementation_cannot_be_declared_in_ambient_contexts: DiagnosticMessage = diag(
            1183,
            DiagnosticCategory::Error,
            "An_implementation_cannot_be_declared_in_ambient_contexts_1183",
            "An implementation cannot be declared in ambient contexts.",
        );
    }
    lazy_static! {
        pub static ref Modifiers_cannot_appear_here: DiagnosticMessage = diag(
            1184,
            DiagnosticCategory::Error,
            "Modifiers_cannot_appear_here_1184",
            "Modifiers cannot appear here.",
        );
    }
    lazy_static! {
        pub static ref Merge_conflict_marker_encountered: DiagnosticMessage = diag(
            1185,
            DiagnosticCategory::Error,
            "Merge_conflict_marker_encountered_1185",
            "Merge conflict marker encountered.",
        );
    }
    lazy_static! {
        pub static ref A_rest_element_cannot_have_an_initializer: DiagnosticMessage = diag(
            1186,
            DiagnosticCategory::Error,
            "A_rest_element_cannot_have_an_initializer_1186",
            "A rest element cannot have an initializer.",
        );
    }
    lazy_static! {
        pub static ref A_parameter_property_may_not_be_declared_using_a_binding_pattern: DiagnosticMessage = diag(
            1187,
            DiagnosticCategory::Error,
            "A_parameter_property_may_not_be_declared_using_a_binding_pattern_1187",
            "A parameter property may not be declared using a binding pattern.",
        );
    }
    lazy_static! {
        pub static ref Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement: DiagnosticMessage = diag(
            1188,
            DiagnosticCategory::Error,
            "Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement_1188",
            "Only a single variable declaration is allowed in a 'for...of' statement.",
        );
    }
    lazy_static! {
        pub static ref The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer: DiagnosticMessage = diag(
            1189,
            DiagnosticCategory::Error,
            "The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer_1189",
            "The variable declaration of a 'for...in' statement cannot have an initializer.",
        );
    }
    lazy_static! {
        pub static ref The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer: DiagnosticMessage = diag(
            1190,
            DiagnosticCategory::Error,
            "The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer_1190",
            "The variable declaration of a 'for...of' statement cannot have an initializer.",
        );
    }
    lazy_static! {
        pub static ref An_import_declaration_cannot_have_modifiers: DiagnosticMessage = diag(
            1191,
            DiagnosticCategory::Error,
            "An_import_declaration_cannot_have_modifiers_1191",
            "An import declaration cannot have modifiers.",
        );
    }
    lazy_static! {
        pub static ref Module_0_has_no_default_export: DiagnosticMessage = diag(
            1192,
            DiagnosticCategory::Error,
            "Module_0_has_no_default_export_1192",
            "Module '{0}' has no default export.",
        );
    }
    lazy_static! {
        pub static ref An_export_declaration_cannot_have_modifiers: DiagnosticMessage = diag(
            1193,
            DiagnosticCategory::Error,
            "An_export_declaration_cannot_have_modifiers_1193",
            "An export declaration cannot have modifiers.",
        );
    }
    lazy_static! {
        pub static ref Export_declarations_are_not_permitted_in_a_namespace: DiagnosticMessage = diag(
            1194,
            DiagnosticCategory::Error,
            "Export_declarations_are_not_permitted_in_a_namespace_1194",
            "Export declarations are not permitted in a namespace.",
        );
    }
    lazy_static! {
        pub static ref export_Asterisk_does_not_re_export_a_default: DiagnosticMessage = diag(
            1195,
            DiagnosticCategory::Error,
            "export_Asterisk_does_not_re_export_a_default_1195",
            "'export *' does not re-export a default.",
        );
    }
    lazy_static! {
        pub static ref Catch_clause_variable_type_annotation_must_be_any_or_unknown_if_specified: DiagnosticMessage = diag(
            1196,
            DiagnosticCategory::Error,
            "Catch_clause_variable_type_annotation_must_be_any_or_unknown_if_specified_1196",
            "Catch clause variable type annotation must be 'any' or 'unknown' if specified.",
        );
    }
    lazy_static! {
        pub static ref Catch_clause_variable_cannot_have_an_initializer: DiagnosticMessage = diag(
            1197,
            DiagnosticCategory::Error,
            "Catch_clause_variable_cannot_have_an_initializer_1197",
            "Catch clause variable cannot have an initializer.",
        );
    }
    lazy_static! {
        pub static ref An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive: DiagnosticMessage = diag(
            1198,
            DiagnosticCategory::Error,
            "An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive_1198",
            "An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.",
        );
    }
    lazy_static! {
        pub static ref Unterminated_Unicode_escape_sequence: DiagnosticMessage = diag(
            1199,
            DiagnosticCategory::Error,
            "Unterminated_Unicode_escape_sequence_1199",
            "Unterminated Unicode escape sequence.",
        );
    }
    lazy_static! {
        pub static ref Line_terminator_not_permitted_before_arrow: DiagnosticMessage = diag(
            1200,
            DiagnosticCategory::Error,
            "Line_terminator_not_permitted_before_arrow_1200",
            "Line terminator not permitted before arrow.",
        );
    }
    lazy_static! {
        pub static ref Import_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_import_d_from_mod_or_another_module_format_instead: DiagnosticMessage = diag(
            1202,
            DiagnosticCategory::Error,
            "Import_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_import_Asterisk_as_1202",
            "Import assignment cannot be used when targeting ECMAScript modules. Consider using 'import * as ns from \"mod\"', 'import {a} from \"mod\"', 'import d from \"mod\"', or another module format instead.",
        );
    }
    lazy_static! {
        pub static ref Export_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_export_default_or_another_module_format_instead: DiagnosticMessage = diag(
            1203,
            DiagnosticCategory::Error,
            "Export_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_export_default_or__1203",
            "Export assignment cannot be used when targeting ECMAScript modules. Consider using 'export default' or another module format instead.",
        );
    }
    lazy_static! {
        pub static ref Re_exporting_a_type_when_the_isolatedModules_flag_is_provided_requires_using_export_type: DiagnosticMessage = diag(
            1205,
            DiagnosticCategory::Error,
            "Re_exporting_a_type_when_the_isolatedModules_flag_is_provided_requires_using_export_type_1205",
            "Re-exporting a type when the '--isolatedModules' flag is provided requires using 'export type'.",
        );
    }
    lazy_static! {
        pub static ref Decorators_are_not_valid_here: DiagnosticMessage = diag(
            1206,
            DiagnosticCategory::Error,
            "Decorators_are_not_valid_here_1206",
            "Decorators are not valid here.",
        );
    }
    lazy_static! {
        pub static ref Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name: DiagnosticMessage = diag(
            1207,
            DiagnosticCategory::Error,
            "Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name_1207",
            "Decorators cannot be applied to multiple get/set accessors of the same name.",
        );
    }
    lazy_static! {
        pub static ref _0_cannot_be_compiled_under_isolatedModules_because_it_is_considered_a_global_script_file_Add_an_import_export_or_an_empty_export_statement_to_make_it_a_module: DiagnosticMessage = diag(
            1208,
            DiagnosticCategory::Error,
            "_0_cannot_be_compiled_under_isolatedModules_because_it_is_considered_a_global_script_file_Add_an_imp_1208",
            "'{0}' cannot be compiled under '--isolatedModules' because it is considered a global script file. Add an import, export, or an empty 'export {}' statement to make it a module.",
        );
    }
    lazy_static! {
        pub static ref Code_contained_in_a_class_is_evaluated_in_JavaScript_s_strict_mode_which_does_not_allow_this_use_of_0_For_more_information_see_https_Colon_Slash_Slashdeveloper_mozilla_org_Slashen_US_Slashdocs_SlashWeb_SlashJavaScript_SlashReference_SlashStrict_mode: DiagnosticMessage = diag(
            1210,
            DiagnosticCategory::Error,
            "Code_contained_in_a_class_is_evaluated_in_JavaScript_s_strict_mode_which_does_not_allow_this_use_of__1210",
            "Code contained in a class is evaluated in JavaScript's strict mode which does not allow this use of '{0}'. For more information, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode.",
        );
    }
    lazy_static! {
        pub static ref A_class_declaration_without_the_default_modifier_must_have_a_name: DiagnosticMessage = diag(
            1211,
            DiagnosticCategory::Error,
            "A_class_declaration_without_the_default_modifier_must_have_a_name_1211",
            "A class declaration without the 'default' modifier must have a name.",
        );
    }
    lazy_static! {
        pub static ref Identifier_expected_0_is_a_reserved_word_in_strict_mode: DiagnosticMessage = diag(
            1212,
            DiagnosticCategory::Error,
            "Identifier_expected_0_is_a_reserved_word_in_strict_mode_1212",
            "Identifier expected. '{0}' is a reserved word in strict mode.",
        );
    }
    lazy_static! {
        pub static ref Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode: DiagnosticMessage = diag(
            1213,
            DiagnosticCategory::Error,
            "Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_stric_1213",
            "Identifier expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode.",
        );
    }
    lazy_static! {
        pub static ref Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode: DiagnosticMessage = diag(
            1214,
            DiagnosticCategory::Error,
            "Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode_1214",
            "Identifier expected. '{0}' is a reserved word in strict mode. Modules are automatically in strict mode.",
        );
    }
    lazy_static! {
        pub static ref Invalid_use_of_0_Modules_are_automatically_in_strict_mode: DiagnosticMessage = diag(
            1215,
            DiagnosticCategory::Error,
            "Invalid_use_of_0_Modules_are_automatically_in_strict_mode_1215",
            "Invalid use of '{0}'. Modules are automatically in strict mode.",
        );
    }
    lazy_static! {
        pub static ref Identifier_expected_esModule_is_reserved_as_an_exported_marker_when_transforming_ECMAScript_modules: DiagnosticMessage = diag(
            1216,
            DiagnosticCategory::Error,
            "Identifier_expected_esModule_is_reserved_as_an_exported_marker_when_transforming_ECMAScript_modules_1216",
            "Identifier expected. '__esModule' is reserved as an exported marker when transforming ECMAScript modules.",
        );
    }
    lazy_static! {
        pub static ref Export_assignment_is_not_supported_when_module_flag_is_system: DiagnosticMessage = diag(
            1218,
            DiagnosticCategory::Error,
            "Export_assignment_is_not_supported_when_module_flag_is_system_1218",
            "Export assignment is not supported when '--module' flag is 'system'.",
        );
    }
    lazy_static! {
        pub static ref Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Set_the_experimentalDecorators_option_in_your_tsconfig_or_jsconfig_to_remove_this_warning: DiagnosticMessage = diag(
            1219,
            DiagnosticCategory::Error,
            "Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Set_t_1219",
            "Experimental support for decorators is a feature that is subject to change in a future release. Set the 'experimentalDecorators' option in your 'tsconfig' or 'jsconfig' to remove this warning.",
        );
    }
    lazy_static! {
        pub static ref Generators_are_not_allowed_in_an_ambient_context: DiagnosticMessage = diag(
            1221,
            DiagnosticCategory::Error,
            "Generators_are_not_allowed_in_an_ambient_context_1221",
            "Generators are not allowed in an ambient context.",
        );
    }
    lazy_static! {
        pub static ref An_overload_signature_cannot_be_declared_as_a_generator: DiagnosticMessage = diag(
            1222,
            DiagnosticCategory::Error,
            "An_overload_signature_cannot_be_declared_as_a_generator_1222",
            "An overload signature cannot be declared as a generator.",
        );
    }
    lazy_static! {
        pub static ref _0_tag_already_specified: DiagnosticMessage = diag(
            1223,
            DiagnosticCategory::Error,
            "_0_tag_already_specified_1223",
            "'{0}' tag already specified.",
        );
    }
    lazy_static! {
        pub static ref Signature_0_must_be_a_type_predicate: DiagnosticMessage = diag(
            1224,
            DiagnosticCategory::Error,
            "Signature_0_must_be_a_type_predicate_1224",
            "Signature '{0}' must be a type predicate.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_parameter_0: DiagnosticMessage = diag(
            1225,
            DiagnosticCategory::Error,
            "Cannot_find_parameter_0_1225",
            "Cannot find parameter '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Type_predicate_0_is_not_assignable_to_1: DiagnosticMessage = diag(
            1226,
            DiagnosticCategory::Error,
            "Type_predicate_0_is_not_assignable_to_1_1226",
            "Type predicate '{0}' is not assignable to '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_is_not_in_the_same_position_as_parameter_1: DiagnosticMessage = diag(
            1227,
            DiagnosticCategory::Error,
            "Parameter_0_is_not_in_the_same_position_as_parameter_1_1227",
            "Parameter '{0}' is not in the same position as parameter '{1}'.",
        );
    }
    lazy_static! {
        pub static ref A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods: DiagnosticMessage = diag(
            1228,
            DiagnosticCategory::Error,
            "A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods_1228",
            "A type predicate is only allowed in return type position for functions and methods.",
        );
    }
    lazy_static! {
        pub static ref A_type_predicate_cannot_reference_a_rest_parameter: DiagnosticMessage = diag(
            1229,
            DiagnosticCategory::Error,
            "A_type_predicate_cannot_reference_a_rest_parameter_1229",
            "A type predicate cannot reference a rest parameter.",
        );
    }
    lazy_static! {
        pub static ref A_type_predicate_cannot_reference_element_0_in_a_binding_pattern: DiagnosticMessage = diag(
            1230,
            DiagnosticCategory::Error,
            "A_type_predicate_cannot_reference_element_0_in_a_binding_pattern_1230",
            "A type predicate cannot reference element '{0}' in a binding pattern.",
        );
    }
    lazy_static! {
        pub static ref An_export_assignment_must_be_at_the_top_level_of_a_file_or_module_declaration: DiagnosticMessage = diag(
            1231,
            DiagnosticCategory::Error,
            "An_export_assignment_must_be_at_the_top_level_of_a_file_or_module_declaration_1231",
            "An export assignment must be at the top level of a file or module declaration.",
        );
    }
    lazy_static! {
        pub static ref An_import_declaration_can_only_be_used_in_a_namespace_or_module: DiagnosticMessage = diag(
            1232,
            DiagnosticCategory::Error,
            "An_import_declaration_can_only_be_used_in_a_namespace_or_module_1232",
            "An import declaration can only be used in a namespace or module.",
        );
    }
    lazy_static! {
        pub static ref An_export_declaration_can_only_be_used_in_a_module: DiagnosticMessage = diag(
            1233,
            DiagnosticCategory::Error,
            "An_export_declaration_can_only_be_used_in_a_module_1233",
            "An export declaration can only be used in a module.",
        );
    }
    lazy_static! {
        pub static ref An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file: DiagnosticMessage = diag(
            1234,
            DiagnosticCategory::Error,
            "An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file_1234",
            "An ambient module declaration is only allowed at the top level in a file.",
        );
    }
    lazy_static! {
        pub static ref A_namespace_declaration_is_only_allowed_in_a_namespace_or_module: DiagnosticMessage = diag(
            1235,
            DiagnosticCategory::Error,
            "A_namespace_declaration_is_only_allowed_in_a_namespace_or_module_1235",
            "A namespace declaration is only allowed in a namespace or module.",
        );
    }
    lazy_static! {
        pub static ref The_return_type_of_a_property_decorator_function_must_be_either_void_or_any: DiagnosticMessage = diag(
            1236,
            DiagnosticCategory::Error,
            "The_return_type_of_a_property_decorator_function_must_be_either_void_or_any_1236",
            "The return type of a property decorator function must be either 'void' or 'any'.",
        );
    }
    lazy_static! {
        pub static ref The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any: DiagnosticMessage = diag(
            1237,
            DiagnosticCategory::Error,
            "The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any_1237",
            "The return type of a parameter decorator function must be either 'void' or 'any'.",
        );
    }
    lazy_static! {
        pub static ref Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression: DiagnosticMessage = diag(
            1238,
            DiagnosticCategory::Error,
            "Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression_1238",
            "Unable to resolve signature of class decorator when called as an expression.",
        );
    }
    lazy_static! {
        pub static ref Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression: DiagnosticMessage = diag(
            1239,
            DiagnosticCategory::Error,
            "Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression_1239",
            "Unable to resolve signature of parameter decorator when called as an expression.",
        );
    }
    lazy_static! {
        pub static ref Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression: DiagnosticMessage = diag(
            1240,
            DiagnosticCategory::Error,
            "Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression_1240",
            "Unable to resolve signature of property decorator when called as an expression.",
        );
    }
    lazy_static! {
        pub static ref Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression: DiagnosticMessage = diag(
            1241,
            DiagnosticCategory::Error,
            "Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression_1241",
            "Unable to resolve signature of method decorator when called as an expression.",
        );
    }
    lazy_static! {
        pub static ref abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration: DiagnosticMessage = diag(
            1242,
            DiagnosticCategory::Error,
            "abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration_1242",
            "'abstract' modifier can only appear on a class, method, or property declaration.",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_cannot_be_used_with_1_modifier: DiagnosticMessage = diag(
            1243,
            DiagnosticCategory::Error,
            "_0_modifier_cannot_be_used_with_1_modifier_1243",
            "'{0}' modifier cannot be used with '{1}' modifier.",
        );
    }
    lazy_static! {
        pub static ref Abstract_methods_can_only_appear_within_an_abstract_class: DiagnosticMessage = diag(
            1244,
            DiagnosticCategory::Error,
            "Abstract_methods_can_only_appear_within_an_abstract_class_1244",
            "Abstract methods can only appear within an abstract class.",
        );
    }
    lazy_static! {
        pub static ref Method_0_cannot_have_an_implementation_because_it_is_marked_abstract: DiagnosticMessage = diag(
            1245,
            DiagnosticCategory::Error,
            "Method_0_cannot_have_an_implementation_because_it_is_marked_abstract_1245",
            "Method '{0}' cannot have an implementation because it is marked abstract.",
        );
    }
    lazy_static! {
        pub static ref An_interface_property_cannot_have_an_initializer: DiagnosticMessage = diag(
            1246,
            DiagnosticCategory::Error,
            "An_interface_property_cannot_have_an_initializer_1246",
            "An interface property cannot have an initializer.",
        );
    }
    lazy_static! {
        pub static ref A_type_literal_property_cannot_have_an_initializer: DiagnosticMessage = diag(
            1247,
            DiagnosticCategory::Error,
            "A_type_literal_property_cannot_have_an_initializer_1247",
            "A type literal property cannot have an initializer.",
        );
    }
    lazy_static! {
        pub static ref A_class_member_cannot_have_the_0_keyword: DiagnosticMessage = diag(
            1248,
            DiagnosticCategory::Error,
            "A_class_member_cannot_have_the_0_keyword_1248",
            "A class member cannot have the '{0}' keyword.",
        );
    }
    lazy_static! {
        pub static ref A_decorator_can_only_decorate_a_method_implementation_not_an_overload: DiagnosticMessage = diag(
            1249,
            DiagnosticCategory::Error,
            "A_decorator_can_only_decorate_a_method_implementation_not_an_overload_1249",
            "A decorator can only decorate a method implementation, not an overload.",
        );
    }
    lazy_static! {
        pub static ref Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5: DiagnosticMessage = diag(
            1250,
            DiagnosticCategory::Error,
            "Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_1250",
            "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'.",
        );
    }
    lazy_static! {
        pub static ref Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Class_definitions_are_automatically_in_strict_mode: DiagnosticMessage = diag(
            1251,
            DiagnosticCategory::Error,
            "Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Class_d_1251",
            "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Class definitions are automatically in strict mode.",
        );
    }
    lazy_static! {
        pub static ref Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Modules_are_automatically_in_strict_mode: DiagnosticMessage = diag(
            1252,
            DiagnosticCategory::Error,
            "Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Modules_1252",
            "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Modules are automatically in strict mode.",
        );
    }
    lazy_static! {
        pub static ref A_const_initializer_in_an_ambient_context_must_be_a_string_or_numeric_literal_or_literal_enum_reference: DiagnosticMessage = diag(
            1254,
            DiagnosticCategory::Error,
            "A_const_initializer_in_an_ambient_context_must_be_a_string_or_numeric_literal_or_literal_enum_refere_1254",
            "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
        );
    }
    lazy_static! {
        pub static ref A_definite_assignment_assertion_is_not_permitted_in_this_context: DiagnosticMessage = diag(
            1255,
            DiagnosticCategory::Error,
            "A_definite_assignment_assertion_is_not_permitted_in_this_context_1255",
            "A definite assignment assertion '!' is not permitted in this context.",
        );
    }
    lazy_static! {
        pub static ref A_required_element_cannot_follow_an_optional_element: DiagnosticMessage = diag(
            1257,
            DiagnosticCategory::Error,
            "A_required_element_cannot_follow_an_optional_element_1257",
            "A required element cannot follow an optional element.",
        );
    }
    lazy_static! {
        pub static ref A_default_export_must_be_at_the_top_level_of_a_file_or_module_declaration: DiagnosticMessage = diag(
            1258,
            DiagnosticCategory::Error,
            "A_default_export_must_be_at_the_top_level_of_a_file_or_module_declaration_1258",
            "A default export must be at the top level of a file or module declaration.",
        );
    }
    lazy_static! {
        pub static ref Module_0_can_only_be_default_imported_using_the_1_flag: DiagnosticMessage = diag(
            1259,
            DiagnosticCategory::Error,
            "Module_0_can_only_be_default_imported_using_the_1_flag_1259",
            "Module '{0}' can only be default-imported using the '{1}' flag",
        );
    }
    lazy_static! {
        pub static ref Keywords_cannot_contain_escape_characters: DiagnosticMessage = diag(
            1260,
            DiagnosticCategory::Error,
            "Keywords_cannot_contain_escape_characters_1260",
            "Keywords cannot contain escape characters.",
        );
    }
    lazy_static! {
        pub static ref Already_included_file_name_0_differs_from_file_name_1_only_in_casing: DiagnosticMessage = diag(
            1261,
            DiagnosticCategory::Error,
            "Already_included_file_name_0_differs_from_file_name_1_only_in_casing_1261",
            "Already included file name '{0}' differs from file name '{1}' only in casing.",
        );
    }
    lazy_static! {
        pub static ref Identifier_expected_0_is_a_reserved_word_at_the_top_level_of_a_module: DiagnosticMessage = diag(
            1262,
            DiagnosticCategory::Error,
            "Identifier_expected_0_is_a_reserved_word_at_the_top_level_of_a_module_1262",
            "Identifier expected. '{0}' is a reserved word at the top-level of a module.",
        );
    }
    lazy_static! {
        pub static ref Declarations_with_initializers_cannot_also_have_definite_assignment_assertions: DiagnosticMessage = diag(
            1263,
            DiagnosticCategory::Error,
            "Declarations_with_initializers_cannot_also_have_definite_assignment_assertions_1263",
            "Declarations with initializers cannot also have definite assignment assertions.",
        );
    }
    lazy_static! {
        pub static ref Declarations_with_definite_assignment_assertions_must_also_have_type_annotations: DiagnosticMessage = diag(
            1264,
            DiagnosticCategory::Error,
            "Declarations_with_definite_assignment_assertions_must_also_have_type_annotations_1264",
            "Declarations with definite assignment assertions must also have type annotations.",
        );
    }
    lazy_static! {
        pub static ref A_rest_element_cannot_follow_another_rest_element: DiagnosticMessage = diag(
            1265,
            DiagnosticCategory::Error,
            "A_rest_element_cannot_follow_another_rest_element_1265",
            "A rest element cannot follow another rest element.",
        );
    }
    lazy_static! {
        pub static ref An_optional_element_cannot_follow_a_rest_element: DiagnosticMessage = diag(
            1266,
            DiagnosticCategory::Error,
            "An_optional_element_cannot_follow_a_rest_element_1266",
            "An optional element cannot follow a rest element.",
        );
    }
    lazy_static! {
        pub static ref Property_0_cannot_have_an_initializer_because_it_is_marked_abstract: DiagnosticMessage = diag(
            1267,
            DiagnosticCategory::Error,
            "Property_0_cannot_have_an_initializer_because_it_is_marked_abstract_1267",
            "Property '{0}' cannot have an initializer because it is marked abstract.",
        );
    }
    lazy_static! {
        pub static ref An_index_signature_parameter_type_must_be_string_number_symbol_or_a_template_literal_type: DiagnosticMessage = diag(
            1268,
            DiagnosticCategory::Error,
            "An_index_signature_parameter_type_must_be_string_number_symbol_or_a_template_literal_type_1268",
            "An index signature parameter type must be 'string', 'number', 'symbol', or a template literal type.",
        );
    }
    lazy_static! {
        pub static ref with_statements_are_not_allowed_in_an_async_function_block: DiagnosticMessage = diag(
            1300,
            DiagnosticCategory::Error,
            "with_statements_are_not_allowed_in_an_async_function_block_1300",
            "'with' statements are not allowed in an async function block.",
        );
    }
    lazy_static! {
        pub static ref await_expressions_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules: DiagnosticMessage = diag(
            1308,
            DiagnosticCategory::Error,
            "await_expressions_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules_1308",
            "'await' expressions are only allowed within async functions and at the top levels of modules.",
        );
    }
    lazy_static! {
        pub static ref Did_you_mean_to_use_a_Colon_An_can_only_follow_a_property_name_when_the_containing_object_literal_is_part_of_a_destructuring_pattern: DiagnosticMessage = diag(
            1312,
            DiagnosticCategory::Error,
            "Did_you_mean_to_use_a_Colon_An_can_only_follow_a_property_name_when_the_containing_object_literal_is_1312",
            "Did you mean to use a ':'? An '=' can only follow a property name when the containing object literal is part of a destructuring pattern.",
        );
    }
    lazy_static! {
        pub static ref The_body_of_an_if_statement_cannot_be_the_empty_statement: DiagnosticMessage = diag(
            1313,
            DiagnosticCategory::Error,
            "The_body_of_an_if_statement_cannot_be_the_empty_statement_1313",
            "The body of an 'if' statement cannot be the empty statement.",
        );
    }
    lazy_static! {
        pub static ref Global_module_exports_may_only_appear_in_module_files: DiagnosticMessage = diag(
            1314,
            DiagnosticCategory::Error,
            "Global_module_exports_may_only_appear_in_module_files_1314",
            "Global module exports may only appear in module files.",
        );
    }
    lazy_static! {
        pub static ref Global_module_exports_may_only_appear_in_declaration_files: DiagnosticMessage = diag(
            1315,
            DiagnosticCategory::Error,
            "Global_module_exports_may_only_appear_in_declaration_files_1315",
            "Global module exports may only appear in declaration files.",
        );
    }
    lazy_static! {
        pub static ref Global_module_exports_may_only_appear_at_top_level: DiagnosticMessage = diag(
            1316,
            DiagnosticCategory::Error,
            "Global_module_exports_may_only_appear_at_top_level_1316",
            "Global module exports may only appear at top level.",
        );
    }
    lazy_static! {
        pub static ref A_parameter_property_cannot_be_declared_using_a_rest_parameter: DiagnosticMessage = diag(
            1317,
            DiagnosticCategory::Error,
            "A_parameter_property_cannot_be_declared_using_a_rest_parameter_1317",
            "A parameter property cannot be declared using a rest parameter.",
        );
    }
    lazy_static! {
        pub static ref An_abstract_accessor_cannot_have_an_implementation: DiagnosticMessage = diag(
            1318,
            DiagnosticCategory::Error,
            "An_abstract_accessor_cannot_have_an_implementation_1318",
            "An abstract accessor cannot have an implementation.",
        );
    }
    lazy_static! {
        pub static ref A_default_export_can_only_be_used_in_an_ECMAScript_style_module: DiagnosticMessage = diag(
            1319,
            DiagnosticCategory::Error,
            "A_default_export_can_only_be_used_in_an_ECMAScript_style_module_1319",
            "A default export can only be used in an ECMAScript-style module.",
        );
    }
    lazy_static! {
        pub static ref Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: DiagnosticMessage = diag(
            1320,
            DiagnosticCategory::Error,
            "Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member_1320",
            "Type of 'await' operand must either be a valid promise or must not contain a callable 'then' member.",
        );
    }
    lazy_static! {
        pub static ref Type_of_yield_operand_in_an_async_generator_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: DiagnosticMessage = diag(
            1321,
            DiagnosticCategory::Error,
            "Type_of_yield_operand_in_an_async_generator_must_either_be_a_valid_promise_or_must_not_contain_a_cal_1321",
            "Type of 'yield' operand in an async generator must either be a valid promise or must not contain a callable 'then' member.",
        );
    }
    lazy_static! {
        pub static ref Type_of_iterated_elements_of_a_yield_Asterisk_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: DiagnosticMessage = diag(
            1322,
            DiagnosticCategory::Error,
            "Type_of_iterated_elements_of_a_yield_Asterisk_operand_must_either_be_a_valid_promise_or_must_not_con_1322",
            "Type of iterated elements of a 'yield*' operand must either be a valid promise or must not contain a callable 'then' member.",
        );
    }
    lazy_static! {
        pub static ref Dynamic_imports_are_only_supported_when_the_module_flag_is_set_to_es2020_es2022_esnext_commonjs_amd_system_umd_node12_or_nodenext: DiagnosticMessage = diag(
            1323,
            DiagnosticCategory::Error,
            "Dynamic_imports_are_only_supported_when_the_module_flag_is_set_to_es2020_es2022_esnext_commonjs_amd__1323",
            "Dynamic imports are only supported when the '--module' flag is set to 'es2020', 'es2022', 'esnext', 'commonjs', 'amd', 'system', 'umd', 'node12', or 'nodenext'.",
        );
    }
    lazy_static! {
        pub static ref Dynamic_imports_only_support_a_second_argument_when_the_module_option_is_set_to_esnext: DiagnosticMessage = diag(
            1324,
            DiagnosticCategory::Error,
            "Dynamic_imports_only_support_a_second_argument_when_the_module_option_is_set_to_esnext_1324",
            "Dynamic imports only support a second argument when the '--module' option is set to 'esnext'.",
        );
    }
    lazy_static! {
        pub static ref Argument_of_dynamic_import_cannot_be_spread_element: DiagnosticMessage = diag(
            1325,
            DiagnosticCategory::Error,
            "Argument_of_dynamic_import_cannot_be_spread_element_1325",
            "Argument of dynamic import cannot be spread element.",
        );
    }
    lazy_static! {
        pub static ref Dynamic_import_cannot_have_type_arguments: DiagnosticMessage = diag(
            1326,
            DiagnosticCategory::Error,
            "Dynamic_import_cannot_have_type_arguments_1326",
            "Dynamic import cannot have type arguments.",
        );
    }
    lazy_static! {
        pub static ref String_literal_with_double_quotes_expected: DiagnosticMessage = diag(
            1327,
            DiagnosticCategory::Error,
            "String_literal_with_double_quotes_expected_1327",
            "String literal with double quotes expected.",
        );
    }
    lazy_static! {
        pub static ref Property_value_can_only_be_string_literal_numeric_literal_true_false_null_object_literal_or_array_literal: DiagnosticMessage = diag(
            1328,
            DiagnosticCategory::Error,
            "Property_value_can_only_be_string_literal_numeric_literal_true_false_null_object_literal_or_array_li_1328",
            "Property value can only be string literal, numeric literal, 'true', 'false', 'null', object literal or array literal.",
        );
    }
    lazy_static! {
        pub static ref _0_accepts_too_few_arguments_to_be_used_as_a_decorator_here_Did_you_mean_to_call_it_first_and_write_0: DiagnosticMessage = diag(
            1329,
            DiagnosticCategory::Error,
            "_0_accepts_too_few_arguments_to_be_used_as_a_decorator_here_Did_you_mean_to_call_it_first_and_write__1329",
            "'{0}' accepts too few arguments to be used as a decorator here. Did you mean to call it first and write '@{0}()'?",
        );
    }
    lazy_static! {
        pub static ref A_property_of_an_interface_or_type_literal_whose_type_is_a_unique_symbol_type_must_be_readonly: DiagnosticMessage = diag(
            1330,
            DiagnosticCategory::Error,
            "A_property_of_an_interface_or_type_literal_whose_type_is_a_unique_symbol_type_must_be_readonly_1330",
            "A property of an interface or type literal whose type is a 'unique symbol' type must be 'readonly'.",
        );
    }
    lazy_static! {
        pub static ref A_property_of_a_class_whose_type_is_a_unique_symbol_type_must_be_both_static_and_readonly: DiagnosticMessage = diag(
            1331,
            DiagnosticCategory::Error,
            "A_property_of_a_class_whose_type_is_a_unique_symbol_type_must_be_both_static_and_readonly_1331",
            "A property of a class whose type is a 'unique symbol' type must be both 'static' and 'readonly'.",
        );
    }
    lazy_static! {
        pub static ref A_variable_whose_type_is_a_unique_symbol_type_must_be_const: DiagnosticMessage = diag(
            1332,
            DiagnosticCategory::Error,
            "A_variable_whose_type_is_a_unique_symbol_type_must_be_const_1332",
            "A variable whose type is a 'unique symbol' type must be 'const'.",
        );
    }
    lazy_static! {
        pub static ref unique_symbol_types_may_not_be_used_on_a_variable_declaration_with_a_binding_name: DiagnosticMessage = diag(
            1333,
            DiagnosticCategory::Error,
            "unique_symbol_types_may_not_be_used_on_a_variable_declaration_with_a_binding_name_1333",
            "'unique symbol' types may not be used on a variable declaration with a binding name.",
        );
    }
    lazy_static! {
        pub static ref unique_symbol_types_are_only_allowed_on_variables_in_a_variable_statement: DiagnosticMessage = diag(
            1334,
            DiagnosticCategory::Error,
            "unique_symbol_types_are_only_allowed_on_variables_in_a_variable_statement_1334",
            "'unique symbol' types are only allowed on variables in a variable statement.",
        );
    }
    lazy_static! {
        pub static ref unique_symbol_types_are_not_allowed_here: DiagnosticMessage = diag(
            1335,
            DiagnosticCategory::Error,
            "unique_symbol_types_are_not_allowed_here_1335",
            "'unique symbol' types are not allowed here.",
        );
    }
    lazy_static! {
        pub static ref An_index_signature_parameter_type_cannot_be_a_literal_type_or_generic_type_Consider_using_a_mapped_object_type_instead: DiagnosticMessage = diag(
            1337,
            DiagnosticCategory::Error,
            "An_index_signature_parameter_type_cannot_be_a_literal_type_or_generic_type_Consider_using_a_mapped_o_1337",
            "An index signature parameter type cannot be a literal type or generic type. Consider using a mapped object type instead.",
        );
    }
    lazy_static! {
        pub static ref infer_declarations_are_only_permitted_in_the_extends_clause_of_a_conditional_type: DiagnosticMessage = diag(
            1338,
            DiagnosticCategory::Error,
            "infer_declarations_are_only_permitted_in_the_extends_clause_of_a_conditional_type_1338",
            "'infer' declarations are only permitted in the 'extends' clause of a conditional type.",
        );
    }
    lazy_static! {
        pub static ref Module_0_does_not_refer_to_a_value_but_is_used_as_a_value_here: DiagnosticMessage = diag(
            1339,
            DiagnosticCategory::Error,
            "Module_0_does_not_refer_to_a_value_but_is_used_as_a_value_here_1339",
            "Module '{0}' does not refer to a value, but is used as a value here.",
        );
    }
    lazy_static! {
        pub static ref Module_0_does_not_refer_to_a_type_but_is_used_as_a_type_here_Did_you_mean_typeof_import_0: DiagnosticMessage = diag(
            1340,
            DiagnosticCategory::Error,
            "Module_0_does_not_refer_to_a_type_but_is_used_as_a_type_here_Did_you_mean_typeof_import_0_1340",
            "Module '{0}' does not refer to a type, but is used as a type here. Did you mean 'typeof import('{0}')'?",
        );
    }
    lazy_static! {
        pub static ref Type_arguments_cannot_be_used_here: DiagnosticMessage = diag(
            1342,
            DiagnosticCategory::Error,
            "Type_arguments_cannot_be_used_here_1342",
            "Type arguments cannot be used here.",
        );
    }
    lazy_static! {
        pub static ref The_import_meta_meta_property_is_only_allowed_when_the_module_option_is_es2020_es2022_esnext_system_node12_or_nodenext: DiagnosticMessage = diag(
            1343,
            DiagnosticCategory::Error,
            "The_import_meta_meta_property_is_only_allowed_when_the_module_option_is_es2020_es2022_esnext_system__1343",
            "The 'import.meta' meta-property is only allowed when the '--module' option is 'es2020', 'es2022', 'esnext', 'system', 'node12', or 'nodenext'.",
        );
    }
    lazy_static! {
        pub static ref A_label_is_not_allowed_here: DiagnosticMessage = diag(
            1344,
            DiagnosticCategory::Error,
            "A_label_is_not_allowed_here_1344",
            "'A label is not allowed here.",
        );
    }
    lazy_static! {
        pub static ref An_expression_of_type_void_cannot_be_tested_for_truthiness: DiagnosticMessage = diag(
            1345,
            DiagnosticCategory::Error,
            "An_expression_of_type_void_cannot_be_tested_for_truthiness_1345",
            "An expression of type 'void' cannot be tested for truthiness.",
        );
    }
    lazy_static! {
        pub static ref This_parameter_is_not_allowed_with_use_strict_directive: DiagnosticMessage = diag(
            1346,
            DiagnosticCategory::Error,
            "This_parameter_is_not_allowed_with_use_strict_directive_1346",
            "This parameter is not allowed with 'use strict' directive.",
        );
    }
    lazy_static! {
        pub static ref use_strict_directive_cannot_be_used_with_non_simple_parameter_list: DiagnosticMessage = diag(
            1347,
            DiagnosticCategory::Error,
            "use_strict_directive_cannot_be_used_with_non_simple_parameter_list_1347",
            "'use strict' directive cannot be used with non-simple parameter list.",
        );
    }
    lazy_static! {
        pub static ref Non_simple_parameter_declared_here: DiagnosticMessage = diag(
            1348,
            DiagnosticCategory::Error,
            "Non_simple_parameter_declared_here_1348",
            "Non-simple parameter declared here.",
        );
    }
    lazy_static! {
        pub static ref use_strict_directive_used_here: DiagnosticMessage = diag(
            1349,
            DiagnosticCategory::Error,
            "use_strict_directive_used_here_1349",
            "'use strict' directive used here.",
        );
    }
    lazy_static! {
        pub static ref Print_the_final_configuration_instead_of_building: DiagnosticMessage = diag(
            1350,
            DiagnosticCategory::Message,
            "Print_the_final_configuration_instead_of_building_1350",
            "Print the final configuration instead of building.",
        );
    }
    lazy_static! {
        pub static ref An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal: DiagnosticMessage = diag(
            1351,
            DiagnosticCategory::Error,
            "An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal_1351",
            "An identifier or keyword cannot immediately follow a numeric literal.",
        );
    }
    lazy_static! {
        pub static ref A_bigint_literal_cannot_use_exponential_notation: DiagnosticMessage = diag(
            1352,
            DiagnosticCategory::Error,
            "A_bigint_literal_cannot_use_exponential_notation_1352",
            "A bigint literal cannot use exponential notation.",
        );
    }
    lazy_static! {
        pub static ref A_bigint_literal_must_be_an_integer: DiagnosticMessage = diag(
            1353,
            DiagnosticCategory::Error,
            "A_bigint_literal_must_be_an_integer_1353",
            "A bigint literal must be an integer.",
        );
    }
    lazy_static! {
        pub static ref readonly_type_modifier_is_only_permitted_on_array_and_tuple_literal_types: DiagnosticMessage = diag(
            1354,
            DiagnosticCategory::Error,
            "readonly_type_modifier_is_only_permitted_on_array_and_tuple_literal_types_1354",
            "'readonly' type modifier is only permitted on array and tuple literal types.",
        );
    }
    lazy_static! {
        pub static ref A_const_assertions_can_only_be_applied_to_references_to_enum_members_or_string_number_boolean_array_or_object_literals: DiagnosticMessage = diag(
            1355,
            DiagnosticCategory::Error,
            "A_const_assertions_can_only_be_applied_to_references_to_enum_members_or_string_number_boolean_array__1355",
            "A 'const' assertions can only be applied to references to enum members, or string, number, boolean, array, or object literals.",
        );
    }
    lazy_static! {
        pub static ref Did_you_mean_to_mark_this_function_as_async: DiagnosticMessage = diag(
            1356,
            DiagnosticCategory::Error,
            "Did_you_mean_to_mark_this_function_as_async_1356",
            "Did you mean to mark this function as 'async'?",
        );
    }
    lazy_static! {
        pub static ref An_enum_member_name_must_be_followed_by_a_or: DiagnosticMessage = diag(
            1357,
            DiagnosticCategory::Error,
            "An_enum_member_name_must_be_followed_by_a_or_1357",
            "An enum member name must be followed by a ',', '=', or '}'.",
        );
    }
    lazy_static! {
        pub static ref Tagged_template_expressions_are_not_permitted_in_an_optional_chain: DiagnosticMessage = diag(
            1358,
            DiagnosticCategory::Error,
            "Tagged_template_expressions_are_not_permitted_in_an_optional_chain_1358",
            "Tagged template expressions are not permitted in an optional chain.",
        );
    }
    lazy_static! {
        pub static ref Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here: DiagnosticMessage = diag(
            1359,
            DiagnosticCategory::Error,
            "Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here_1359",
            "Identifier expected. '{0}' is a reserved word that cannot be used here.",
        );
    }
    lazy_static! {
        pub static ref _0_cannot_be_used_as_a_value_because_it_was_imported_using_import_type: DiagnosticMessage = diag(
            1361,
            DiagnosticCategory::Error,
            "_0_cannot_be_used_as_a_value_because_it_was_imported_using_import_type_1361",
            "'{0}' cannot be used as a value because it was imported using 'import type'.",
        );
    }
    lazy_static! {
        pub static ref _0_cannot_be_used_as_a_value_because_it_was_exported_using_export_type: DiagnosticMessage = diag(
            1362,
            DiagnosticCategory::Error,
            "_0_cannot_be_used_as_a_value_because_it_was_exported_using_export_type_1362",
            "'{0}' cannot be used as a value because it was exported using 'export type'.",
        );
    }
    lazy_static! {
        pub static ref A_type_only_import_can_specify_a_default_import_or_named_bindings_but_not_both: DiagnosticMessage = diag(
            1363,
            DiagnosticCategory::Error,
            "A_type_only_import_can_specify_a_default_import_or_named_bindings_but_not_both_1363",
            "A type-only import can specify a default import or named bindings, but not both.",
        );
    }
    lazy_static! {
        pub static ref Convert_to_type_only_export: DiagnosticMessage = diag(
            1364,
            DiagnosticCategory::Message,
            "Convert_to_type_only_export_1364",
            "Convert to type-only export",
        );
    }
    lazy_static! {
        pub static ref Convert_all_re_exported_types_to_type_only_exports: DiagnosticMessage = diag(
            1365,
            DiagnosticCategory::Message,
            "Convert_all_re_exported_types_to_type_only_exports_1365",
            "Convert all re-exported types to type-only exports",
        );
    }
    lazy_static! {
        pub static ref Split_into_two_separate_import_declarations: DiagnosticMessage = diag(
            1366,
            DiagnosticCategory::Message,
            "Split_into_two_separate_import_declarations_1366",
            "Split into two separate import declarations",
        );
    }
    lazy_static! {
        pub static ref Split_all_invalid_type_only_imports: DiagnosticMessage = diag(
            1367,
            DiagnosticCategory::Message,
            "Split_all_invalid_type_only_imports_1367",
            "Split all invalid type-only imports",
        );
    }
    lazy_static! {
        pub static ref Did_you_mean_0: DiagnosticMessage = diag(
            1369,
            DiagnosticCategory::Message,
            "Did_you_mean_0_1369",
            "Did you mean '{0}'?",
        );
    }
    lazy_static! {
        pub static ref This_import_is_never_used_as_a_value_and_must_use_import_type_because_importsNotUsedAsValues_is_set_to_error: DiagnosticMessage = diag(
            1371,
            DiagnosticCategory::Error,
            "This_import_is_never_used_as_a_value_and_must_use_import_type_because_importsNotUsedAsValues_is_set__1371",
            "This import is never used as a value and must use 'import type' because 'importsNotUsedAsValues' is set to 'error'.",
        );
    }
    lazy_static! {
        pub static ref Convert_to_type_only_import: DiagnosticMessage = diag(
            1373,
            DiagnosticCategory::Message,
            "Convert_to_type_only_import_1373",
            "Convert to type-only import",
        );
    }
    lazy_static! {
        pub static ref Convert_all_imports_not_used_as_a_value_to_type_only_imports: DiagnosticMessage = diag(
            1374,
            DiagnosticCategory::Message,
            "Convert_all_imports_not_used_as_a_value_to_type_only_imports_1374",
            "Convert all imports not used as a value to type-only imports",
        );
    }
    lazy_static! {
        pub static ref await_expressions_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module: DiagnosticMessage = diag(
            1375,
            DiagnosticCategory::Error,
            "await_expressions_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_fi_1375",
            "'await' expressions are only allowed at the top level of a file when that file is a module, but this file has no imports or exports. Consider adding an empty 'export {}' to make this file a module.",
        );
    }
    lazy_static! {
        pub static ref _0_was_imported_here: DiagnosticMessage = diag(
            1376,
            DiagnosticCategory::Message,
            "_0_was_imported_here_1376",
            "'{0}' was imported here.",
        );
    }
    lazy_static! {
        pub static ref _0_was_exported_here: DiagnosticMessage = diag(
            1377,
            DiagnosticCategory::Message,
            "_0_was_exported_here_1377",
            "'{0}' was exported here.",
        );
    }
    lazy_static! {
        pub static ref Top_level_await_expressions_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_or_nodenext_and_the_target_option_is_set_to_es2017_or_higher: DiagnosticMessage = diag(
            1378,
            DiagnosticCategory::Error,
            "Top_level_await_expressions_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_o_1378",
            "Top-level 'await' expressions are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', or 'nodenext', and the 'target' option is set to 'es2017' or higher.",
        );
    }
    lazy_static! {
        pub static ref An_import_alias_cannot_reference_a_declaration_that_was_exported_using_export_type: DiagnosticMessage = diag(
            1379,
            DiagnosticCategory::Error,
            "An_import_alias_cannot_reference_a_declaration_that_was_exported_using_export_type_1379",
            "An import alias cannot reference a declaration that was exported using 'export type'.",
        );
    }
    lazy_static! {
        pub static ref An_import_alias_cannot_reference_a_declaration_that_was_imported_using_import_type: DiagnosticMessage = diag(
            1380,
            DiagnosticCategory::Error,
            "An_import_alias_cannot_reference_a_declaration_that_was_imported_using_import_type_1380",
            "An import alias cannot reference a declaration that was imported using 'import type'.",
        );
    }
    lazy_static! {
        pub static ref Unexpected_token_Did_you_mean_or_rbrace: DiagnosticMessage = diag(
            1381,
            DiagnosticCategory::Error,
            "Unexpected_token_Did_you_mean_or_rbrace_1381",
            "Unexpected token. Did you mean `{'}'}` or `&rbrace;`?",
        );
    }
    lazy_static! {
        pub static ref Unexpected_token_Did_you_mean_or_gt: DiagnosticMessage = diag(
            1382,
            DiagnosticCategory::Error,
            "Unexpected_token_Did_you_mean_or_gt_1382",
            "Unexpected token. Did you mean `{'>'}` or `&gt;`?",
        );
    }
    lazy_static! {
        pub static ref Only_named_exports_may_use_export_type: DiagnosticMessage = diag(
            1383,
            DiagnosticCategory::Error,
            "Only_named_exports_may_use_export_type_1383",
            "Only named exports may use 'export type'.",
        );
    }
    lazy_static! {
        pub static ref A_new_expression_with_type_arguments_must_always_be_followed_by_a_parenthesized_argument_list: DiagnosticMessage = diag(
            1384,
            DiagnosticCategory::Error,
            "A_new_expression_with_type_arguments_must_always_be_followed_by_a_parenthesized_argument_list_1384",
            "A 'new' expression with type arguments must always be followed by a parenthesized argument list.",
        );
    }
    lazy_static! {
        pub static ref Function_type_notation_must_be_parenthesized_when_used_in_a_union_type: DiagnosticMessage = diag(
            1385,
            DiagnosticCategory::Error,
            "Function_type_notation_must_be_parenthesized_when_used_in_a_union_type_1385",
            "Function type notation must be parenthesized when used in a union type.",
        );
    }
    lazy_static! {
        pub static ref Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type: DiagnosticMessage = diag(
            1386,
            DiagnosticCategory::Error,
            "Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type_1386",
            "Constructor type notation must be parenthesized when used in a union type.",
        );
    }
    lazy_static! {
        pub static ref Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type: DiagnosticMessage = diag(
            1387,
            DiagnosticCategory::Error,
            "Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type_1387",
            "Function type notation must be parenthesized when used in an intersection type.",
        );
    }
    lazy_static! {
        pub static ref Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type: DiagnosticMessage = diag(
            1388,
            DiagnosticCategory::Error,
            "Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type_1388",
            "Constructor type notation must be parenthesized when used in an intersection type.",
        );
    }
    lazy_static! {
        pub static ref _0_is_not_allowed_as_a_variable_declaration_name: DiagnosticMessage = diag(
            1389,
            DiagnosticCategory::Error,
            "_0_is_not_allowed_as_a_variable_declaration_name_1389",
            "'{0}' is not allowed as a variable declaration name.",
        );
    }
    lazy_static! {
        pub static ref _0_is_not_allowed_as_a_parameter_name: DiagnosticMessage = diag(
            1390,
            DiagnosticCategory::Error,
            "_0_is_not_allowed_as_a_parameter_name_1390",
            "'{0}' is not allowed as a parameter name.",
        );
    }
    lazy_static! {
        pub static ref An_import_alias_cannot_use_import_type: DiagnosticMessage = diag(
            1392,
            DiagnosticCategory::Error,
            "An_import_alias_cannot_use_import_type_1392",
            "An import alias cannot use 'import type'",
        );
    }
    lazy_static! {
        pub static ref Imported_via_0_from_file_1: DiagnosticMessage = diag(
            1393,
            DiagnosticCategory::Message,
            "Imported_via_0_from_file_1_1393",
            "Imported via {0} from file '{1}'",
        );
    }
    lazy_static! {
        pub static ref Imported_via_0_from_file_1_with_packageId_2: DiagnosticMessage = diag(
            1394,
            DiagnosticCategory::Message,
            "Imported_via_0_from_file_1_with_packageId_2_1394",
            "Imported via {0} from file '{1}' with packageId '{2}'",
        );
    }
    lazy_static! {
        pub static ref Imported_via_0_from_file_1_to_import_importHelpers_as_specified_in_compilerOptions: DiagnosticMessage = diag(
            1395,
            DiagnosticCategory::Message,
            "Imported_via_0_from_file_1_to_import_importHelpers_as_specified_in_compilerOptions_1395",
            "Imported via {0} from file '{1}' to import 'importHelpers' as specified in compilerOptions",
        );
    }
    lazy_static! {
        pub static ref Imported_via_0_from_file_1_with_packageId_2_to_import_importHelpers_as_specified_in_compilerOptions: DiagnosticMessage = diag(
            1396,
            DiagnosticCategory::Message,
            "Imported_via_0_from_file_1_with_packageId_2_to_import_importHelpers_as_specified_in_compilerOptions_1396",
            "Imported via {0} from file '{1}' with packageId '{2}' to import 'importHelpers' as specified in compilerOptions",
        );
    }
    lazy_static! {
        pub static ref Imported_via_0_from_file_1_to_import_jsx_and_jsxs_factory_functions: DiagnosticMessage = diag(
            1397,
            DiagnosticCategory::Message,
            "Imported_via_0_from_file_1_to_import_jsx_and_jsxs_factory_functions_1397",
            "Imported via {0} from file '{1}' to import 'jsx' and 'jsxs' factory functions",
        );
    }
    lazy_static! {
        pub static ref Imported_via_0_from_file_1_with_packageId_2_to_import_jsx_and_jsxs_factory_functions: DiagnosticMessage = diag(
            1398,
            DiagnosticCategory::Message,
            "Imported_via_0_from_file_1_with_packageId_2_to_import_jsx_and_jsxs_factory_functions_1398",
            "Imported via {0} from file '{1}' with packageId '{2}' to import 'jsx' and 'jsxs' factory functions",
        );
    }
    lazy_static! {
        pub static ref File_is_included_via_import_here: DiagnosticMessage = diag(
            1399,
            DiagnosticCategory::Message,
            "File_is_included_via_import_here_1399",
            "File is included via import here.",
        );
    }
    lazy_static! {
        pub static ref Referenced_via_0_from_file_1: DiagnosticMessage = diag(
            1400,
            DiagnosticCategory::Message,
            "Referenced_via_0_from_file_1_1400",
            "Referenced via '{0}' from file '{1}'",
        );
    }
    lazy_static! {
        pub static ref File_is_included_via_reference_here: DiagnosticMessage = diag(
            1401,
            DiagnosticCategory::Message,
            "File_is_included_via_reference_here_1401",
            "File is included via reference here.",
        );
    }
    lazy_static! {
        pub static ref Type_library_referenced_via_0_from_file_1: DiagnosticMessage = diag(
            1402,
            DiagnosticCategory::Message,
            "Type_library_referenced_via_0_from_file_1_1402",
            "Type library referenced via '{0}' from file '{1}'",
        );
    }
    lazy_static! {
        pub static ref Type_library_referenced_via_0_from_file_1_with_packageId_2: DiagnosticMessage = diag(
            1403,
            DiagnosticCategory::Message,
            "Type_library_referenced_via_0_from_file_1_with_packageId_2_1403",
            "Type library referenced via '{0}' from file '{1}' with packageId '{2}'",
        );
    }
    lazy_static! {
        pub static ref File_is_included_via_type_library_reference_here: DiagnosticMessage = diag(
            1404,
            DiagnosticCategory::Message,
            "File_is_included_via_type_library_reference_here_1404",
            "File is included via type library reference here.",
        );
    }
    lazy_static! {
        pub static ref Library_referenced_via_0_from_file_1: DiagnosticMessage = diag(
            1405,
            DiagnosticCategory::Message,
            "Library_referenced_via_0_from_file_1_1405",
            "Library referenced via '{0}' from file '{1}'",
        );
    }
    lazy_static! {
        pub static ref File_is_included_via_library_reference_here: DiagnosticMessage = diag(
            1406,
            DiagnosticCategory::Message,
            "File_is_included_via_library_reference_here_1406",
            "File is included via library reference here.",
        );
    }
    lazy_static! {
        pub static ref Matched_by_include_pattern_0_in_1: DiagnosticMessage = diag(
            1407,
            DiagnosticCategory::Message,
            "Matched_by_include_pattern_0_in_1_1407",
            "Matched by include pattern '{0}' in '{1}'",
        );
    }
    lazy_static! {
        pub static ref File_is_matched_by_include_pattern_specified_here: DiagnosticMessage = diag(
            1408,
            DiagnosticCategory::Message,
            "File_is_matched_by_include_pattern_specified_here_1408",
            "File is matched by include pattern specified here.",
        );
    }
    lazy_static! {
        pub static ref Part_of_files_list_in_tsconfig_json: DiagnosticMessage = diag(
            1409,
            DiagnosticCategory::Message,
            "Part_of_files_list_in_tsconfig_json_1409",
            "Part of 'files' list in tsconfig.json",
        );
    }
    lazy_static! {
        pub static ref File_is_matched_by_files_list_specified_here: DiagnosticMessage = diag(
            1410,
            DiagnosticCategory::Message,
            "File_is_matched_by_files_list_specified_here_1410",
            "File is matched by 'files' list specified here.",
        );
    }
    lazy_static! {
        pub static ref Output_from_referenced_project_0_included_because_1_specified: DiagnosticMessage = diag(
            1411,
            DiagnosticCategory::Message,
            "Output_from_referenced_project_0_included_because_1_specified_1411",
            "Output from referenced project '{0}' included because '{1}' specified",
        );
    }
    lazy_static! {
        pub static ref Output_from_referenced_project_0_included_because_module_is_specified_as_none: DiagnosticMessage = diag(
            1412,
            DiagnosticCategory::Message,
            "Output_from_referenced_project_0_included_because_module_is_specified_as_none_1412",
            "Output from referenced project '{0}' included because '--module' is specified as 'none'",
        );
    }
    lazy_static! {
        pub static ref File_is_output_from_referenced_project_specified_here: DiagnosticMessage = diag(
            1413,
            DiagnosticCategory::Message,
            "File_is_output_from_referenced_project_specified_here_1413",
            "File is output from referenced project specified here.",
        );
    }
    lazy_static! {
        pub static ref Source_from_referenced_project_0_included_because_1_specified: DiagnosticMessage = diag(
            1414,
            DiagnosticCategory::Message,
            "Source_from_referenced_project_0_included_because_1_specified_1414",
            "Source from referenced project '{0}' included because '{1}' specified",
        );
    }
    lazy_static! {
        pub static ref Source_from_referenced_project_0_included_because_module_is_specified_as_none: DiagnosticMessage = diag(
            1415,
            DiagnosticCategory::Message,
            "Source_from_referenced_project_0_included_because_module_is_specified_as_none_1415",
            "Source from referenced project '{0}' included because '--module' is specified as 'none'",
        );
    }
    lazy_static! {
        pub static ref File_is_source_from_referenced_project_specified_here: DiagnosticMessage = diag(
            1416,
            DiagnosticCategory::Message,
            "File_is_source_from_referenced_project_specified_here_1416",
            "File is source from referenced project specified here.",
        );
    }
    lazy_static! {
        pub static ref Entry_point_of_type_library_0_specified_in_compilerOptions: DiagnosticMessage = diag(
            1417,
            DiagnosticCategory::Message,
            "Entry_point_of_type_library_0_specified_in_compilerOptions_1417",
            "Entry point of type library '{0}' specified in compilerOptions",
        );
    }
    lazy_static! {
        pub static ref Entry_point_of_type_library_0_specified_in_compilerOptions_with_packageId_1: DiagnosticMessage = diag(
            1418,
            DiagnosticCategory::Message,
            "Entry_point_of_type_library_0_specified_in_compilerOptions_with_packageId_1_1418",
            "Entry point of type library '{0}' specified in compilerOptions with packageId '{1}'",
        );
    }
    lazy_static! {
        pub static ref File_is_entry_point_of_type_library_specified_here: DiagnosticMessage = diag(
            1419,
            DiagnosticCategory::Message,
            "File_is_entry_point_of_type_library_specified_here_1419",
            "File is entry point of type library specified here.",
        );
    }
    lazy_static! {
        pub static ref Entry_point_for_implicit_type_library_0: DiagnosticMessage = diag(
            1420,
            DiagnosticCategory::Message,
            "Entry_point_for_implicit_type_library_0_1420",
            "Entry point for implicit type library '{0}'",
        );
    }
    lazy_static! {
        pub static ref Entry_point_for_implicit_type_library_0_with_packageId_1: DiagnosticMessage = diag(
            1421,
            DiagnosticCategory::Message,
            "Entry_point_for_implicit_type_library_0_with_packageId_1_1421",
            "Entry point for implicit type library '{0}' with packageId '{1}'",
        );
    }
    lazy_static! {
        pub static ref Library_0_specified_in_compilerOptions: DiagnosticMessage = diag(
            1422,
            DiagnosticCategory::Message,
            "Library_0_specified_in_compilerOptions_1422",
            "Library '{0}' specified in compilerOptions",
        );
    }
    lazy_static! {
        pub static ref File_is_library_specified_here: DiagnosticMessage = diag(
            1423,
            DiagnosticCategory::Message,
            "File_is_library_specified_here_1423",
            "File is library specified here.",
        );
    }
    lazy_static! {
        pub static ref Default_library: DiagnosticMessage = diag(
            1424,
            DiagnosticCategory::Message,
            "Default_library_1424",
            "Default library",
        );
    }
    lazy_static! {
        pub static ref Default_library_for_target_0: DiagnosticMessage = diag(
            1425,
            DiagnosticCategory::Message,
            "Default_library_for_target_0_1425",
            "Default library for target '{0}'",
        );
    }
    lazy_static! {
        pub static ref File_is_default_library_for_target_specified_here: DiagnosticMessage = diag(
            1426,
            DiagnosticCategory::Message,
            "File_is_default_library_for_target_specified_here_1426",
            "File is default library for target specified here.",
        );
    }
    lazy_static! {
        pub static ref Root_file_specified_for_compilation: DiagnosticMessage = diag(
            1427,
            DiagnosticCategory::Message,
            "Root_file_specified_for_compilation_1427",
            "Root file specified for compilation",
        );
    }
    lazy_static! {
        pub static ref File_is_output_of_project_reference_source_0: DiagnosticMessage = diag(
            1428,
            DiagnosticCategory::Message,
            "File_is_output_of_project_reference_source_0_1428",
            "File is output of project reference source '{0}'",
        );
    }
    lazy_static! {
        pub static ref File_redirects_to_file_0: DiagnosticMessage = diag(
            1429,
            DiagnosticCategory::Message,
            "File_redirects_to_file_0_1429",
            "File redirects to file '{0}'",
        );
    }
    lazy_static! {
        pub static ref The_file_is_in_the_program_because_Colon: DiagnosticMessage = diag(
            1430,
            DiagnosticCategory::Message,
            "The_file_is_in_the_program_because_Colon_1430",
            "The file is in the program because:",
        );
    }
    lazy_static! {
        pub static ref for_await_loops_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module: DiagnosticMessage = diag(
            1431,
            DiagnosticCategory::Error,
            "for_await_loops_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_1431",
            "'for await' loops are only allowed at the top level of a file when that file is a module, but this file has no imports or exports. Consider adding an empty 'export {}' to make this file a module.",
        );
    }
    lazy_static! {
        pub static ref Top_level_for_await_loops_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_or_nodenext_and_the_target_option_is_set_to_es2017_or_higher: DiagnosticMessage = diag(
            1432,
            DiagnosticCategory::Error,
            "Top_level_for_await_loops_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_or__1432",
            "Top-level 'for await' loops are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', or 'nodenext', and the 'target' option is set to 'es2017' or higher.",
        );
    }
    lazy_static! {
        pub static ref Decorators_may_not_be_applied_to_this_parameters: DiagnosticMessage = diag(
            1433,
            DiagnosticCategory::Error,
            "Decorators_may_not_be_applied_to_this_parameters_1433",
            "Decorators may not be applied to 'this' parameters.",
        );
    }
    lazy_static! {
        pub static ref Unexpected_keyword_or_identifier: DiagnosticMessage = diag(
            1434,
            DiagnosticCategory::Error,
            "Unexpected_keyword_or_identifier_1434",
            "Unexpected keyword or identifier.",
        );
    }
    lazy_static! {
        pub static ref Unknown_keyword_or_identifier_Did_you_mean_0: DiagnosticMessage = diag(
            1435,
            DiagnosticCategory::Error,
            "Unknown_keyword_or_identifier_Did_you_mean_0_1435",
            "Unknown keyword or identifier. Did you mean '{0}'?",
        );
    }
    lazy_static! {
        pub static ref Decorators_must_precede_the_name_and_all_keywords_of_property_declarations: DiagnosticMessage = diag(
            1436,
            DiagnosticCategory::Error,
            "Decorators_must_precede_the_name_and_all_keywords_of_property_declarations_1436",
            "Decorators must precede the name and all keywords of property declarations.",
        );
    }
    lazy_static! {
        pub static ref Namespace_must_be_given_a_name: DiagnosticMessage = diag(
            1437,
            DiagnosticCategory::Error,
            "Namespace_must_be_given_a_name_1437",
            "Namespace must be given a name.",
        );
    }
    lazy_static! {
        pub static ref Interface_must_be_given_a_name: DiagnosticMessage = diag(
            1438,
            DiagnosticCategory::Error,
            "Interface_must_be_given_a_name_1438",
            "Interface must be given a name.",
        );
    }
    lazy_static! {
        pub static ref Type_alias_must_be_given_a_name: DiagnosticMessage = diag(
            1439,
            DiagnosticCategory::Error,
            "Type_alias_must_be_given_a_name_1439",
            "Type alias must be given a name.",
        );
    }
    lazy_static! {
        pub static ref Variable_declaration_not_allowed_at_this_location: DiagnosticMessage = diag(
            1440,
            DiagnosticCategory::Error,
            "Variable_declaration_not_allowed_at_this_location_1440",
            "Variable declaration not allowed at this location.",
        );
    }
    lazy_static! {
        pub static ref Cannot_start_a_function_call_in_a_type_annotation: DiagnosticMessage = diag(
            1441,
            DiagnosticCategory::Error,
            "Cannot_start_a_function_call_in_a_type_annotation_1441",
            "Cannot start a function call in a type annotation.",
        );
    }
    lazy_static! {
        pub static ref Expected_for_property_initializer: DiagnosticMessage = diag(
            1442,
            DiagnosticCategory::Error,
            "Expected_for_property_initializer_1442",
            "Expected '=' for property initializer.",
        );
    }
    lazy_static! {
        pub static ref Module_declaration_names_may_only_use_or_quoted_strings: DiagnosticMessage = diag(
            1443,
            DiagnosticCategory::Error,
            "Module_declaration_names_may_only_use_or_quoted_strings_1443",
            "Module declaration names may only use ' or \" quoted strings.",
        );
    }
    lazy_static! {
        pub static ref _0_is_a_type_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedModules_are_both_enabled: DiagnosticMessage = diag(
            1444,
            DiagnosticCategory::Error,
            "_0_is_a_type_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedMod_1444",
            "'{0}' is a type and must be imported using a type-only import when 'preserveValueImports' and 'isolatedModules' are both enabled.",
        );
    }
    lazy_static! {
        pub static ref _0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedModules_are_both_enabled: DiagnosticMessage = diag(
            1446,
            DiagnosticCategory::Error,
            "_0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_preserveVa_1446",
            "'{0}' resolves to a type-only declaration and must be imported using a type-only import when 'preserveValueImports' and 'isolatedModules' are both enabled.",
        );
    }
    lazy_static! {
        pub static ref _0_resolves_to_a_type_only_declaration_and_must_be_re_exported_using_a_type_only_re_export_when_isolatedModules_is_enabled: DiagnosticMessage = diag(
            1448,
            DiagnosticCategory::Error,
            "_0_resolves_to_a_type_only_declaration_and_must_be_re_exported_using_a_type_only_re_export_when_isol_1448",
            "'{0}' resolves to a type-only declaration and must be re-exported using a type-only re-export when 'isolatedModules' is enabled.",
        );
    }
    lazy_static! {
        pub static ref Preserve_unused_imported_values_in_the_JavaScript_output_that_would_otherwise_be_removed: DiagnosticMessage = diag(
            1449,
            DiagnosticCategory::Message,
            "Preserve_unused_imported_values_in_the_JavaScript_output_that_would_otherwise_be_removed_1449",
            "Preserve unused imported values in the JavaScript output that would otherwise be removed.",
        );
    }
    lazy_static! {
        pub static ref Dynamic_imports_can_only_accept_a_module_specifier_and_an_optional_assertion_as_arguments: DiagnosticMessage = diag(
            1450,
            DiagnosticCategory::Message,
            "Dynamic_imports_can_only_accept_a_module_specifier_and_an_optional_assertion_as_arguments_1450",
            "Dynamic imports can only accept a module specifier and an optional assertion as arguments",
        );
    }
    lazy_static! {
        pub static ref Private_identifiers_are_only_allowed_in_class_bodies_and_may_only_be_used_as_part_of_a_class_member_declaration_property_access_or_on_the_left_hand_side_of_an_in_expression: DiagnosticMessage = diag(
            1451,
            DiagnosticCategory::Error,
            "Private_identifiers_are_only_allowed_in_class_bodies_and_may_only_be_used_as_part_of_a_class_member__1451",
            "Private identifiers are only allowed in class bodies and may only be used as part of a class member declaration, property access, or on the left-hand-side of an 'in' expression",
        );
    }
    lazy_static! {
        pub static ref The_import_meta_meta_property_is_not_allowed_in_files_which_will_build_into_CommonJS_output: DiagnosticMessage = diag(
            1470,
            DiagnosticCategory::Error,
            "The_import_meta_meta_property_is_not_allowed_in_files_which_will_build_into_CommonJS_output_1470",
            "The 'import.meta' meta-property is not allowed in files which will build into CommonJS output.",
        );
    }
    lazy_static! {
        pub static ref Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_cannot_be_imported_synchronously_Use_dynamic_import_instead: DiagnosticMessage = diag(
            1471,
            DiagnosticCategory::Error,
            "Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_c_1471",
            "Module '{0}' cannot be imported using this construct. The specifier only resolves to an ES module, which cannot be imported synchronously. Use dynamic import instead.",
        );
    }
    lazy_static! {
        pub static ref The_types_of_0_are_incompatible_between_these_types: DiagnosticMessage = diag(
            2200,
            DiagnosticCategory::Error,
            "The_types_of_0_are_incompatible_between_these_types_2200",
            "The types of '{0}' are incompatible between these types.",
        );
    }
    lazy_static! {
        pub static ref The_types_returned_by_0_are_incompatible_between_these_types: DiagnosticMessage = diag(
            2201,
            DiagnosticCategory::Error,
            "The_types_returned_by_0_are_incompatible_between_these_types_2201",
            "The types returned by '{0}' are incompatible between these types.",
        );
    }
    lazy_static! {
        pub static ref Call_signature_return_types_0_and_1_are_incompatible: DiagnosticMessage = diag(
            2202,
            DiagnosticCategory::Error,
            "Call_signature_return_types_0_and_1_are_incompatible_2202",
            "Call signature return types '{0}' and '{1}' are incompatible.",
        );
    }
    lazy_static! {
        pub static ref Construct_signature_return_types_0_and_1_are_incompatible: DiagnosticMessage = diag(
            2203,
            DiagnosticCategory::Error,
            "Construct_signature_return_types_0_and_1_are_incompatible_2203",
            "Construct signature return types '{0}' and '{1}' are incompatible.",
        );
    }
    lazy_static! {
        pub static ref Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1: DiagnosticMessage = diag(
            2204,
            DiagnosticCategory::Error,
            "Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1_2204",
            "Call signatures with no arguments have incompatible return types '{0}' and '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1: DiagnosticMessage = diag(
            2205,
            DiagnosticCategory::Error,
            "Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1_2205",
            "Construct signatures with no arguments have incompatible return types '{0}' and '{1}'.",
        );
    }
    lazy_static! {
        pub static ref The_type_modifier_cannot_be_used_on_a_named_import_when_import_type_is_used_on_its_import_statement: DiagnosticMessage = diag(
            2206,
            DiagnosticCategory::Error,
            "The_type_modifier_cannot_be_used_on_a_named_import_when_import_type_is_used_on_its_import_statement_2206",
            "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
        );
    }
    lazy_static! {
        pub static ref The_type_modifier_cannot_be_used_on_a_named_export_when_export_type_is_used_on_its_export_statement: DiagnosticMessage = diag(
            2207,
            DiagnosticCategory::Error,
            "The_type_modifier_cannot_be_used_on_a_named_export_when_export_type_is_used_on_its_export_statement_2207",
            "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_identifier_0: DiagnosticMessage = diag(
            2300,
            DiagnosticCategory::Error,
            "Duplicate_identifier_0_2300",
            "Duplicate identifier '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: DiagnosticMessage = diag(
            2301,
            DiagnosticCategory::Error,
            "Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor_2301",
            "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor.",
        );
    }
    lazy_static! {
        pub static ref Static_members_cannot_reference_class_type_parameters: DiagnosticMessage = diag(
            2302,
            DiagnosticCategory::Error,
            "Static_members_cannot_reference_class_type_parameters_2302",
            "Static members cannot reference class type parameters.",
        );
    }
    lazy_static! {
        pub static ref Circular_definition_of_import_alias_0: DiagnosticMessage = diag(
            2303,
            DiagnosticCategory::Error,
            "Circular_definition_of_import_alias_0_2303",
            "Circular definition of import alias '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0: DiagnosticMessage = diag(
            2304,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_2304",
            "Cannot find name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Module_0_has_no_exported_member_1: DiagnosticMessage = diag(
            2305,
            DiagnosticCategory::Error,
            "Module_0_has_no_exported_member_1_2305",
            "Module '{0}' has no exported member '{1}'.",
        );
    }
    lazy_static! {
        pub static ref File_0_is_not_a_module: DiagnosticMessage = diag(
            2306,
            DiagnosticCategory::Error,
            "File_0_is_not_a_module_2306",
            "File '{0}' is not a module.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_module_0_or_its_corresponding_type_declarations: DiagnosticMessage = diag(
            2307,
            DiagnosticCategory::Error,
            "Cannot_find_module_0_or_its_corresponding_type_declarations_2307",
            "Cannot find module '{0}' or its corresponding type declarations.",
        );
    }
    lazy_static! {
        pub static ref Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambiguity: DiagnosticMessage = diag(
            2308,
            DiagnosticCategory::Error,
            "Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambig_2308",
            "Module {0} has already exported a member named '{1}'. Consider explicitly re-exporting to resolve the ambiguity.",
        );
    }
    lazy_static! {
        pub static ref An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements: DiagnosticMessage = diag(
            2309,
            DiagnosticCategory::Error,
            "An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements_2309",
            "An export assignment cannot be used in a module with other exported elements.",
        );
    }
    lazy_static! {
        pub static ref Type_0_recursively_references_itself_as_a_base_type: DiagnosticMessage = diag(
            2310,
            DiagnosticCategory::Error,
            "Type_0_recursively_references_itself_as_a_base_type_2310",
            "Type '{0}' recursively references itself as a base type.",
        );
    }
    lazy_static! {
        pub static ref An_interface_can_only_extend_an_object_type_or_intersection_of_object_types_with_statically_known_members: DiagnosticMessage = diag(
            2312,
            DiagnosticCategory::Error,
            "An_interface_can_only_extend_an_object_type_or_intersection_of_object_types_with_statically_known_me_2312",
            "An interface can only extend an object type or intersection of object types with statically known members.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_has_a_circular_constraint: DiagnosticMessage = diag(
            2313,
            DiagnosticCategory::Error,
            "Type_parameter_0_has_a_circular_constraint_2313",
            "Type parameter '{0}' has a circular constraint.",
        );
    }
    lazy_static! {
        pub static ref Generic_type_0_requires_1_type_argument_s: DiagnosticMessage = diag(
            2314,
            DiagnosticCategory::Error,
            "Generic_type_0_requires_1_type_argument_s_2314",
            "Generic type '{0}' requires {1} type argument(s).",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_generic: DiagnosticMessage = diag(
            2315,
            DiagnosticCategory::Error,
            "Type_0_is_not_generic_2315",
            "Type '{0}' is not generic.",
        );
    }
    lazy_static! {
        pub static ref Global_type_0_must_be_a_class_or_interface_type: DiagnosticMessage = diag(
            2316,
            DiagnosticCategory::Error,
            "Global_type_0_must_be_a_class_or_interface_type_2316",
            "Global type '{0}' must be a class or interface type.",
        );
    }
    lazy_static! {
        pub static ref Global_type_0_must_have_1_type_parameter_s: DiagnosticMessage = diag(
            2317,
            DiagnosticCategory::Error,
            "Global_type_0_must_have_1_type_parameter_s_2317",
            "Global type '{0}' must have {1} type parameter(s).",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_global_type_0: DiagnosticMessage = diag(
            2318,
            DiagnosticCategory::Error,
            "Cannot_find_global_type_0_2318",
            "Cannot find global type '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Named_property_0_of_types_1_and_2_are_not_identical: DiagnosticMessage = diag(
            2319,
            DiagnosticCategory::Error,
            "Named_property_0_of_types_1_and_2_are_not_identical_2319",
            "Named property '{0}' of types '{1}' and '{2}' are not identical.",
        );
    }
    lazy_static! {
        pub static ref Interface_0_cannot_simultaneously_extend_types_1_and_2: DiagnosticMessage = diag(
            2320,
            DiagnosticCategory::Error,
            "Interface_0_cannot_simultaneously_extend_types_1_and_2_2320",
            "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Excessive_stack_depth_comparing_types_0_and_1: DiagnosticMessage = diag(
            2321,
            DiagnosticCategory::Error,
            "Excessive_stack_depth_comparing_types_0_and_1_2321",
            "Excessive stack depth comparing types '{0}' and '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_assignable_to_type_1: DiagnosticMessage = diag(
            2322,
            DiagnosticCategory::Error,
            "Type_0_is_not_assignable_to_type_1_2322",
            "Type '{0}' is not assignable to type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_redeclare_exported_variable_0: DiagnosticMessage = diag(
            2323,
            DiagnosticCategory::Error,
            "Cannot_redeclare_exported_variable_0_2323",
            "Cannot redeclare exported variable '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_missing_in_type_1: DiagnosticMessage = diag(
            2324,
            DiagnosticCategory::Error,
            "Property_0_is_missing_in_type_1_2324",
            "Property '{0}' is missing in type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_private_in_type_1_but_not_in_type_2: DiagnosticMessage = diag(
            2325,
            DiagnosticCategory::Error,
            "Property_0_is_private_in_type_1_but_not_in_type_2_2325",
            "Property '{0}' is private in type '{1}' but not in type '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Types_of_property_0_are_incompatible: DiagnosticMessage = diag(
            2326,
            DiagnosticCategory::Error,
            "Types_of_property_0_are_incompatible_2326",
            "Types of property '{0}' are incompatible.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_optional_in_type_1_but_required_in_type_2: DiagnosticMessage = diag(
            2327,
            DiagnosticCategory::Error,
            "Property_0_is_optional_in_type_1_but_required_in_type_2_2327",
            "Property '{0}' is optional in type '{1}' but required in type '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Types_of_parameters_0_and_1_are_incompatible: DiagnosticMessage = diag(
            2328,
            DiagnosticCategory::Error,
            "Types_of_parameters_0_and_1_are_incompatible_2328",
            "Types of parameters '{0}' and '{1}' are incompatible.",
        );
    }
    lazy_static! {
        pub static ref Index_signature_for_type_0_is_missing_in_type_1: DiagnosticMessage = diag(
            2329,
            DiagnosticCategory::Error,
            "Index_signature_for_type_0_is_missing_in_type_1_2329",
            "Index signature for type '{0}' is missing in type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref _0_and_1_index_signatures_are_incompatible: DiagnosticMessage = diag(
            2330,
            DiagnosticCategory::Error,
            "_0_and_1_index_signatures_are_incompatible_2330",
            "'{0}' and '{1}' index signatures are incompatible.",
        );
    }
    lazy_static! {
        pub static ref this_cannot_be_referenced_in_a_module_or_namespace_body: DiagnosticMessage = diag(
            2331,
            DiagnosticCategory::Error,
            "this_cannot_be_referenced_in_a_module_or_namespace_body_2331",
            "'this' cannot be referenced in a module or namespace body.",
        );
    }
    lazy_static! {
        pub static ref this_cannot_be_referenced_in_current_location: DiagnosticMessage = diag(
            2332,
            DiagnosticCategory::Error,
            "this_cannot_be_referenced_in_current_location_2332",
            "'this' cannot be referenced in current location.",
        );
    }
    lazy_static! {
        pub static ref this_cannot_be_referenced_in_constructor_arguments: DiagnosticMessage = diag(
            2333,
            DiagnosticCategory::Error,
            "this_cannot_be_referenced_in_constructor_arguments_2333",
            "'this' cannot be referenced in constructor arguments.",
        );
    }
    lazy_static! {
        pub static ref this_cannot_be_referenced_in_a_static_property_initializer: DiagnosticMessage = diag(
            2334,
            DiagnosticCategory::Error,
            "this_cannot_be_referenced_in_a_static_property_initializer_2334",
            "'this' cannot be referenced in a static property initializer.",
        );
    }
    lazy_static! {
        pub static ref super_can_only_be_referenced_in_a_derived_class: DiagnosticMessage = diag(
            2335,
            DiagnosticCategory::Error,
            "super_can_only_be_referenced_in_a_derived_class_2335",
            "'super' can only be referenced in a derived class.",
        );
    }
    lazy_static! {
        pub static ref super_cannot_be_referenced_in_constructor_arguments: DiagnosticMessage = diag(
            2336,
            DiagnosticCategory::Error,
            "super_cannot_be_referenced_in_constructor_arguments_2336",
            "'super' cannot be referenced in constructor arguments.",
        );
    }
    lazy_static! {
        pub static ref Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors: DiagnosticMessage = diag(
            2337,
            DiagnosticCategory::Error,
            "Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors_2337",
            "Super calls are not permitted outside constructors or in nested functions inside constructors.",
        );
    }
    lazy_static! {
        pub static ref super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class: DiagnosticMessage = diag(
            2338,
            DiagnosticCategory::Error,
            "super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_der_2338",
            "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class.",
        );
    }
    lazy_static! {
        pub static ref Property_0_does_not_exist_on_type_1: DiagnosticMessage = diag(
            2339,
            DiagnosticCategory::Error,
            "Property_0_does_not_exist_on_type_1_2339",
            "Property '{0}' does not exist on type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword: DiagnosticMessage = diag(
            2340,
            DiagnosticCategory::Error,
            "Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword_2340",
            "Only public and protected methods of the base class are accessible via the 'super' keyword.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_private_and_only_accessible_within_class_1: DiagnosticMessage = diag(
            2341,
            DiagnosticCategory::Error,
            "Property_0_is_private_and_only_accessible_within_class_1_2341",
            "Property '{0}' is private and only accessible within class '{1}'.",
        );
    }
    lazy_static! {
        pub static ref This_syntax_requires_an_imported_helper_named_1_which_does_not_exist_in_0_Consider_upgrading_your_version_of_0: DiagnosticMessage = diag(
            2343,
            DiagnosticCategory::Error,
            "This_syntax_requires_an_imported_helper_named_1_which_does_not_exist_in_0_Consider_upgrading_your_ve_2343",
            "This syntax requires an imported helper named '{1}' which does not exist in '{0}'. Consider upgrading your version of '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Type_0_does_not_satisfy_the_constraint_1: DiagnosticMessage = diag(
            2344,
            DiagnosticCategory::Error,
            "Type_0_does_not_satisfy_the_constraint_1_2344",
            "Type '{0}' does not satisfy the constraint '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Argument_of_type_0_is_not_assignable_to_parameter_of_type_1: DiagnosticMessage = diag(
            2345,
            DiagnosticCategory::Error,
            "Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_2345",
            "Argument of type '{0}' is not assignable to parameter of type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Call_target_does_not_contain_any_signatures: DiagnosticMessage = diag(
            2346,
            DiagnosticCategory::Error,
            "Call_target_does_not_contain_any_signatures_2346",
            "Call target does not contain any signatures.",
        );
    }
    lazy_static! {
        pub static ref Untyped_function_calls_may_not_accept_type_arguments: DiagnosticMessage = diag(
            2347,
            DiagnosticCategory::Error,
            "Untyped_function_calls_may_not_accept_type_arguments_2347",
            "Untyped function calls may not accept type arguments.",
        );
    }
    lazy_static! {
        pub static ref Value_of_type_0_is_not_callable_Did_you_mean_to_include_new: DiagnosticMessage = diag(
            2348,
            DiagnosticCategory::Error,
            "Value_of_type_0_is_not_callable_Did_you_mean_to_include_new_2348",
            "Value of type '{0}' is not callable. Did you mean to include 'new'?",
        );
    }
    lazy_static! {
        pub static ref This_expression_is_not_callable: DiagnosticMessage = diag(
            2349,
            DiagnosticCategory::Error,
            "This_expression_is_not_callable_2349",
            "This expression is not callable.",
        );
    }
    lazy_static! {
        pub static ref Only_a_void_function_can_be_called_with_the_new_keyword: DiagnosticMessage = diag(
            2350,
            DiagnosticCategory::Error,
            "Only_a_void_function_can_be_called_with_the_new_keyword_2350",
            "Only a void function can be called with the 'new' keyword.",
        );
    }
    lazy_static! {
        pub static ref This_expression_is_not_constructable: DiagnosticMessage = diag(
            2351,
            DiagnosticCategory::Error,
            "This_expression_is_not_constructable_2351",
            "This expression is not constructable.",
        );
    }
    lazy_static! {
        pub static ref Conversion_of_type_0_to_type_1_may_be_a_mistake_because_neither_type_sufficiently_overlaps_with_the_other_If_this_was_intentional_convert_the_expression_to_unknown_first: DiagnosticMessage = diag(
            2352,
            DiagnosticCategory::Error,
            "Conversion_of_type_0_to_type_1_may_be_a_mistake_because_neither_type_sufficiently_overlaps_with_the__2352",
            "Conversion of type '{0}' to type '{1}' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.",
        );
    }
    lazy_static! {
        pub static ref Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1: DiagnosticMessage = diag(
            2353,
            DiagnosticCategory::Error,
            "Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1_2353",
            "Object literal may only specify known properties, and '{0}' does not exist in type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref This_syntax_requires_an_imported_helper_but_module_0_cannot_be_found: DiagnosticMessage = diag(
            2354,
            DiagnosticCategory::Error,
            "This_syntax_requires_an_imported_helper_but_module_0_cannot_be_found_2354",
            "This syntax requires an imported helper but module '{0}' cannot be found.",
        );
    }
    lazy_static! {
        pub static ref A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value: DiagnosticMessage = diag(
            2355,
            DiagnosticCategory::Error,
            "A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_2355",
            "A function whose declared type is neither 'void' nor 'any' must return a value.",
        );
    }
    lazy_static! {
        pub static ref An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type: DiagnosticMessage = diag(
            2356,
            DiagnosticCategory::Error,
            "An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type_2356",
            "An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type.",
        );
    }
    lazy_static! {
        pub static ref The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access: DiagnosticMessage = diag(
            2357,
            DiagnosticCategory::Error,
            "The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access_2357",
            "The operand of an increment or decrement operator must be a variable or a property access.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: DiagnosticMessage = diag(
            2358,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_paramete_2358",
            "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.",
        );
    }
    lazy_static! {
        pub static ref The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type: DiagnosticMessage = diag(
            2359,
            DiagnosticCategory::Error,
            "The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_F_2359",
            "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_an_in_expression_must_be_a_private_identifier_or_of_type_any_string_number_or_symbol: DiagnosticMessage = diag(
            2360,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_an_in_expression_must_be_a_private_identifier_or_of_type_any_string_number_or__2360",
            "The left-hand side of an 'in' expression must be a private identifier or of type 'any', 'string', 'number', or 'symbol'.",
        );
    }
    lazy_static! {
        pub static ref The_right_hand_side_of_an_in_expression_must_not_be_a_primitive: DiagnosticMessage = diag(
            2361,
            DiagnosticCategory::Error,
            "The_right_hand_side_of_an_in_expression_must_not_be_a_primitive_2361",
            "The right-hand side of an 'in' expression must not be a primitive.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type: DiagnosticMessage = diag(
            2362,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type_2362",
            "The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.",
        );
    }
    lazy_static! {
        pub static ref The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type: DiagnosticMessage = diag(
            2363,
            DiagnosticCategory::Error,
            "The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type_2363",
            "The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access: DiagnosticMessage = diag(
            2364,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access_2364",
            "The left-hand side of an assignment expression must be a variable or a property access.",
        );
    }
    lazy_static! {
        pub static ref Operator_0_cannot_be_applied_to_types_1_and_2: DiagnosticMessage = diag(
            2365,
            DiagnosticCategory::Error,
            "Operator_0_cannot_be_applied_to_types_1_and_2_2365",
            "Operator '{0}' cannot be applied to types '{1}' and '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Function_lacks_ending_return_statement_and_return_type_does_not_include_undefined: DiagnosticMessage = diag(
            2366,
            DiagnosticCategory::Error,
            "Function_lacks_ending_return_statement_and_return_type_does_not_include_undefined_2366",
            "Function lacks ending return statement and return type does not include 'undefined'.",
        );
    }
    lazy_static! {
        pub static ref This_condition_will_always_return_0_since_the_types_1_and_2_have_no_overlap: DiagnosticMessage = diag(
            2367,
            DiagnosticCategory::Error,
            "This_condition_will_always_return_0_since_the_types_1_and_2_have_no_overlap_2367",
            "This condition will always return '{0}' since the types '{1}' and '{2}' have no overlap.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_name_cannot_be_0: DiagnosticMessage = diag(
            2368,
            DiagnosticCategory::Error,
            "Type_parameter_name_cannot_be_0_2368",
            "Type parameter name cannot be '{0}'.",
        );
    }
    lazy_static! {
        pub static ref A_parameter_property_is_only_allowed_in_a_constructor_implementation: DiagnosticMessage = diag(
            2369,
            DiagnosticCategory::Error,
            "A_parameter_property_is_only_allowed_in_a_constructor_implementation_2369",
            "A parameter property is only allowed in a constructor implementation.",
        );
    }
    lazy_static! {
        pub static ref A_rest_parameter_must_be_of_an_array_type: DiagnosticMessage = diag(
            2370,
            DiagnosticCategory::Error,
            "A_rest_parameter_must_be_of_an_array_type_2370",
            "A rest parameter must be of an array type.",
        );
    }
    lazy_static! {
        pub static ref A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation: DiagnosticMessage = diag(
            2371,
            DiagnosticCategory::Error,
            "A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation_2371",
            "A parameter initializer is only allowed in a function or constructor implementation.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_cannot_reference_itself: DiagnosticMessage = diag(
            2372,
            DiagnosticCategory::Error,
            "Parameter_0_cannot_reference_itself_2372",
            "Parameter '{0}' cannot reference itself.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_cannot_reference_identifier_1_declared_after_it: DiagnosticMessage = diag(
            2373,
            DiagnosticCategory::Error,
            "Parameter_0_cannot_reference_identifier_1_declared_after_it_2373",
            "Parameter '{0}' cannot reference identifier '{1}' declared after it.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_index_signature_for_type_0: DiagnosticMessage = diag(
            2374,
            DiagnosticCategory::Error,
            "Duplicate_index_signature_for_type_0_2374",
            "Duplicate index signature for type '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties: DiagnosticMessage = diag(
            2375,
            DiagnosticCategory::Error,
            "Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefi_2375",
            "Type '{0}' is not assignable to type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.",
        );
    }
    lazy_static! {
        pub static ref A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_parameter_properties_or_private_identifiers: DiagnosticMessage = diag(
            2376,
            DiagnosticCategory::Error,
            "A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_proper_2376",
            "A 'super' call must be the first statement in the constructor when a class contains initialized properties, parameter properties, or private identifiers.",
        );
    }
    lazy_static! {
        pub static ref Constructors_for_derived_classes_must_contain_a_super_call: DiagnosticMessage = diag(
            2377,
            DiagnosticCategory::Error,
            "Constructors_for_derived_classes_must_contain_a_super_call_2377",
            "Constructors for derived classes must contain a 'super' call.",
        );
    }
    lazy_static! {
        pub static ref A_get_accessor_must_return_a_value: DiagnosticMessage = diag(
            2378,
            DiagnosticCategory::Error,
            "A_get_accessor_must_return_a_value_2378",
            "A 'get' accessor must return a value.",
        );
    }
    lazy_static! {
        pub static ref Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties: DiagnosticMessage = diag(
            2379,
            DiagnosticCategory::Error,
            "Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_with_exactOptionalPropertyTypes_Colon_tr_2379",
            "Argument of type '{0}' is not assignable to parameter of type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.",
        );
    }
    lazy_static! {
        pub static ref The_return_type_of_a_get_accessor_must_be_assignable_to_its_set_accessor_type: DiagnosticMessage = diag(
            2380,
            DiagnosticCategory::Error,
            "The_return_type_of_a_get_accessor_must_be_assignable_to_its_set_accessor_type_2380",
            "The return type of a 'get' accessor must be assignable to its 'set' accessor type",
        );
    }
    lazy_static! {
        pub static ref Overload_signatures_must_all_be_exported_or_non_exported: DiagnosticMessage = diag(
            2383,
            DiagnosticCategory::Error,
            "Overload_signatures_must_all_be_exported_or_non_exported_2383",
            "Overload signatures must all be exported or non-exported.",
        );
    }
    lazy_static! {
        pub static ref Overload_signatures_must_all_be_ambient_or_non_ambient: DiagnosticMessage = diag(
            2384,
            DiagnosticCategory::Error,
            "Overload_signatures_must_all_be_ambient_or_non_ambient_2384",
            "Overload signatures must all be ambient or non-ambient.",
        );
    }
    lazy_static! {
        pub static ref Overload_signatures_must_all_be_public_private_or_protected: DiagnosticMessage = diag(
            2385,
            DiagnosticCategory::Error,
            "Overload_signatures_must_all_be_public_private_or_protected_2385",
            "Overload signatures must all be public, private or protected.",
        );
    }
    lazy_static! {
        pub static ref Overload_signatures_must_all_be_optional_or_required: DiagnosticMessage = diag(
            2386,
            DiagnosticCategory::Error,
            "Overload_signatures_must_all_be_optional_or_required_2386",
            "Overload signatures must all be optional or required.",
        );
    }
    lazy_static! {
        pub static ref Function_overload_must_be_static: DiagnosticMessage = diag(
            2387,
            DiagnosticCategory::Error,
            "Function_overload_must_be_static_2387",
            "Function overload must be static.",
        );
    }
    lazy_static! {
        pub static ref Function_overload_must_not_be_static: DiagnosticMessage = diag(
            2388,
            DiagnosticCategory::Error,
            "Function_overload_must_not_be_static_2388",
            "Function overload must not be static.",
        );
    }
    lazy_static! {
        pub static ref Function_implementation_name_must_be_0: DiagnosticMessage = diag(
            2389,
            DiagnosticCategory::Error,
            "Function_implementation_name_must_be_0_2389",
            "Function implementation name must be '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Constructor_implementation_is_missing: DiagnosticMessage = diag(
            2390,
            DiagnosticCategory::Error,
            "Constructor_implementation_is_missing_2390",
            "Constructor implementation is missing.",
        );
    }
    lazy_static! {
        pub static ref Function_implementation_is_missing_or_not_immediately_following_the_declaration: DiagnosticMessage = diag(
            2391,
            DiagnosticCategory::Error,
            "Function_implementation_is_missing_or_not_immediately_following_the_declaration_2391",
            "Function implementation is missing or not immediately following the declaration.",
        );
    }
    lazy_static! {
        pub static ref Multiple_constructor_implementations_are_not_allowed: DiagnosticMessage = diag(
            2392,
            DiagnosticCategory::Error,
            "Multiple_constructor_implementations_are_not_allowed_2392",
            "Multiple constructor implementations are not allowed.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_function_implementation: DiagnosticMessage = diag(
            2393,
            DiagnosticCategory::Error,
            "Duplicate_function_implementation_2393",
            "Duplicate function implementation.",
        );
    }
    lazy_static! {
        pub static ref This_overload_signature_is_not_compatible_with_its_implementation_signature: DiagnosticMessage = diag(
            2394,
            DiagnosticCategory::Error,
            "This_overload_signature_is_not_compatible_with_its_implementation_signature_2394",
            "This overload signature is not compatible with its implementation signature.",
        );
    }
    lazy_static! {
        pub static ref Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local: DiagnosticMessage = diag(
            2395,
            DiagnosticCategory::Error,
            "Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local_2395",
            "Individual declarations in merged declaration '{0}' must be all exported or all local.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters: DiagnosticMessage = diag(
            2396,
            DiagnosticCategory::Error,
            "Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters_2396",
            "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters.",
        );
    }
    lazy_static! {
        pub static ref Declaration_name_conflicts_with_built_in_global_identifier_0: DiagnosticMessage = diag(
            2397,
            DiagnosticCategory::Error,
            "Declaration_name_conflicts_with_built_in_global_identifier_0_2397",
            "Declaration name conflicts with built-in global identifier '{0}'.",
        );
    }
    lazy_static! {
        pub static ref constructor_cannot_be_used_as_a_parameter_property_name: DiagnosticMessage = diag(
            2398,
            DiagnosticCategory::Error,
            "constructor_cannot_be_used_as_a_parameter_property_name_2398",
            "'constructor' cannot be used as a parameter property name.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference: DiagnosticMessage = diag(
            2399,
            DiagnosticCategory::Error,
            "Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference_2399",
            "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference.",
        );
    }
    lazy_static! {
        pub static ref Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference: DiagnosticMessage = diag(
            2400,
            DiagnosticCategory::Error,
            "Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference_2400",
            "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference.",
        );
    }
    lazy_static! {
        pub static ref Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference: DiagnosticMessage = diag(
            2402,
            DiagnosticCategory::Error,
            "Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference_2402",
            "Expression resolves to '_super' that compiler uses to capture base class reference.",
        );
    }
    lazy_static! {
        pub static ref Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2: DiagnosticMessage = diag(
            2403,
            DiagnosticCategory::Error,
            "Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_t_2403",
            "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation: DiagnosticMessage = diag(
            2404,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation_2404",
            "The left-hand side of a 'for...in' statement cannot use a type annotation.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any: DiagnosticMessage = diag(
            2405,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any_2405",
            "The left-hand side of a 'for...in' statement must be of type 'string' or 'any'.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_a_for_in_statement_must_be_a_variable_or_a_property_access: DiagnosticMessage = diag(
            2406,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_a_for_in_statement_must_be_a_variable_or_a_property_access_2406",
            "The left-hand side of a 'for...in' statement must be a variable or a property access.",
        );
    }
    lazy_static! {
        pub static ref The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_but_here_has_type_0: DiagnosticMessage = diag(
            2407,
            DiagnosticCategory::Error,
            "The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_but_2407",
            "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter, but here has type '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Setters_cannot_return_a_value: DiagnosticMessage = diag(
            2408,
            DiagnosticCategory::Error,
            "Setters_cannot_return_a_value_2408",
            "Setters cannot return a value.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class: DiagnosticMessage = diag(
            2409,
            DiagnosticCategory::Error,
            "Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class_2409",
            "Return type of constructor signature must be assignable to the instance type of the class.",
        );
    }
    lazy_static! {
        pub static ref The_with_statement_is_not_supported_All_symbols_in_a_with_block_will_have_type_any: DiagnosticMessage = diag(
            2410,
            DiagnosticCategory::Error,
            "The_with_statement_is_not_supported_All_symbols_in_a_with_block_will_have_type_any_2410",
            "The 'with' statement is not supported. All symbols in a 'with' block will have type 'any'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_of_type_1_is_not_assignable_to_2_index_type_3: DiagnosticMessage = diag(
            2411,
            DiagnosticCategory::Error,
            "Property_0_of_type_1_is_not_assignable_to_2_index_type_3_2411",
            "Property '{0}' of type '{1}' is not assignable to '{2}' index type '{3}'.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target: DiagnosticMessage = diag(
            2412,
            DiagnosticCategory::Error,
            "Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefi_2412",
            "Type '{0}' is not assignable to type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.",
        );
    }
    lazy_static! {
        pub static ref _0_index_type_1_is_not_assignable_to_2_index_type_3: DiagnosticMessage = diag(
            2413,
            DiagnosticCategory::Error,
            "_0_index_type_1_is_not_assignable_to_2_index_type_3_2413",
            "'{0}' index type '{1}' is not assignable to '{2}' index type '{3}'.",
        );
    }
    lazy_static! {
        pub static ref Class_name_cannot_be_0: DiagnosticMessage = diag(
            2414,
            DiagnosticCategory::Error,
            "Class_name_cannot_be_0_2414",
            "Class name cannot be '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Class_0_incorrectly_extends_base_class_1: DiagnosticMessage = diag(
            2415,
            DiagnosticCategory::Error,
            "Class_0_incorrectly_extends_base_class_1_2415",
            "Class '{0}' incorrectly extends base class '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2: DiagnosticMessage = diag(
            2416,
            DiagnosticCategory::Error,
            "Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2_2416",
            "Property '{0}' in type '{1}' is not assignable to the same property in base type '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Class_static_side_0_incorrectly_extends_base_class_static_side_1: DiagnosticMessage = diag(
            2417,
            DiagnosticCategory::Error,
            "Class_static_side_0_incorrectly_extends_base_class_static_side_1_2417",
            "Class static side '{0}' incorrectly extends base class static side '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_of_computed_property_s_value_is_0_which_is_not_assignable_to_type_1: DiagnosticMessage = diag(
            2418,
            DiagnosticCategory::Error,
            "Type_of_computed_property_s_value_is_0_which_is_not_assignable_to_type_1_2418",
            "Type of computed property's value is '{0}', which is not assignable to type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Types_of_construct_signatures_are_incompatible: DiagnosticMessage = diag(
            2419,
            DiagnosticCategory::Error,
            "Types_of_construct_signatures_are_incompatible_2419",
            "Types of construct signatures are incompatible.",
        );
    }
    lazy_static! {
        pub static ref Class_0_incorrectly_implements_interface_1: DiagnosticMessage = diag(
            2420,
            DiagnosticCategory::Error,
            "Class_0_incorrectly_implements_interface_1_2420",
            "Class '{0}' incorrectly implements interface '{1}'.",
        );
    }
    lazy_static! {
        pub static ref A_class_can_only_implement_an_object_type_or_intersection_of_object_types_with_statically_known_members: DiagnosticMessage = diag(
            2422,
            DiagnosticCategory::Error,
            "A_class_can_only_implement_an_object_type_or_intersection_of_object_types_with_statically_known_memb_2422",
            "A class can only implement an object type or intersection of object types with statically known members.",
        );
    }
    lazy_static! {
        pub static ref Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor: DiagnosticMessage = diag(
            2423,
            DiagnosticCategory::Error,
            "Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_access_2423",
            "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.",
        );
    }
    lazy_static! {
        pub static ref Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function: DiagnosticMessage = diag(
            2425,
            DiagnosticCategory::Error,
            "Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_functi_2425",
            "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.",
        );
    }
    lazy_static! {
        pub static ref Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function: DiagnosticMessage = diag(
            2426,
            DiagnosticCategory::Error,
            "Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_functi_2426",
            "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.",
        );
    }
    lazy_static! {
        pub static ref Interface_name_cannot_be_0: DiagnosticMessage = diag(
            2427,
            DiagnosticCategory::Error,
            "Interface_name_cannot_be_0_2427",
            "Interface name cannot be '{0}'.",
        );
    }
    lazy_static! {
        pub static ref All_declarations_of_0_must_have_identical_type_parameters: DiagnosticMessage = diag(
            2428,
            DiagnosticCategory::Error,
            "All_declarations_of_0_must_have_identical_type_parameters_2428",
            "All declarations of '{0}' must have identical type parameters.",
        );
    }
    lazy_static! {
        pub static ref Interface_0_incorrectly_extends_interface_1: DiagnosticMessage = diag(
            2430,
            DiagnosticCategory::Error,
            "Interface_0_incorrectly_extends_interface_1_2430",
            "Interface '{0}' incorrectly extends interface '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Enum_name_cannot_be_0: DiagnosticMessage = diag(
            2431,
            DiagnosticCategory::Error,
            "Enum_name_cannot_be_0_2431",
            "Enum name cannot be '{0}'.",
        );
    }
    lazy_static! {
        pub static ref In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element: DiagnosticMessage = diag(
            2432,
            DiagnosticCategory::Error,
            "In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enu_2432",
            "In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element.",
        );
    }
    lazy_static! {
        pub static ref A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged: DiagnosticMessage = diag(
            2433,
            DiagnosticCategory::Error,
            "A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merg_2433",
            "A namespace declaration cannot be in a different file from a class or function with which it is merged.",
        );
    }
    lazy_static! {
        pub static ref A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged: DiagnosticMessage = diag(
            2434,
            DiagnosticCategory::Error,
            "A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged_2434",
            "A namespace declaration cannot be located prior to a class or function with which it is merged.",
        );
    }
    lazy_static! {
        pub static ref Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces: DiagnosticMessage = diag(
            2435,
            DiagnosticCategory::Error,
            "Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces_2435",
            "Ambient modules cannot be nested in other modules or namespaces.",
        );
    }
    lazy_static! {
        pub static ref Ambient_module_declaration_cannot_specify_relative_module_name: DiagnosticMessage = diag(
            2436,
            DiagnosticCategory::Error,
            "Ambient_module_declaration_cannot_specify_relative_module_name_2436",
            "Ambient module declaration cannot specify relative module name.",
        );
    }
    lazy_static! {
        pub static ref Module_0_is_hidden_by_a_local_declaration_with_the_same_name: DiagnosticMessage = diag(
            2437,
            DiagnosticCategory::Error,
            "Module_0_is_hidden_by_a_local_declaration_with_the_same_name_2437",
            "Module '{0}' is hidden by a local declaration with the same name.",
        );
    }
    lazy_static! {
        pub static ref Import_name_cannot_be_0: DiagnosticMessage = diag(
            2438,
            DiagnosticCategory::Error,
            "Import_name_cannot_be_0_2438",
            "Import name cannot be '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name: DiagnosticMessage = diag(
            2439,
            DiagnosticCategory::Error,
            "Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relati_2439",
            "Import or export declaration in an ambient module declaration cannot reference module through relative module name.",
        );
    }
    lazy_static! {
        pub static ref Import_declaration_conflicts_with_local_declaration_of_0: DiagnosticMessage = diag(
            2440,
            DiagnosticCategory::Error,
            "Import_declaration_conflicts_with_local_declaration_of_0_2440",
            "Import declaration conflicts with local declaration of '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module: DiagnosticMessage = diag(
            2441,
            DiagnosticCategory::Error,
            "Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_2441",
            "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module.",
        );
    }
    lazy_static! {
        pub static ref Types_have_separate_declarations_of_a_private_property_0: DiagnosticMessage = diag(
            2442,
            DiagnosticCategory::Error,
            "Types_have_separate_declarations_of_a_private_property_0_2442",
            "Types have separate declarations of a private property '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2: DiagnosticMessage = diag(
            2443,
            DiagnosticCategory::Error,
            "Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2_2443",
            "Property '{0}' is protected but type '{1}' is not a class derived from '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_protected_in_type_1_but_public_in_type_2: DiagnosticMessage = diag(
            2444,
            DiagnosticCategory::Error,
            "Property_0_is_protected_in_type_1_but_public_in_type_2_2444",
            "Property '{0}' is protected in type '{1}' but public in type '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses: DiagnosticMessage = diag(
            2445,
            DiagnosticCategory::Error,
            "Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses_2445",
            "Property '{0}' is protected and only accessible within class '{1}' and its subclasses.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_This_is_an_instance_of_class_2: DiagnosticMessage = diag(
            2446,
            DiagnosticCategory::Error,
            "Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_This_is_an_instance_of_cl_2446",
            "Property '{0}' is protected and only accessible through an instance of class '{1}'. This is an instance of class '{2}'.",
        );
    }
    lazy_static! {
        pub static ref The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead: DiagnosticMessage = diag(
            2447,
            DiagnosticCategory::Error,
            "The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead_2447",
            "The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead.",
        );
    }
    lazy_static! {
        pub static ref Block_scoped_variable_0_used_before_its_declaration: DiagnosticMessage = diag(
            2448,
            DiagnosticCategory::Error,
            "Block_scoped_variable_0_used_before_its_declaration_2448",
            "Block-scoped variable '{0}' used before its declaration.",
        );
    }
    lazy_static! {
        pub static ref Class_0_used_before_its_declaration: DiagnosticMessage = diag(
            2449,
            DiagnosticCategory::Error,
            "Class_0_used_before_its_declaration_2449",
            "Class '{0}' used before its declaration.",
        );
    }
    lazy_static! {
        pub static ref Enum_0_used_before_its_declaration: DiagnosticMessage = diag(
            2450,
            DiagnosticCategory::Error,
            "Enum_0_used_before_its_declaration_2450",
            "Enum '{0}' used before its declaration.",
        );
    }
    lazy_static! {
        pub static ref Cannot_redeclare_block_scoped_variable_0: DiagnosticMessage = diag(
            2451,
            DiagnosticCategory::Error,
            "Cannot_redeclare_block_scoped_variable_0_2451",
            "Cannot redeclare block-scoped variable '{0}'.",
        );
    }
    lazy_static! {
        pub static ref An_enum_member_cannot_have_a_numeric_name: DiagnosticMessage = diag(
            2452,
            DiagnosticCategory::Error,
            "An_enum_member_cannot_have_a_numeric_name_2452",
            "An enum member cannot have a numeric name.",
        );
    }
    lazy_static! {
        pub static ref Variable_0_is_used_before_being_assigned: DiagnosticMessage = diag(
            2454,
            DiagnosticCategory::Error,
            "Variable_0_is_used_before_being_assigned_2454",
            "Variable '{0}' is used before being assigned.",
        );
    }
    lazy_static! {
        pub static ref Type_alias_0_circularly_references_itself: DiagnosticMessage = diag(
            2456,
            DiagnosticCategory::Error,
            "Type_alias_0_circularly_references_itself_2456",
            "Type alias '{0}' circularly references itself.",
        );
    }
    lazy_static! {
        pub static ref Type_alias_name_cannot_be_0: DiagnosticMessage = diag(
            2457,
            DiagnosticCategory::Error,
            "Type_alias_name_cannot_be_0_2457",
            "Type alias name cannot be '{0}'.",
        );
    }
    lazy_static! {
        pub static ref An_AMD_module_cannot_have_multiple_name_assignments: DiagnosticMessage = diag(
            2458,
            DiagnosticCategory::Error,
            "An_AMD_module_cannot_have_multiple_name_assignments_2458",
            "An AMD module cannot have multiple name assignments.",
        );
    }
    lazy_static! {
        pub static ref Module_0_declares_1_locally_but_it_is_not_exported: DiagnosticMessage = diag(
            2459,
            DiagnosticCategory::Error,
            "Module_0_declares_1_locally_but_it_is_not_exported_2459",
            "Module '{0}' declares '{1}' locally, but it is not exported.",
        );
    }
    lazy_static! {
        pub static ref Module_0_declares_1_locally_but_it_is_exported_as_2: DiagnosticMessage = diag(
            2460,
            DiagnosticCategory::Error,
            "Module_0_declares_1_locally_but_it_is_exported_as_2_2460",
            "Module '{0}' declares '{1}' locally, but it is exported as '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_an_array_type: DiagnosticMessage = diag(
            2461,
            DiagnosticCategory::Error,
            "Type_0_is_not_an_array_type_2461",
            "Type '{0}' is not an array type.",
        );
    }
    lazy_static! {
        pub static ref A_rest_element_must_be_last_in_a_destructuring_pattern: DiagnosticMessage = diag(
            2462,
            DiagnosticCategory::Error,
            "A_rest_element_must_be_last_in_a_destructuring_pattern_2462",
            "A rest element must be last in a destructuring pattern.",
        );
    }
    lazy_static! {
        pub static ref A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature: DiagnosticMessage = diag(
            2463,
            DiagnosticCategory::Error,
            "A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature_2463",
            "A binding pattern parameter cannot be optional in an implementation signature.",
        );
    }
    lazy_static! {
        pub static ref A_computed_property_name_must_be_of_type_string_number_symbol_or_any: DiagnosticMessage = diag(
            2464,
            DiagnosticCategory::Error,
            "A_computed_property_name_must_be_of_type_string_number_symbol_or_any_2464",
            "A computed property name must be of type 'string', 'number', 'symbol', or 'any'.",
        );
    }
    lazy_static! {
        pub static ref this_cannot_be_referenced_in_a_computed_property_name: DiagnosticMessage = diag(
            2465,
            DiagnosticCategory::Error,
            "this_cannot_be_referenced_in_a_computed_property_name_2465",
            "'this' cannot be referenced in a computed property name.",
        );
    }
    lazy_static! {
        pub static ref super_cannot_be_referenced_in_a_computed_property_name: DiagnosticMessage = diag(
            2466,
            DiagnosticCategory::Error,
            "super_cannot_be_referenced_in_a_computed_property_name_2466",
            "'super' cannot be referenced in a computed property name.",
        );
    }
    lazy_static! {
        pub static ref A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type: DiagnosticMessage = diag(
            2467,
            DiagnosticCategory::Error,
            "A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type_2467",
            "A computed property name cannot reference a type parameter from its containing type.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_global_value_0: DiagnosticMessage = diag(
            2468,
            DiagnosticCategory::Error,
            "Cannot_find_global_value_0_2468",
            "Cannot find global value '{0}'.",
        );
    }
    lazy_static! {
        pub static ref The_0_operator_cannot_be_applied_to_type_symbol: DiagnosticMessage = diag(
            2469,
            DiagnosticCategory::Error,
            "The_0_operator_cannot_be_applied_to_type_symbol_2469",
            "The '{0}' operator cannot be applied to type 'symbol'.",
        );
    }
    lazy_static! {
        pub static ref Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher: DiagnosticMessage = diag(
            2472,
            DiagnosticCategory::Error,
            "Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher_2472",
            "Spread operator in 'new' expressions is only available when targeting ECMAScript 5 and higher.",
        );
    }
    lazy_static! {
        pub static ref Enum_declarations_must_all_be_const_or_non_const: DiagnosticMessage = diag(
            2473,
            DiagnosticCategory::Error,
            "Enum_declarations_must_all_be_const_or_non_const_2473",
            "Enum declarations must all be const or non-const.",
        );
    }
    lazy_static! {
        pub static ref const_enum_member_initializers_can_only_contain_literal_values_and_other_computed_enum_values: DiagnosticMessage = diag(
            2474,
            DiagnosticCategory::Error,
            "const_enum_member_initializers_can_only_contain_literal_values_and_other_computed_enum_values_2474",
            "const enum member initializers can only contain literal values and other computed enum values.",
        );
    }
    lazy_static! {
        pub static ref const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment_or_type_query: DiagnosticMessage = diag(
            2475,
            DiagnosticCategory::Error,
            "const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_im_2475",
            "'const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment or type query.",
        );
    }
    lazy_static! {
        pub static ref A_const_enum_member_can_only_be_accessed_using_a_string_literal: DiagnosticMessage = diag(
            2476,
            DiagnosticCategory::Error,
            "A_const_enum_member_can_only_be_accessed_using_a_string_literal_2476",
            "A const enum member can only be accessed using a string literal.",
        );
    }
    lazy_static! {
        pub static ref const_enum_member_initializer_was_evaluated_to_a_non_finite_value: DiagnosticMessage = diag(
            2477,
            DiagnosticCategory::Error,
            "const_enum_member_initializer_was_evaluated_to_a_non_finite_value_2477",
            "'const' enum member initializer was evaluated to a non-finite value.",
        );
    }
    lazy_static! {
        pub static ref const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN: DiagnosticMessage = diag(
            2478,
            DiagnosticCategory::Error,
            "const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN_2478",
            "'const' enum member initializer was evaluated to disallowed value 'NaN'.",
        );
    }
    lazy_static! {
        pub static ref let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations: DiagnosticMessage = diag(
            2480,
            DiagnosticCategory::Error,
            "let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations_2480",
            "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
        );
    }
    lazy_static! {
        pub static ref Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1: DiagnosticMessage = diag(
            2481,
            DiagnosticCategory::Error,
            "Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1_2481",
            "Cannot initialize outer scoped variable '{0}' in the same scope as block scoped declaration '{1}'.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation: DiagnosticMessage = diag(
            2483,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation_2483",
            "The left-hand side of a 'for...of' statement cannot use a type annotation.",
        );
    }
    lazy_static! {
        pub static ref Export_declaration_conflicts_with_exported_declaration_of_0: DiagnosticMessage = diag(
            2484,
            DiagnosticCategory::Error,
            "Export_declaration_conflicts_with_exported_declaration_of_0_2484",
            "Export declaration conflicts with exported declaration of '{0}'.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_a_for_of_statement_must_be_a_variable_or_a_property_access: DiagnosticMessage = diag(
            2487,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_a_for_of_statement_must_be_a_variable_or_a_property_access_2487",
            "The left-hand side of a 'for...of' statement must be a variable or a property access.",
        );
    }
    lazy_static! {
        pub static ref Type_0_must_have_a_Symbol_iterator_method_that_returns_an_iterator: DiagnosticMessage = diag(
            2488,
            DiagnosticCategory::Error,
            "Type_0_must_have_a_Symbol_iterator_method_that_returns_an_iterator_2488",
            "Type '{0}' must have a '[Symbol.iterator]()' method that returns an iterator.",
        );
    }
    lazy_static! {
        pub static ref An_iterator_must_have_a_next_method: DiagnosticMessage = diag(
            2489,
            DiagnosticCategory::Error,
            "An_iterator_must_have_a_next_method_2489",
            "An iterator must have a 'next()' method.",
        );
    }
    lazy_static! {
        pub static ref The_type_returned_by_the_0_method_of_an_iterator_must_have_a_value_property: DiagnosticMessage = diag(
            2490,
            DiagnosticCategory::Error,
            "The_type_returned_by_the_0_method_of_an_iterator_must_have_a_value_property_2490",
            "The type returned by the '{0}()' method of an iterator must have a 'value' property.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern: DiagnosticMessage = diag(
            2491,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern_2491",
            "The left-hand side of a 'for...in' statement cannot be a destructuring pattern.",
        );
    }
    lazy_static! {
        pub static ref Cannot_redeclare_identifier_0_in_catch_clause: DiagnosticMessage = diag(
            2492,
            DiagnosticCategory::Error,
            "Cannot_redeclare_identifier_0_in_catch_clause_2492",
            "Cannot redeclare identifier '{0}' in catch clause.",
        );
    }
    lazy_static! {
        pub static ref Tuple_type_0_of_length_1_has_no_element_at_index_2: DiagnosticMessage = diag(
            2493,
            DiagnosticCategory::Error,
            "Tuple_type_0_of_length_1_has_no_element_at_index_2_2493",
            "Tuple type '{0}' of length '{1}' has no element at index '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher: DiagnosticMessage = diag(
            2494,
            DiagnosticCategory::Error,
            "Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher_2494",
            "Using a string in a 'for...of' statement is only supported in ECMAScript 5 and higher.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_an_array_type_or_a_string_type: DiagnosticMessage = diag(
            2495,
            DiagnosticCategory::Error,
            "Type_0_is_not_an_array_type_or_a_string_type_2495",
            "Type '{0}' is not an array type or a string type.",
        );
    }
    lazy_static! {
        pub static ref The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression: DiagnosticMessage = diag(
            2496,
            DiagnosticCategory::Error,
            "The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_stand_2496",
            "The 'arguments' object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression.",
        );
    }
    lazy_static! {
        pub static ref This_module_can_only_be_referenced_with_ECMAScript_imports_Slashexports_by_turning_on_the_0_flag_and_referencing_its_default_export: DiagnosticMessage = diag(
            2497,
            DiagnosticCategory::Error,
            "This_module_can_only_be_referenced_with_ECMAScript_imports_Slashexports_by_turning_on_the_0_flag_and_2497",
            "This module can only be referenced with ECMAScript imports/exports by turning on the '{0}' flag and referencing its default export.",
        );
    }
    lazy_static! {
        pub static ref Module_0_uses_export_and_cannot_be_used_with_export_Asterisk: DiagnosticMessage = diag(
            2498,
            DiagnosticCategory::Error,
            "Module_0_uses_export_and_cannot_be_used_with_export_Asterisk_2498",
            "Module '{0}' uses 'export =' and cannot be used with 'export *'.",
        );
    }
    lazy_static! {
        pub static ref An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments: DiagnosticMessage = diag(
            2499,
            DiagnosticCategory::Error,
            "An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments_2499",
            "An interface can only extend an identifier/qualified-name with optional type arguments.",
        );
    }
    lazy_static! {
        pub static ref A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments: DiagnosticMessage = diag(
            2500,
            DiagnosticCategory::Error,
            "A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments_2500",
            "A class can only implement an identifier/qualified-name with optional type arguments.",
        );
    }
    lazy_static! {
        pub static ref A_rest_element_cannot_contain_a_binding_pattern: DiagnosticMessage = diag(
            2501,
            DiagnosticCategory::Error,
            "A_rest_element_cannot_contain_a_binding_pattern_2501",
            "A rest element cannot contain a binding pattern.",
        );
    }
    lazy_static! {
        pub static ref _0_is_referenced_directly_or_indirectly_in_its_own_type_annotation: DiagnosticMessage = diag(
            2502,
            DiagnosticCategory::Error,
            "_0_is_referenced_directly_or_indirectly_in_its_own_type_annotation_2502",
            "'{0}' is referenced directly or indirectly in its own type annotation.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_namespace_0: DiagnosticMessage = diag(
            2503,
            DiagnosticCategory::Error,
            "Cannot_find_namespace_0_2503",
            "Cannot find namespace '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Type_0_must_have_a_Symbol_asyncIterator_method_that_returns_an_async_iterator: DiagnosticMessage = diag(
            2504,
            DiagnosticCategory::Error,
            "Type_0_must_have_a_Symbol_asyncIterator_method_that_returns_an_async_iterator_2504",
            "Type '{0}' must have a '[Symbol.asyncIterator]()' method that returns an async iterator.",
        );
    }
    lazy_static! {
        pub static ref A_generator_cannot_have_a_void_type_annotation: DiagnosticMessage = diag(
            2505,
            DiagnosticCategory::Error,
            "A_generator_cannot_have_a_void_type_annotation_2505",
            "A generator cannot have a 'void' type annotation.",
        );
    }
    lazy_static! {
        pub static ref _0_is_referenced_directly_or_indirectly_in_its_own_base_expression: DiagnosticMessage = diag(
            2506,
            DiagnosticCategory::Error,
            "_0_is_referenced_directly_or_indirectly_in_its_own_base_expression_2506",
            "'{0}' is referenced directly or indirectly in its own base expression.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_a_constructor_function_type: DiagnosticMessage = diag(
            2507,
            DiagnosticCategory::Error,
            "Type_0_is_not_a_constructor_function_type_2507",
            "Type '{0}' is not a constructor function type.",
        );
    }
    lazy_static! {
        pub static ref No_base_constructor_has_the_specified_number_of_type_arguments: DiagnosticMessage = diag(
            2508,
            DiagnosticCategory::Error,
            "No_base_constructor_has_the_specified_number_of_type_arguments_2508",
            "No base constructor has the specified number of type arguments.",
        );
    }
    lazy_static! {
        pub static ref Base_constructor_return_type_0_is_not_an_object_type_or_intersection_of_object_types_with_statically_known_members: DiagnosticMessage = diag(
            2509,
            DiagnosticCategory::Error,
            "Base_constructor_return_type_0_is_not_an_object_type_or_intersection_of_object_types_with_statically_2509",
            "Base constructor return type '{0}' is not an object type or intersection of object types with statically known members.",
        );
    }
    lazy_static! {
        pub static ref Base_constructors_must_all_have_the_same_return_type: DiagnosticMessage = diag(
            2510,
            DiagnosticCategory::Error,
            "Base_constructors_must_all_have_the_same_return_type_2510",
            "Base constructors must all have the same return type.",
        );
    }
    lazy_static! {
        pub static ref Cannot_create_an_instance_of_an_abstract_class: DiagnosticMessage = diag(
            2511,
            DiagnosticCategory::Error,
            "Cannot_create_an_instance_of_an_abstract_class_2511",
            "Cannot create an instance of an abstract class.",
        );
    }
    lazy_static! {
        pub static ref Overload_signatures_must_all_be_abstract_or_non_abstract: DiagnosticMessage = diag(
            2512,
            DiagnosticCategory::Error,
            "Overload_signatures_must_all_be_abstract_or_non_abstract_2512",
            "Overload signatures must all be abstract or non-abstract.",
        );
    }
    lazy_static! {
        pub static ref Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression: DiagnosticMessage = diag(
            2513,
            DiagnosticCategory::Error,
            "Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression_2513",
            "Abstract method '{0}' in class '{1}' cannot be accessed via super expression.",
        );
    }
    lazy_static! {
        pub static ref Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2: DiagnosticMessage = diag(
            2515,
            DiagnosticCategory::Error,
            "Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2_2515",
            "Non-abstract class '{0}' does not implement inherited abstract member '{1}' from class '{2}'.",
        );
    }
    lazy_static! {
        pub static ref All_declarations_of_an_abstract_method_must_be_consecutive: DiagnosticMessage = diag(
            2516,
            DiagnosticCategory::Error,
            "All_declarations_of_an_abstract_method_must_be_consecutive_2516",
            "All declarations of an abstract method must be consecutive.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type: DiagnosticMessage = diag(
            2517,
            DiagnosticCategory::Error,
            "Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type_2517",
            "Cannot assign an abstract constructor type to a non-abstract constructor type.",
        );
    }
    lazy_static! {
        pub static ref A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard: DiagnosticMessage = diag(
            2518,
            DiagnosticCategory::Error,
            "A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard_2518",
            "A 'this'-based type guard is not compatible with a parameter-based type guard.",
        );
    }
    lazy_static! {
        pub static ref An_async_iterator_must_have_a_next_method: DiagnosticMessage = diag(
            2519,
            DiagnosticCategory::Error,
            "An_async_iterator_must_have_a_next_method_2519",
            "An async iterator must have a 'next()' method.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions: DiagnosticMessage = diag(
            2520,
            DiagnosticCategory::Error,
            "Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions_2520",
            "Duplicate identifier '{0}'. Compiler uses declaration '{1}' to support async functions.",
        );
    }
    lazy_static! {
        pub static ref The_arguments_object_cannot_be_referenced_in_an_async_function_or_method_in_ES3_and_ES5_Consider_using_a_standard_function_or_method: DiagnosticMessage = diag(
            2522,
            DiagnosticCategory::Error,
            "The_arguments_object_cannot_be_referenced_in_an_async_function_or_method_in_ES3_and_ES5_Consider_usi_2522",
            "The 'arguments' object cannot be referenced in an async function or method in ES3 and ES5. Consider using a standard function or method.",
        );
    }
    lazy_static! {
        pub static ref yield_expressions_cannot_be_used_in_a_parameter_initializer: DiagnosticMessage = diag(
            2523,
            DiagnosticCategory::Error,
            "yield_expressions_cannot_be_used_in_a_parameter_initializer_2523",
            "'yield' expressions cannot be used in a parameter initializer.",
        );
    }
    lazy_static! {
        pub static ref await_expressions_cannot_be_used_in_a_parameter_initializer: DiagnosticMessage = diag(
            2524,
            DiagnosticCategory::Error,
            "await_expressions_cannot_be_used_in_a_parameter_initializer_2524",
            "'await' expressions cannot be used in a parameter initializer.",
        );
    }
    lazy_static! {
        pub static ref Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value: DiagnosticMessage = diag(
            2525,
            DiagnosticCategory::Error,
            "Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value_2525",
            "Initializer provides no value for this binding element and the binding element has no default value.",
        );
    }
    lazy_static! {
        pub static ref A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface: DiagnosticMessage = diag(
            2526,
            DiagnosticCategory::Error,
            "A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface_2526",
            "A 'this' type is available only in a non-static member of a class or interface.",
        );
    }
    lazy_static! {
        pub static ref The_inferred_type_of_0_references_an_inaccessible_1_type_A_type_annotation_is_necessary: DiagnosticMessage = diag(
            2527,
            DiagnosticCategory::Error,
            "The_inferred_type_of_0_references_an_inaccessible_1_type_A_type_annotation_is_necessary_2527",
            "The inferred type of '{0}' references an inaccessible '{1}' type. A type annotation is necessary.",
        );
    }
    lazy_static! {
        pub static ref A_module_cannot_have_multiple_default_exports: DiagnosticMessage = diag(
            2528,
            DiagnosticCategory::Error,
            "A_module_cannot_have_multiple_default_exports_2528",
            "A module cannot have multiple default exports.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_functions: DiagnosticMessage = diag(
            2529,
            DiagnosticCategory::Error,
            "Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_func_2529",
            "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module containing async functions.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_incompatible_with_index_signature: DiagnosticMessage = diag(
            2530,
            DiagnosticCategory::Error,
            "Property_0_is_incompatible_with_index_signature_2530",
            "Property '{0}' is incompatible with index signature.",
        );
    }
    lazy_static! {
        pub static ref Object_is_possibly_null: DiagnosticMessage = diag(
            2531,
            DiagnosticCategory::Error,
            "Object_is_possibly_null_2531",
            "Object is possibly 'null'.",
        );
    }
    lazy_static! {
        pub static ref Object_is_possibly_undefined: DiagnosticMessage = diag(
            2532,
            DiagnosticCategory::Error,
            "Object_is_possibly_undefined_2532",
            "Object is possibly 'undefined'.",
        );
    }
    lazy_static! {
        pub static ref Object_is_possibly_null_or_undefined: DiagnosticMessage = diag(
            2533,
            DiagnosticCategory::Error,
            "Object_is_possibly_null_or_undefined_2533",
            "Object is possibly 'null' or 'undefined'.",
        );
    }
    lazy_static! {
        pub static ref A_function_returning_never_cannot_have_a_reachable_end_point: DiagnosticMessage = diag(
            2534,
            DiagnosticCategory::Error,
            "A_function_returning_never_cannot_have_a_reachable_end_point_2534",
            "A function returning 'never' cannot have a reachable end point.",
        );
    }
    lazy_static! {
        pub static ref Enum_type_0_has_members_with_initializers_that_are_not_literals: DiagnosticMessage = diag(
            2535,
            DiagnosticCategory::Error,
            "Enum_type_0_has_members_with_initializers_that_are_not_literals_2535",
            "Enum type '{0}' has members with initializers that are not literals.",
        );
    }
    lazy_static! {
        pub static ref Type_0_cannot_be_used_to_index_type_1: DiagnosticMessage = diag(
            2536,
            DiagnosticCategory::Error,
            "Type_0_cannot_be_used_to_index_type_1_2536",
            "Type '{0}' cannot be used to index type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_0_has_no_matching_index_signature_for_type_1: DiagnosticMessage = diag(
            2537,
            DiagnosticCategory::Error,
            "Type_0_has_no_matching_index_signature_for_type_1_2537",
            "Type '{0}' has no matching index signature for type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_0_cannot_be_used_as_an_index_type: DiagnosticMessage = diag(
            2538,
            DiagnosticCategory::Error,
            "Type_0_cannot_be_used_as_an_index_type_2538",
            "Type '{0}' cannot be used as an index type.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_to_0_because_it_is_not_a_variable: DiagnosticMessage = diag(
            2539,
            DiagnosticCategory::Error,
            "Cannot_assign_to_0_because_it_is_not_a_variable_2539",
            "Cannot assign to '{0}' because it is not a variable.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_to_0_because_it_is_a_read_only_property: DiagnosticMessage = diag(
            2540,
            DiagnosticCategory::Error,
            "Cannot_assign_to_0_because_it_is_a_read_only_property_2540",
            "Cannot assign to '{0}' because it is a read-only property.",
        );
    }
    lazy_static! {
        pub static ref Index_signature_in_type_0_only_permits_reading: DiagnosticMessage = diag(
            2542,
            DiagnosticCategory::Error,
            "Index_signature_in_type_0_only_permits_reading_2542",
            "Index signature in type '{0}' only permits reading.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_identifier_newTarget_Compiler_uses_variable_declaration_newTarget_to_capture_new_target_meta_property_reference: DiagnosticMessage = diag(
            2543,
            DiagnosticCategory::Error,
            "Duplicate_identifier_newTarget_Compiler_uses_variable_declaration_newTarget_to_capture_new_target_me_2543",
            "Duplicate identifier '_newTarget'. Compiler uses variable declaration '_newTarget' to capture 'new.target' meta-property reference.",
        );
    }
    lazy_static! {
        pub static ref Expression_resolves_to_variable_declaration_newTarget_that_compiler_uses_to_capture_new_target_meta_property_reference: DiagnosticMessage = diag(
            2544,
            DiagnosticCategory::Error,
            "Expression_resolves_to_variable_declaration_newTarget_that_compiler_uses_to_capture_new_target_meta__2544",
            "Expression resolves to variable declaration '_newTarget' that compiler uses to capture 'new.target' meta-property reference.",
        );
    }
    lazy_static! {
        pub static ref A_mixin_class_must_have_a_constructor_with_a_single_rest_parameter_of_type_any: DiagnosticMessage = diag(
            2545,
            DiagnosticCategory::Error,
            "A_mixin_class_must_have_a_constructor_with_a_single_rest_parameter_of_type_any_2545",
            "A mixin class must have a constructor with a single rest parameter of type 'any[]'.",
        );
    }
    lazy_static! {
        pub static ref The_type_returned_by_the_0_method_of_an_async_iterator_must_be_a_promise_for_a_type_with_a_value_property: DiagnosticMessage = diag(
            2547,
            DiagnosticCategory::Error,
            "The_type_returned_by_the_0_method_of_an_async_iterator_must_be_a_promise_for_a_type_with_a_value_pro_2547",
            "The type returned by the '{0}()' method of an async iterator must be a promise for a type with a 'value' property.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_an_array_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator: DiagnosticMessage = diag(
            2548,
            DiagnosticCategory::Error,
            "Type_0_is_not_an_array_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator_2548",
            "Type '{0}' is not an array type or does not have a '[Symbol.iterator]()' method that returns an iterator.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_an_array_type_or_a_string_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator: DiagnosticMessage = diag(
            2549,
            DiagnosticCategory::Error,
            "Type_0_is_not_an_array_type_or_a_string_type_or_does_not_have_a_Symbol_iterator_method_that_returns__2549",
            "Type '{0}' is not an array type or a string type or does not have a '[Symbol.iterator]()' method that returns an iterator.",
        );
    }
    lazy_static! {
        pub static ref Property_0_does_not_exist_on_type_1_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2_or_later: DiagnosticMessage = diag(
            2550,
            DiagnosticCategory::Error,
            "Property_0_does_not_exist_on_type_1_Do_you_need_to_change_your_target_library_Try_changing_the_lib_c_2550",
            "Property '{0}' does not exist on type '{1}'. Do you need to change your target library? Try changing the 'lib' compiler option to '{2}' or later.",
        );
    }
    lazy_static! {
        pub static ref Property_0_does_not_exist_on_type_1_Did_you_mean_2: DiagnosticMessage = diag(
            2551,
            DiagnosticCategory::Error,
            "Property_0_does_not_exist_on_type_1_Did_you_mean_2_2551",
            "Property '{0}' does not exist on type '{1}'. Did you mean '{2}'?",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Did_you_mean_1: DiagnosticMessage = diag(
            2552,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Did_you_mean_1_2552",
            "Cannot find name '{0}'. Did you mean '{1}'?",
        );
    }
    lazy_static! {
        pub static ref Computed_values_are_not_permitted_in_an_enum_with_string_valued_members: DiagnosticMessage = diag(
            2553,
            DiagnosticCategory::Error,
            "Computed_values_are_not_permitted_in_an_enum_with_string_valued_members_2553",
            "Computed values are not permitted in an enum with string valued members.",
        );
    }
    lazy_static! {
        pub static ref Expected_0_arguments_but_got_1: DiagnosticMessage = diag(
            2554,
            DiagnosticCategory::Error,
            "Expected_0_arguments_but_got_1_2554",
            "Expected {0} arguments, but got {1}.",
        );
    }
    lazy_static! {
        pub static ref Expected_at_least_0_arguments_but_got_1: DiagnosticMessage = diag(
            2555,
            DiagnosticCategory::Error,
            "Expected_at_least_0_arguments_but_got_1_2555",
            "Expected at least {0} arguments, but got {1}.",
        );
    }
    lazy_static! {
        pub static ref A_spread_argument_must_either_have_a_tuple_type_or_be_passed_to_a_rest_parameter: DiagnosticMessage = diag(
            2556,
            DiagnosticCategory::Error,
            "A_spread_argument_must_either_have_a_tuple_type_or_be_passed_to_a_rest_parameter_2556",
            "A spread argument must either have a tuple type or be passed to a rest parameter.",
        );
    }
    lazy_static! {
        pub static ref Expected_0_type_arguments_but_got_1: DiagnosticMessage = diag(
            2558,
            DiagnosticCategory::Error,
            "Expected_0_type_arguments_but_got_1_2558",
            "Expected {0} type arguments, but got {1}.",
        );
    }
    lazy_static! {
        pub static ref Type_0_has_no_properties_in_common_with_type_1: DiagnosticMessage = diag(
            2559,
            DiagnosticCategory::Error,
            "Type_0_has_no_properties_in_common_with_type_1_2559",
            "Type '{0}' has no properties in common with type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Value_of_type_0_has_no_properties_in_common_with_type_1_Did_you_mean_to_call_it: DiagnosticMessage = diag(
            2560,
            DiagnosticCategory::Error,
            "Value_of_type_0_has_no_properties_in_common_with_type_1_Did_you_mean_to_call_it_2560",
            "Value of type '{0}' has no properties in common with type '{1}'. Did you mean to call it?",
        );
    }
    lazy_static! {
        pub static ref Object_literal_may_only_specify_known_properties_but_0_does_not_exist_in_type_1_Did_you_mean_to_write_2: DiagnosticMessage = diag(
            2561,
            DiagnosticCategory::Error,
            "Object_literal_may_only_specify_known_properties_but_0_does_not_exist_in_type_1_Did_you_mean_to_writ_2561",
            "Object literal may only specify known properties, but '{0}' does not exist in type '{1}'. Did you mean to write '{2}'?",
        );
    }
    lazy_static! {
        pub static ref Base_class_expressions_cannot_reference_class_type_parameters: DiagnosticMessage = diag(
            2562,
            DiagnosticCategory::Error,
            "Base_class_expressions_cannot_reference_class_type_parameters_2562",
            "Base class expressions cannot reference class type parameters.",
        );
    }
    lazy_static! {
        pub static ref The_containing_function_or_module_body_is_too_large_for_control_flow_analysis: DiagnosticMessage = diag(
            2563,
            DiagnosticCategory::Error,
            "The_containing_function_or_module_body_is_too_large_for_control_flow_analysis_2563",
            "The containing function or module body is too large for control flow analysis.",
        );
    }
    lazy_static! {
        pub static ref Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor: DiagnosticMessage = diag(
            2564,
            DiagnosticCategory::Error,
            "Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor_2564",
            "Property '{0}' has no initializer and is not definitely assigned in the constructor.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_used_before_being_assigned: DiagnosticMessage = diag(
            2565,
            DiagnosticCategory::Error,
            "Property_0_is_used_before_being_assigned_2565",
            "Property '{0}' is used before being assigned.",
        );
    }
    lazy_static! {
        pub static ref A_rest_element_cannot_have_a_property_name: DiagnosticMessage = diag(
            2566,
            DiagnosticCategory::Error,
            "A_rest_element_cannot_have_a_property_name_2566",
            "A rest element cannot have a property name.",
        );
    }
    lazy_static! {
        pub static ref Enum_declarations_can_only_merge_with_namespace_or_other_enum_declarations: DiagnosticMessage = diag(
            2567,
            DiagnosticCategory::Error,
            "Enum_declarations_can_only_merge_with_namespace_or_other_enum_declarations_2567",
            "Enum declarations can only merge with namespace or other enum declarations.",
        );
    }
    lazy_static! {
        pub static ref Property_0_may_not_exist_on_type_1_Did_you_mean_2: DiagnosticMessage = diag(
            2568,
            DiagnosticCategory::Error,
            "Property_0_may_not_exist_on_type_1_Did_you_mean_2_2568",
            "Property '{0}' may not exist on type '{1}'. Did you mean '{2}'?",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_an_array_type_or_a_string_type_Use_compiler_option_downlevelIteration_to_allow_iterating_of_iterators: DiagnosticMessage = diag(
            2569,
            DiagnosticCategory::Error,
            "Type_0_is_not_an_array_type_or_a_string_type_Use_compiler_option_downlevelIteration_to_allow_iterati_2569",
            "Type '{0}' is not an array type or a string type. Use compiler option '--downlevelIteration' to allow iterating of iterators.",
        );
    }
    lazy_static! {
        pub static ref Could_not_find_name_0_Did_you_mean_1: DiagnosticMessage = diag(
            2570,
            DiagnosticCategory::Error,
            "Could_not_find_name_0_Did_you_mean_1_2570",
            "Could not find name '{0}'. Did you mean '{1}'?",
        );
    }
    lazy_static! {
        pub static ref Object_is_of_type_unknown: DiagnosticMessage = diag(
            2571,
            DiagnosticCategory::Error,
            "Object_is_of_type_unknown_2571",
            "Object is of type 'unknown'.",
        );
    }
    lazy_static! {
        pub static ref A_rest_element_type_must_be_an_array_type: DiagnosticMessage = diag(
            2574,
            DiagnosticCategory::Error,
            "A_rest_element_type_must_be_an_array_type_2574",
            "A rest element type must be an array type.",
        );
    }
    lazy_static! {
        pub static ref No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments: DiagnosticMessage = diag(
            2575,
            DiagnosticCategory::Error,
            "No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments_2575",
            "No overload expects {0} arguments, but overloads do exist that expect either {1} or {2} arguments.",
        );
    }
    lazy_static! {
        pub static ref Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead: DiagnosticMessage = diag(
            2576,
            DiagnosticCategory::Error,
            "Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead_2576",
            "Property '{0}' does not exist on type '{1}'. Did you mean to access the static member '{2}' instead?",
        );
    }
    lazy_static! {
        pub static ref Return_type_annotation_circularly_references_itself: DiagnosticMessage = diag(
            2577,
            DiagnosticCategory::Error,
            "Return_type_annotation_circularly_references_itself_2577",
            "Return type annotation circularly references itself.",
        );
    }
    lazy_static! {
        pub static ref Unused_ts_expect_error_directive: DiagnosticMessage = diag(
            2578,
            DiagnosticCategory::Error,
            "Unused_ts_expect_error_directive_2578",
            "Unused '@ts-expect-error' directive.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode: DiagnosticMessage = diag(
            2580,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashno_2580",
            "Cannot find name '{0}'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery: DiagnosticMessage = diag(
            2581,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slash_2581",
            "Cannot find name '{0}'. Do you need to install type definitions for jQuery? Try `npm i --save-dev @types/jquery`.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha: DiagnosticMessage = diag(
            2582,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_type_2582",
            "Cannot find name '{0}'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_1_or_later: DiagnosticMessage = diag(
            2583,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2583",
            "Cannot find name '{0}'. Do you need to change your target library? Try changing the 'lib' compiler option to '{1}' or later.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_include_dom: DiagnosticMessage = diag(
            2584,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2584",
            "Cannot find name '{0}'. Do you need to change your target library? Try changing the 'lib' compiler option to include 'dom'.",
        );
    }
    lazy_static! {
        pub static ref _0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_es2015_or_later: DiagnosticMessage = diag(
            2585,
            DiagnosticCategory::Error,
            "_0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Do_you_need_to_change_your_target_library_2585",
            "'{0}' only refers to a type, but is being used as a value here. Do you need to change your target library? Try changing the 'lib' compiler option to es2015 or later.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_to_0_because_it_is_a_constant: DiagnosticMessage = diag(
            2588,
            DiagnosticCategory::Error,
            "Cannot_assign_to_0_because_it_is_a_constant_2588",
            "Cannot assign to '{0}' because it is a constant.",
        );
    }
    lazy_static! {
        pub static ref Type_instantiation_is_excessively_deep_and_possibly_infinite: DiagnosticMessage = diag(
            2589,
            DiagnosticCategory::Error,
            "Type_instantiation_is_excessively_deep_and_possibly_infinite_2589",
            "Type instantiation is excessively deep and possibly infinite.",
        );
    }
    lazy_static! {
        pub static ref Expression_produces_a_union_type_that_is_too_complex_to_represent: DiagnosticMessage = diag(
            2590,
            DiagnosticCategory::Error,
            "Expression_produces_a_union_type_that_is_too_complex_to_represent_2590",
            "Expression produces a union type that is too complex to represent.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode_and_then_add_node_to_the_types_field_in_your_tsconfig: DiagnosticMessage = diag(
            2591,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashno_2591",
            "Cannot find name '{0}'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node` and then add 'node' to the types field in your tsconfig.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery_and_then_add_jquery_to_the_types_field_in_your_tsconfig: DiagnosticMessage = diag(
            2592,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slash_2592",
            "Cannot find name '{0}'. Do you need to install type definitions for jQuery? Try `npm i --save-dev @types/jquery` and then add 'jquery' to the types field in your tsconfig.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha_and_then_add_jest_or_mocha_to_the_types_field_in_your_tsconfig: DiagnosticMessage = diag(
            2593,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_type_2593",
            "Cannot find name '{0}'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha` and then add 'jest' or 'mocha' to the types field in your tsconfig.",
        );
    }
    lazy_static! {
        pub static ref This_module_is_declared_with_using_export_and_can_only_be_used_with_a_default_import_when_using_the_0_flag: DiagnosticMessage = diag(
            2594,
            DiagnosticCategory::Error,
            "This_module_is_declared_with_using_export_and_can_only_be_used_with_a_default_import_when_using_the__2594",
            "This module is declared with using 'export =', and can only be used with a default import when using the '{0}' flag.",
        );
    }
    lazy_static! {
        pub static ref _0_can_only_be_imported_by_using_a_default_import: DiagnosticMessage = diag(
            2595,
            DiagnosticCategory::Error,
            "_0_can_only_be_imported_by_using_a_default_import_2595",
            "'{0}' can only be imported by using a default import.",
        );
    }
    lazy_static! {
        pub static ref _0_can_only_be_imported_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import: DiagnosticMessage = diag(
            2596,
            DiagnosticCategory::Error,
            "_0_can_only_be_imported_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import_2596",
            "'{0}' can only be imported by turning on the 'esModuleInterop' flag and using a default import.",
        );
    }
    lazy_static! {
        pub static ref _0_can_only_be_imported_by_using_a_require_call_or_by_using_a_default_import: DiagnosticMessage = diag(
            2597,
            DiagnosticCategory::Error,
            "_0_can_only_be_imported_by_using_a_require_call_or_by_using_a_default_import_2597",
            "'{0}' can only be imported by using a 'require' call or by using a default import.",
        );
    }
    lazy_static! {
        pub static ref _0_can_only_be_imported_by_using_a_require_call_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import: DiagnosticMessage = diag(
            2598,
            DiagnosticCategory::Error,
            "_0_can_only_be_imported_by_using_a_require_call_or_by_turning_on_the_esModuleInterop_flag_and_using__2598",
            "'{0}' can only be imported by using a 'require' call or by turning on the 'esModuleInterop' flag and using a default import.",
        );
    }
    lazy_static! {
        pub static ref JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist: DiagnosticMessage = diag(
            2602,
            DiagnosticCategory::Error,
            "JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist_2602",
            "JSX element implicitly has type 'any' because the global type 'JSX.Element' does not exist.",
        );
    }
    lazy_static! {
        pub static ref Property_0_in_type_1_is_not_assignable_to_type_2: DiagnosticMessage = diag(
            2603,
            DiagnosticCategory::Error,
            "Property_0_in_type_1_is_not_assignable_to_type_2_2603",
            "Property '{0}' in type '{1}' is not assignable to type '{2}'.",
        );
    }
    lazy_static! {
        pub static ref JSX_element_type_0_does_not_have_any_construct_or_call_signatures: DiagnosticMessage = diag(
            2604,
            DiagnosticCategory::Error,
            "JSX_element_type_0_does_not_have_any_construct_or_call_signatures_2604",
            "JSX element type '{0}' does not have any construct or call signatures.",
        );
    }
    lazy_static! {
        pub static ref Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property: DiagnosticMessage = diag(
            2606,
            DiagnosticCategory::Error,
            "Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property_2606",
            "Property '{0}' of JSX spread attribute is not assignable to target property.",
        );
    }
    lazy_static! {
        pub static ref JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property: DiagnosticMessage = diag(
            2607,
            DiagnosticCategory::Error,
            "JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property_2607",
            "JSX element class does not support attributes because it does not have a '{0}' property.",
        );
    }
    lazy_static! {
        pub static ref The_global_type_JSX_0_may_not_have_more_than_one_property: DiagnosticMessage = diag(
            2608,
            DiagnosticCategory::Error,
            "The_global_type_JSX_0_may_not_have_more_than_one_property_2608",
            "The global type 'JSX.{0}' may not have more than one property.",
        );
    }
    lazy_static! {
        pub static ref JSX_spread_child_must_be_an_array_type: DiagnosticMessage = diag(
            2609,
            DiagnosticCategory::Error,
            "JSX_spread_child_must_be_an_array_type_2609",
            "JSX spread child must be an array type.",
        );
    }
    lazy_static! {
        pub static ref _0_is_defined_as_an_accessor_in_class_1_but_is_overridden_here_in_2_as_an_instance_property: DiagnosticMessage = diag(
            2610,
            DiagnosticCategory::Error,
            "_0_is_defined_as_an_accessor_in_class_1_but_is_overridden_here_in_2_as_an_instance_property_2610",
            "'{0}' is defined as an accessor in class '{1}', but is overridden here in '{2}' as an instance property.",
        );
    }
    lazy_static! {
        pub static ref _0_is_defined_as_a_property_in_class_1_but_is_overridden_here_in_2_as_an_accessor: DiagnosticMessage = diag(
            2611,
            DiagnosticCategory::Error,
            "_0_is_defined_as_a_property_in_class_1_but_is_overridden_here_in_2_as_an_accessor_2611",
            "'{0}' is defined as a property in class '{1}', but is overridden here in '{2}' as an accessor.",
        );
    }
    lazy_static! {
        pub static ref Property_0_will_overwrite_the_base_property_in_1_If_this_is_intentional_add_an_initializer_Otherwise_add_a_declare_modifier_or_remove_the_redundant_declaration: DiagnosticMessage = diag(
            2612,
            DiagnosticCategory::Error,
            "Property_0_will_overwrite_the_base_property_in_1_If_this_is_intentional_add_an_initializer_Otherwise_2612",
            "Property '{0}' will overwrite the base property in '{1}'. If this is intentional, add an initializer. Otherwise, add a 'declare' modifier or remove the redundant declaration.",
        );
    }
    lazy_static! {
        pub static ref Module_0_has_no_default_export_Did_you_mean_to_use_import_1_from_0_instead: DiagnosticMessage = diag(
            2613,
            DiagnosticCategory::Error,
            "Module_0_has_no_default_export_Did_you_mean_to_use_import_1_from_0_instead_2613",
            "Module '{0}' has no default export. Did you mean to use 'import { {1} } from {0}' instead?",
        );
    }
    lazy_static! {
        pub static ref Module_0_has_no_exported_member_1_Did_you_mean_to_use_import_1_from_0_instead: DiagnosticMessage = diag(
            2614,
            DiagnosticCategory::Error,
            "Module_0_has_no_exported_member_1_Did_you_mean_to_use_import_1_from_0_instead_2614",
            "Module '{0}' has no exported member '{1}'. Did you mean to use 'import {1} from {0}' instead?",
        );
    }
    lazy_static! {
        pub static ref Type_of_property_0_circularly_references_itself_in_mapped_type_1: DiagnosticMessage = diag(
            2615,
            DiagnosticCategory::Error,
            "Type_of_property_0_circularly_references_itself_in_mapped_type_1_2615",
            "Type of property '{0}' circularly references itself in mapped type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref _0_can_only_be_imported_by_using_import_1_require_2_or_a_default_import: DiagnosticMessage = diag(
            2616,
            DiagnosticCategory::Error,
            "_0_can_only_be_imported_by_using_import_1_require_2_or_a_default_import_2616",
            "'{0}' can only be imported by using 'import {1} = require({2})' or a default import.",
        );
    }
    lazy_static! {
        pub static ref _0_can_only_be_imported_by_using_import_1_require_2_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import: DiagnosticMessage = diag(
            2617,
            DiagnosticCategory::Error,
            "_0_can_only_be_imported_by_using_import_1_require_2_or_by_turning_on_the_esModuleInterop_flag_and_us_2617",
            "'{0}' can only be imported by using 'import {1} = require({2})' or by turning on the 'esModuleInterop' flag and using a default import.",
        );
    }
    lazy_static! {
        pub static ref Source_has_0_element_s_but_target_requires_1: DiagnosticMessage = diag(
            2618,
            DiagnosticCategory::Error,
            "Source_has_0_element_s_but_target_requires_1_2618",
            "Source has {0} element(s) but target requires {1}.",
        );
    }
    lazy_static! {
        pub static ref Source_has_0_element_s_but_target_allows_only_1: DiagnosticMessage = diag(
            2619,
            DiagnosticCategory::Error,
            "Source_has_0_element_s_but_target_allows_only_1_2619",
            "Source has {0} element(s) but target allows only {1}.",
        );
    }
    lazy_static! {
        pub static ref Target_requires_0_element_s_but_source_may_have_fewer: DiagnosticMessage = diag(
            2620,
            DiagnosticCategory::Error,
            "Target_requires_0_element_s_but_source_may_have_fewer_2620",
            "Target requires {0} element(s) but source may have fewer.",
        );
    }
    lazy_static! {
        pub static ref Target_allows_only_0_element_s_but_source_may_have_more: DiagnosticMessage = diag(
            2621,
            DiagnosticCategory::Error,
            "Target_allows_only_0_element_s_but_source_may_have_more_2621",
            "Target allows only {0} element(s) but source may have more.",
        );
    }
    lazy_static! {
        pub static ref Source_provides_no_match_for_required_element_at_position_0_in_target: DiagnosticMessage = diag(
            2623,
            DiagnosticCategory::Error,
            "Source_provides_no_match_for_required_element_at_position_0_in_target_2623",
            "Source provides no match for required element at position {0} in target.",
        );
    }
    lazy_static! {
        pub static ref Source_provides_no_match_for_variadic_element_at_position_0_in_target: DiagnosticMessage = diag(
            2624,
            DiagnosticCategory::Error,
            "Source_provides_no_match_for_variadic_element_at_position_0_in_target_2624",
            "Source provides no match for variadic element at position {0} in target.",
        );
    }
    lazy_static! {
        pub static ref Variadic_element_at_position_0_in_source_does_not_match_element_at_position_1_in_target: DiagnosticMessage = diag(
            2625,
            DiagnosticCategory::Error,
            "Variadic_element_at_position_0_in_source_does_not_match_element_at_position_1_in_target_2625",
            "Variadic element at position {0} in source does not match element at position {1} in target.",
        );
    }
    lazy_static! {
        pub static ref Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target: DiagnosticMessage = diag(
            2626,
            DiagnosticCategory::Error,
            "Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target_2626",
            "Type at position {0} in source is not compatible with type at position {1} in target.",
        );
    }
    lazy_static! {
        pub static ref Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target: DiagnosticMessage = diag(
            2627,
            DiagnosticCategory::Error,
            "Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target_2627",
            "Type at positions {0} through {1} in source is not compatible with type at position {2} in target.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_to_0_because_it_is_an_enum: DiagnosticMessage = diag(
            2628,
            DiagnosticCategory::Error,
            "Cannot_assign_to_0_because_it_is_an_enum_2628",
            "Cannot assign to '{0}' because it is an enum.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_to_0_because_it_is_a_class: DiagnosticMessage = diag(
            2629,
            DiagnosticCategory::Error,
            "Cannot_assign_to_0_because_it_is_a_class_2629",
            "Cannot assign to '{0}' because it is a class.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_to_0_because_it_is_a_function: DiagnosticMessage = diag(
            2630,
            DiagnosticCategory::Error,
            "Cannot_assign_to_0_because_it_is_a_function_2630",
            "Cannot assign to '{0}' because it is a function.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_to_0_because_it_is_a_namespace: DiagnosticMessage = diag(
            2631,
            DiagnosticCategory::Error,
            "Cannot_assign_to_0_because_it_is_a_namespace_2631",
            "Cannot assign to '{0}' because it is a namespace.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_to_0_because_it_is_an_import: DiagnosticMessage = diag(
            2632,
            DiagnosticCategory::Error,
            "Cannot_assign_to_0_because_it_is_an_import_2632",
            "Cannot assign to '{0}' because it is an import.",
        );
    }
    lazy_static! {
        pub static ref JSX_property_access_expressions_cannot_include_JSX_namespace_names: DiagnosticMessage = diag(
            2633,
            DiagnosticCategory::Error,
            "JSX_property_access_expressions_cannot_include_JSX_namespace_names_2633",
            "JSX property access expressions cannot include JSX namespace names",
        );
    }
    lazy_static! {
        pub static ref _0_index_signatures_are_incompatible: DiagnosticMessage = diag(
            2634,
            DiagnosticCategory::Error,
            "_0_index_signatures_are_incompatible_2634",
            "'{0}' index signatures are incompatible.",
        );
    }
    lazy_static! {
        pub static ref Cannot_augment_module_0_with_value_exports_because_it_resolves_to_a_non_module_entity: DiagnosticMessage = diag(
            2649,
            DiagnosticCategory::Error,
            "Cannot_augment_module_0_with_value_exports_because_it_resolves_to_a_non_module_entity_2649",
            "Cannot augment module '{0}' with value exports because it resolves to a non-module entity.",
        );
    }
    lazy_static! {
        pub static ref A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums: DiagnosticMessage = diag(
            2651,
            DiagnosticCategory::Error,
            "A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_memb_2651",
            "A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.",
        );
    }
    lazy_static! {
        pub static ref Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead: DiagnosticMessage = diag(
            2652,
            DiagnosticCategory::Error,
            "Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_d_2652",
            "Merged declaration '{0}' cannot include a default export declaration. Consider adding a separate 'export default {0}' declaration instead.",
        );
    }
    lazy_static! {
        pub static ref Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1: DiagnosticMessage = diag(
            2653,
            DiagnosticCategory::Error,
            "Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1_2653",
            "Non-abstract class expression does not implement inherited abstract member '{0}' from class '{1}'.",
        );
    }
    lazy_static! {
        pub static ref JSX_expressions_must_have_one_parent_element: DiagnosticMessage = diag(
            2657,
            DiagnosticCategory::Error,
            "JSX_expressions_must_have_one_parent_element_2657",
            "JSX expressions must have one parent element.",
        );
    }
    lazy_static! {
        pub static ref Type_0_provides_no_match_for_the_signature_1: DiagnosticMessage = diag(
            2658,
            DiagnosticCategory::Error,
            "Type_0_provides_no_match_for_the_signature_1_2658",
            "Type '{0}' provides no match for the signature '{1}'.",
        );
    }
    lazy_static! {
        pub static ref super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_higher: DiagnosticMessage = diag(
            2659,
            DiagnosticCategory::Error,
            "super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_highe_2659",
            "'super' is only allowed in members of object literal expressions when option 'target' is 'ES2015' or higher.",
        );
    }
    lazy_static! {
        pub static ref super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions: DiagnosticMessage = diag(
            2660,
            DiagnosticCategory::Error,
            "super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions_2660",
            "'super' can only be referenced in members of derived classes or object literal expressions.",
        );
    }
    lazy_static! {
        pub static ref Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module: DiagnosticMessage = diag(
            2661,
            DiagnosticCategory::Error,
            "Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module_2661",
            "Cannot export '{0}'. Only local declarations can be exported from a module.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Did_you_mean_the_static_member_1_0: DiagnosticMessage = diag(
            2662,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Did_you_mean_the_static_member_1_0_2662",
            "Cannot find name '{0}'. Did you mean the static member '{1}.{0}'?",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_name_0_Did_you_mean_the_instance_member_this_0: DiagnosticMessage = diag(
            2663,
            DiagnosticCategory::Error,
            "Cannot_find_name_0_Did_you_mean_the_instance_member_this_0_2663",
            "Cannot find name '{0}'. Did you mean the instance member 'this.{0}'?",
        );
    }
    lazy_static! {
        pub static ref Invalid_module_name_in_augmentation_module_0_cannot_be_found: DiagnosticMessage = diag(
            2664,
            DiagnosticCategory::Error,
            "Invalid_module_name_in_augmentation_module_0_cannot_be_found_2664",
            "Invalid module name in augmentation, module '{0}' cannot be found.",
        );
    }
    lazy_static! {
        pub static ref Invalid_module_name_in_augmentation_Module_0_resolves_to_an_untyped_module_at_1_which_cannot_be_augmented: DiagnosticMessage = diag(
            2665,
            DiagnosticCategory::Error,
            "Invalid_module_name_in_augmentation_Module_0_resolves_to_an_untyped_module_at_1_which_cannot_be_augm_2665",
            "Invalid module name in augmentation. Module '{0}' resolves to an untyped module at '{1}', which cannot be augmented.",
        );
    }
    lazy_static! {
        pub static ref Exports_and_export_assignments_are_not_permitted_in_module_augmentations: DiagnosticMessage = diag(
            2666,
            DiagnosticCategory::Error,
            "Exports_and_export_assignments_are_not_permitted_in_module_augmentations_2666",
            "Exports and export assignments are not permitted in module augmentations.",
        );
    }
    lazy_static! {
        pub static ref Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_module: DiagnosticMessage = diag(
            2667,
            DiagnosticCategory::Error,
            "Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_mod_2667",
            "Imports are not permitted in module augmentations. Consider moving them to the enclosing external module.",
        );
    }
    lazy_static! {
        pub static ref export_modifier_cannot_be_applied_to_ambient_modules_and_module_augmentations_since_they_are_always_visible: DiagnosticMessage = diag(
            2668,
            DiagnosticCategory::Error,
            "export_modifier_cannot_be_applied_to_ambient_modules_and_module_augmentations_since_they_are_always__2668",
            "'export' modifier cannot be applied to ambient modules and module augmentations since they are always visible.",
        );
    }
    lazy_static! {
        pub static ref Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations: DiagnosticMessage = diag(
            2669,
            DiagnosticCategory::Error,
            "Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_2669",
            "Augmentations for the global scope can only be directly nested in external modules or ambient module declarations.",
        );
    }
    lazy_static! {
        pub static ref Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambient_context: DiagnosticMessage = diag(
            2670,
            DiagnosticCategory::Error,
            "Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambien_2670",
            "Augmentations for the global scope should have 'declare' modifier unless they appear in already ambient context.",
        );
    }
    lazy_static! {
        pub static ref Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity: DiagnosticMessage = diag(
            2671,
            DiagnosticCategory::Error,
            "Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity_2671",
            "Cannot augment module '{0}' because it resolves to a non-module entity.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_a_0_constructor_type_to_a_1_constructor_type: DiagnosticMessage = diag(
            2672,
            DiagnosticCategory::Error,
            "Cannot_assign_a_0_constructor_type_to_a_1_constructor_type_2672",
            "Cannot assign a '{0}' constructor type to a '{1}' constructor type.",
        );
    }
    lazy_static! {
        pub static ref Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration: DiagnosticMessage = diag(
            2673,
            DiagnosticCategory::Error,
            "Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration_2673",
            "Constructor of class '{0}' is private and only accessible within the class declaration.",
        );
    }
    lazy_static! {
        pub static ref Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration: DiagnosticMessage = diag(
            2674,
            DiagnosticCategory::Error,
            "Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration_2674",
            "Constructor of class '{0}' is protected and only accessible within the class declaration.",
        );
    }
    lazy_static! {
        pub static ref Cannot_extend_a_class_0_Class_constructor_is_marked_as_private: DiagnosticMessage = diag(
            2675,
            DiagnosticCategory::Error,
            "Cannot_extend_a_class_0_Class_constructor_is_marked_as_private_2675",
            "Cannot extend a class '{0}'. Class constructor is marked as private.",
        );
    }
    lazy_static! {
        pub static ref Accessors_must_both_be_abstract_or_non_abstract: DiagnosticMessage = diag(
            2676,
            DiagnosticCategory::Error,
            "Accessors_must_both_be_abstract_or_non_abstract_2676",
            "Accessors must both be abstract or non-abstract.",
        );
    }
    lazy_static! {
        pub static ref A_type_predicate_s_type_must_be_assignable_to_its_parameter_s_type: DiagnosticMessage = diag(
            2677,
            DiagnosticCategory::Error,
            "A_type_predicate_s_type_must_be_assignable_to_its_parameter_s_type_2677",
            "A type predicate's type must be assignable to its parameter's type.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_comparable_to_type_1: DiagnosticMessage = diag(
            2678,
            DiagnosticCategory::Error,
            "Type_0_is_not_comparable_to_type_1_2678",
            "Type '{0}' is not comparable to type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref A_function_that_is_called_with_the_new_keyword_cannot_have_a_this_type_that_is_void: DiagnosticMessage = diag(
            2679,
            DiagnosticCategory::Error,
            "A_function_that_is_called_with_the_new_keyword_cannot_have_a_this_type_that_is_void_2679",
            "A function that is called with the 'new' keyword cannot have a 'this' type that is 'void'.",
        );
    }
    lazy_static! {
        pub static ref A_0_parameter_must_be_the_first_parameter: DiagnosticMessage = diag(
            2680,
            DiagnosticCategory::Error,
            "A_0_parameter_must_be_the_first_parameter_2680",
            "A '{0}' parameter must be the first parameter.",
        );
    }
    lazy_static! {
        pub static ref A_constructor_cannot_have_a_this_parameter: DiagnosticMessage = diag(
            2681,
            DiagnosticCategory::Error,
            "A_constructor_cannot_have_a_this_parameter_2681",
            "A constructor cannot have a 'this' parameter.",
        );
    }
    lazy_static! {
        pub static ref this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation: DiagnosticMessage = diag(
            2683,
            DiagnosticCategory::Error,
            "this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_2683",
            "'this' implicitly has type 'any' because it does not have a type annotation.",
        );
    }
    lazy_static! {
        pub static ref The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1: DiagnosticMessage = diag(
            2684,
            DiagnosticCategory::Error,
            "The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1_2684",
            "The 'this' context of type '{0}' is not assignable to method's 'this' of type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref The_this_types_of_each_signature_are_incompatible: DiagnosticMessage = diag(
            2685,
            DiagnosticCategory::Error,
            "The_this_types_of_each_signature_are_incompatible_2685",
            "The 'this' types of each signature are incompatible.",
        );
    }
    lazy_static! {
        pub static ref _0_refers_to_a_UMD_global_but_the_current_file_is_a_module_Consider_adding_an_import_instead: DiagnosticMessage = diag(
            2686,
            DiagnosticCategory::Error,
            "_0_refers_to_a_UMD_global_but_the_current_file_is_a_module_Consider_adding_an_import_instead_2686",
            "'{0}' refers to a UMD global, but the current file is a module. Consider adding an import instead.",
        );
    }
    lazy_static! {
        pub static ref All_declarations_of_0_must_have_identical_modifiers: DiagnosticMessage = diag(
            2687,
            DiagnosticCategory::Error,
            "All_declarations_of_0_must_have_identical_modifiers_2687",
            "All declarations of '{0}' must have identical modifiers.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_type_definition_file_for_0: DiagnosticMessage = diag(
            2688,
            DiagnosticCategory::Error,
            "Cannot_find_type_definition_file_for_0_2688",
            "Cannot find type definition file for '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_extend_an_interface_0_Did_you_mean_implements: DiagnosticMessage = diag(
            2689,
            DiagnosticCategory::Error,
            "Cannot_extend_an_interface_0_Did_you_mean_implements_2689",
            "Cannot extend an interface '{0}'. Did you mean 'implements'?",
        );
    }
    lazy_static! {
        pub static ref _0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Did_you_mean_to_use_1_in_0: DiagnosticMessage = diag(
            2690,
            DiagnosticCategory::Error,
            "_0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Did_you_mean_to_use_1_in_0_2690",
            "'{0}' only refers to a type, but is being used as a value here. Did you mean to use '{1} in {0}'?",
        );
    }
    lazy_static! {
        pub static ref An_import_path_cannot_end_with_a_0_extension_Consider_importing_1_instead: DiagnosticMessage = diag(
            2691,
            DiagnosticCategory::Error,
            "An_import_path_cannot_end_with_a_0_extension_Consider_importing_1_instead_2691",
            "An import path cannot end with a '{0}' extension. Consider importing '{1}' instead.",
        );
    }
    lazy_static! {
        pub static ref _0_is_a_primitive_but_1_is_a_wrapper_object_Prefer_using_0_when_possible: DiagnosticMessage = diag(
            2692,
            DiagnosticCategory::Error,
            "_0_is_a_primitive_but_1_is_a_wrapper_object_Prefer_using_0_when_possible_2692",
            "'{0}' is a primitive, but '{1}' is a wrapper object. Prefer using '{0}' when possible.",
        );
    }
    lazy_static! {
        pub static ref _0_only_refers_to_a_type_but_is_being_used_as_a_value_here: DiagnosticMessage = diag(
            2693,
            DiagnosticCategory::Error,
            "_0_only_refers_to_a_type_but_is_being_used_as_a_value_here_2693",
            "'{0}' only refers to a type, but is being used as a value here.",
        );
    }
    lazy_static! {
        pub static ref Namespace_0_has_no_exported_member_1: DiagnosticMessage = diag(
            2694,
            DiagnosticCategory::Error,
            "Namespace_0_has_no_exported_member_1_2694",
            "Namespace '{0}' has no exported member '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Left_side_of_comma_operator_is_unused_and_has_no_side_effects: DiagnosticMessage = diag(
            2695,
            DiagnosticCategory::Error,
            "Left_side_of_comma_operator_is_unused_and_has_no_side_effects_2695",
            "Left side of comma operator is unused and has no side effects.",
        );
    }
    lazy_static! {
        pub static ref The_Object_type_is_assignable_to_very_few_other_types_Did_you_mean_to_use_the_any_type_instead: DiagnosticMessage = diag(
            2696,
            DiagnosticCategory::Error,
            "The_Object_type_is_assignable_to_very_few_other_types_Did_you_mean_to_use_the_any_type_instead_2696",
            "The 'Object' type is assignable to very few other types. Did you mean to use the 'any' type instead?",
        );
    }
    lazy_static! {
        pub static ref An_async_function_or_method_must_return_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option: DiagnosticMessage = diag(
            2697,
            DiagnosticCategory::Error,
            "An_async_function_or_method_must_return_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_in_2697",
            "An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.",
        );
    }
    lazy_static! {
        pub static ref Spread_types_may_only_be_created_from_object_types: DiagnosticMessage = diag(
            2698,
            DiagnosticCategory::Error,
            "Spread_types_may_only_be_created_from_object_types_2698",
            "Spread types may only be created from object types.",
        );
    }
    lazy_static! {
        pub static ref Static_property_0_conflicts_with_built_in_property_Function_0_of_constructor_function_1: DiagnosticMessage = diag(
            2699,
            DiagnosticCategory::Error,
            "Static_property_0_conflicts_with_built_in_property_Function_0_of_constructor_function_1_2699",
            "Static property '{0}' conflicts with built-in property 'Function.{0}' of constructor function '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Rest_types_may_only_be_created_from_object_types: DiagnosticMessage = diag(
            2700,
            DiagnosticCategory::Error,
            "Rest_types_may_only_be_created_from_object_types_2700",
            "Rest types may only be created from object types.",
        );
    }
    lazy_static! {
        pub static ref The_target_of_an_object_rest_assignment_must_be_a_variable_or_a_property_access: DiagnosticMessage = diag(
            2701,
            DiagnosticCategory::Error,
            "The_target_of_an_object_rest_assignment_must_be_a_variable_or_a_property_access_2701",
            "The target of an object rest assignment must be a variable or a property access.",
        );
    }
    lazy_static! {
        pub static ref _0_only_refers_to_a_type_but_is_being_used_as_a_namespace_here: DiagnosticMessage = diag(
            2702,
            DiagnosticCategory::Error,
            "_0_only_refers_to_a_type_but_is_being_used_as_a_namespace_here_2702",
            "'{0}' only refers to a type, but is being used as a namespace here.",
        );
    }
    lazy_static! {
        pub static ref The_operand_of_a_delete_operator_must_be_a_property_reference: DiagnosticMessage = diag(
            2703,
            DiagnosticCategory::Error,
            "The_operand_of_a_delete_operator_must_be_a_property_reference_2703",
            "The operand of a 'delete' operator must be a property reference.",
        );
    }
    lazy_static! {
        pub static ref The_operand_of_a_delete_operator_cannot_be_a_read_only_property: DiagnosticMessage = diag(
            2704,
            DiagnosticCategory::Error,
            "The_operand_of_a_delete_operator_cannot_be_a_read_only_property_2704",
            "The operand of a 'delete' operator cannot be a read-only property.",
        );
    }
    lazy_static! {
        pub static ref An_async_function_or_method_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option: DiagnosticMessage = diag(
            2705,
            DiagnosticCategory::Error,
            "An_async_function_or_method_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_de_2705",
            "An async function or method in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.",
        );
    }
    lazy_static! {
        pub static ref Required_type_parameters_may_not_follow_optional_type_parameters: DiagnosticMessage = diag(
            2706,
            DiagnosticCategory::Error,
            "Required_type_parameters_may_not_follow_optional_type_parameters_2706",
            "Required type parameters may not follow optional type parameters.",
        );
    }
    lazy_static! {
        pub static ref Generic_type_0_requires_between_1_and_2_type_arguments: DiagnosticMessage = diag(
            2707,
            DiagnosticCategory::Error,
            "Generic_type_0_requires_between_1_and_2_type_arguments_2707",
            "Generic type '{0}' requires between {1} and {2} type arguments.",
        );
    }
    lazy_static! {
        pub static ref Cannot_use_namespace_0_as_a_value: DiagnosticMessage = diag(
            2708,
            DiagnosticCategory::Error,
            "Cannot_use_namespace_0_as_a_value_2708",
            "Cannot use namespace '{0}' as a value.",
        );
    }
    lazy_static! {
        pub static ref Cannot_use_namespace_0_as_a_type: DiagnosticMessage = diag(
            2709,
            DiagnosticCategory::Error,
            "Cannot_use_namespace_0_as_a_type_2709",
            "Cannot use namespace '{0}' as a type.",
        );
    }
    lazy_static! {
        pub static ref _0_are_specified_twice_The_attribute_named_0_will_be_overwritten: DiagnosticMessage = diag(
            2710,
            DiagnosticCategory::Error,
            "_0_are_specified_twice_The_attribute_named_0_will_be_overwritten_2710",
            "'{0}' are specified twice. The attribute named '{0}' will be overwritten.",
        );
    }
    lazy_static! {
        pub static ref A_dynamic_import_call_returns_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option: DiagnosticMessage = diag(
            2711,
            DiagnosticCategory::Error,
            "A_dynamic_import_call_returns_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES20_2711",
            "A dynamic import call returns a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.",
        );
    }
    lazy_static! {
        pub static ref A_dynamic_import_call_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option: DiagnosticMessage = diag(
            2712,
            DiagnosticCategory::Error,
            "A_dynamic_import_call_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declarat_2712",
            "A dynamic import call in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.",
        );
    }
    lazy_static! {
        pub static ref Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_property_1_in_0_with_0_1: DiagnosticMessage = diag(
            2713,
            DiagnosticCategory::Error,
            "Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_p_2713",
            "Cannot access '{0}.{1}' because '{0}' is a type, but not a namespace. Did you mean to retrieve the type of the property '{1}' in '{0}' with '{0}[\"{1}\"]'?",
        );
    }
    lazy_static! {
        pub static ref The_expression_of_an_export_assignment_must_be_an_identifier_or_qualified_name_in_an_ambient_context: DiagnosticMessage = diag(
            2714,
            DiagnosticCategory::Error,
            "The_expression_of_an_export_assignment_must_be_an_identifier_or_qualified_name_in_an_ambient_context_2714",
            "The expression of an export assignment must be an identifier or qualified name in an ambient context.",
        );
    }
    lazy_static! {
        pub static ref Abstract_property_0_in_class_1_cannot_be_accessed_in_the_constructor: DiagnosticMessage = diag(
            2715,
            DiagnosticCategory::Error,
            "Abstract_property_0_in_class_1_cannot_be_accessed_in_the_constructor_2715",
            "Abstract property '{0}' in class '{1}' cannot be accessed in the constructor.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_has_a_circular_default: DiagnosticMessage = diag(
            2716,
            DiagnosticCategory::Error,
            "Type_parameter_0_has_a_circular_default_2716",
            "Type parameter '{0}' has a circular default.",
        );
    }
    lazy_static! {
        pub static ref Subsequent_property_declarations_must_have_the_same_type_Property_0_must_be_of_type_1_but_here_has_type_2: DiagnosticMessage = diag(
            2717,
            DiagnosticCategory::Error,
            "Subsequent_property_declarations_must_have_the_same_type_Property_0_must_be_of_type_1_but_here_has_t_2717",
            "Subsequent property declarations must have the same type.  Property '{0}' must be of type '{1}', but here has type '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_property_0: DiagnosticMessage = diag(
            2718,
            DiagnosticCategory::Error,
            "Duplicate_property_0_2718",
            "Duplicate property '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_assignable_to_type_1_Two_different_types_with_this_name_exist_but_they_are_unrelated: DiagnosticMessage = diag(
            2719,
            DiagnosticCategory::Error,
            "Type_0_is_not_assignable_to_type_1_Two_different_types_with_this_name_exist_but_they_are_unrelated_2719",
            "Type '{0}' is not assignable to type '{1}'. Two different types with this name exist, but they are unrelated.",
        );
    }
    lazy_static! {
        pub static ref Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclass: DiagnosticMessage = diag(
            2720,
            DiagnosticCategory::Error,
            "Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclas_2720",
            "Class '{0}' incorrectly implements class '{1}'. Did you mean to extend '{1}' and inherit its members as a subclass?",
        );
    }
    lazy_static! {
        pub static ref Cannot_invoke_an_object_which_is_possibly_null: DiagnosticMessage = diag(
            2721,
            DiagnosticCategory::Error,
            "Cannot_invoke_an_object_which_is_possibly_null_2721",
            "Cannot invoke an object which is possibly 'null'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_invoke_an_object_which_is_possibly_undefined: DiagnosticMessage = diag(
            2722,
            DiagnosticCategory::Error,
            "Cannot_invoke_an_object_which_is_possibly_undefined_2722",
            "Cannot invoke an object which is possibly 'undefined'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_invoke_an_object_which_is_possibly_null_or_undefined: DiagnosticMessage = diag(
            2723,
            DiagnosticCategory::Error,
            "Cannot_invoke_an_object_which_is_possibly_null_or_undefined_2723",
            "Cannot invoke an object which is possibly 'null' or 'undefined'.",
        );
    }
    lazy_static! {
        pub static ref _0_has_no_exported_member_named_1_Did_you_mean_2: DiagnosticMessage = diag(
            2724,
            DiagnosticCategory::Error,
            "_0_has_no_exported_member_named_1_Did_you_mean_2_2724",
            "'{0}' has no exported member named '{1}'. Did you mean '{2}'?",
        );
    }
    lazy_static! {
        pub static ref Class_name_cannot_be_Object_when_targeting_ES5_with_module_0: DiagnosticMessage = diag(
            2725,
            DiagnosticCategory::Error,
            "Class_name_cannot_be_Object_when_targeting_ES5_with_module_0_2725",
            "Class name cannot be 'Object' when targeting ES5 with module {0}.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_lib_definition_for_0: DiagnosticMessage = diag(
            2726,
            DiagnosticCategory::Error,
            "Cannot_find_lib_definition_for_0_2726",
            "Cannot find lib definition for '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_lib_definition_for_0_Did_you_mean_1: DiagnosticMessage = diag(
            2727,
            DiagnosticCategory::Error,
            "Cannot_find_lib_definition_for_0_Did_you_mean_1_2727",
            "Cannot find lib definition for '{0}'. Did you mean '{1}'?",
        );
    }
    lazy_static! {
        pub static ref _0_is_declared_here: DiagnosticMessage = diag(
            2728,
            DiagnosticCategory::Message,
            "_0_is_declared_here_2728",
            "'{0}' is declared here.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_used_before_its_initialization: DiagnosticMessage = diag(
            2729,
            DiagnosticCategory::Error,
            "Property_0_is_used_before_its_initialization_2729",
            "Property '{0}' is used before its initialization.",
        );
    }
    lazy_static! {
        pub static ref An_arrow_function_cannot_have_a_this_parameter: DiagnosticMessage = diag(
            2730,
            DiagnosticCategory::Error,
            "An_arrow_function_cannot_have_a_this_parameter_2730",
            "An arrow function cannot have a 'this' parameter.",
        );
    }
    lazy_static! {
        pub static ref Implicit_conversion_of_a_symbol_to_a_string_will_fail_at_runtime_Consider_wrapping_this_expression_in_String: DiagnosticMessage = diag(
            2731,
            DiagnosticCategory::Error,
            "Implicit_conversion_of_a_symbol_to_a_string_will_fail_at_runtime_Consider_wrapping_this_expression_i_2731",
            "Implicit conversion of a 'symbol' to a 'string' will fail at runtime. Consider wrapping this expression in 'String(...)'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_module_0_Consider_using_resolveJsonModule_to_import_module_with_json_extension: DiagnosticMessage = diag(
            2732,
            DiagnosticCategory::Error,
            "Cannot_find_module_0_Consider_using_resolveJsonModule_to_import_module_with_json_extension_2732",
            "Cannot find module '{0}'. Consider using '--resolveJsonModule' to import module with '.json' extension.",
        );
    }
    lazy_static! {
        pub static ref Property_0_was_also_declared_here: DiagnosticMessage = diag(
            2733,
            DiagnosticCategory::Error,
            "Property_0_was_also_declared_here_2733",
            "Property '{0}' was also declared here.",
        );
    }
    lazy_static! {
        pub static ref Are_you_missing_a_semicolon: DiagnosticMessage = diag(
            2734,
            DiagnosticCategory::Error,
            "Are_you_missing_a_semicolon_2734",
            "Are you missing a semicolon?",
        );
    }
    lazy_static! {
        pub static ref Did_you_mean_for_0_to_be_constrained_to_type_new_args_Colon_any_1: DiagnosticMessage = diag(
            2735,
            DiagnosticCategory::Error,
            "Did_you_mean_for_0_to_be_constrained_to_type_new_args_Colon_any_1_2735",
            "Did you mean for '{0}' to be constrained to type 'new (...args: any[]) => {1}'?",
        );
    }
    lazy_static! {
        pub static ref Operator_0_cannot_be_applied_to_type_1: DiagnosticMessage = diag(
            2736,
            DiagnosticCategory::Error,
            "Operator_0_cannot_be_applied_to_type_1_2736",
            "Operator '{0}' cannot be applied to type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref BigInt_literals_are_not_available_when_targeting_lower_than_ES2020: DiagnosticMessage = diag(
            2737,
            DiagnosticCategory::Error,
            "BigInt_literals_are_not_available_when_targeting_lower_than_ES2020_2737",
            "BigInt literals are not available when targeting lower than ES2020.",
        );
    }
    lazy_static! {
        pub static ref An_outer_value_of_this_is_shadowed_by_this_container: DiagnosticMessage = diag(
            2738,
            DiagnosticCategory::Message,
            "An_outer_value_of_this_is_shadowed_by_this_container_2738",
            "An outer value of 'this' is shadowed by this container.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_missing_the_following_properties_from_type_1_Colon_2: DiagnosticMessage = diag(
            2739,
            DiagnosticCategory::Error,
            "Type_0_is_missing_the_following_properties_from_type_1_Colon_2_2739",
            "Type '{0}' is missing the following properties from type '{1}': {2}",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_missing_the_following_properties_from_type_1_Colon_2_and_3_more: DiagnosticMessage = diag(
            2740,
            DiagnosticCategory::Error,
            "Type_0_is_missing_the_following_properties_from_type_1_Colon_2_and_3_more_2740",
            "Type '{0}' is missing the following properties from type '{1}': {2}, and {3} more.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_missing_in_type_1_but_required_in_type_2: DiagnosticMessage = diag(
            2741,
            DiagnosticCategory::Error,
            "Property_0_is_missing_in_type_1_but_required_in_type_2_2741",
            "Property '{0}' is missing in type '{1}' but required in type '{2}'.",
        );
    }
    lazy_static! {
        pub static ref The_inferred_type_of_0_cannot_be_named_without_a_reference_to_1_This_is_likely_not_portable_A_type_annotation_is_necessary: DiagnosticMessage = diag(
            2742,
            DiagnosticCategory::Error,
            "The_inferred_type_of_0_cannot_be_named_without_a_reference_to_1_This_is_likely_not_portable_A_type_a_2742",
            "The inferred type of '{0}' cannot be named without a reference to '{1}'. This is likely not portable. A type annotation is necessary.",
        );
    }
    lazy_static! {
        pub static ref No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments: DiagnosticMessage = diag(
            2743,
            DiagnosticCategory::Error,
            "No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments_2743",
            "No overload expects {0} type arguments, but overloads do exist that expect either {1} or {2} type arguments.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_defaults_can_only_reference_previously_declared_type_parameters: DiagnosticMessage = diag(
            2744,
            DiagnosticCategory::Error,
            "Type_parameter_defaults_can_only_reference_previously_declared_type_parameters_2744",
            "Type parameter defaults can only reference previously declared type parameters.",
        );
    }
    lazy_static! {
        pub static ref This_JSX_tag_s_0_prop_expects_type_1_which_requires_multiple_children_but_only_a_single_child_was_provided: DiagnosticMessage = diag(
            2745,
            DiagnosticCategory::Error,
            "This_JSX_tag_s_0_prop_expects_type_1_which_requires_multiple_children_but_only_a_single_child_was_pr_2745",
            "This JSX tag's '{0}' prop expects type '{1}' which requires multiple children, but only a single child was provided.",
        );
    }
    lazy_static! {
        pub static ref This_JSX_tag_s_0_prop_expects_a_single_child_of_type_1_but_multiple_children_were_provided: DiagnosticMessage = diag(
            2746,
            DiagnosticCategory::Error,
            "This_JSX_tag_s_0_prop_expects_a_single_child_of_type_1_but_multiple_children_were_provided_2746",
            "This JSX tag's '{0}' prop expects a single child of type '{1}', but multiple children were provided.",
        );
    }
    lazy_static! {
        pub static ref _0_components_don_t_accept_text_as_child_elements_Text_in_JSX_has_the_type_string_but_the_expected_type_of_1_is_2: DiagnosticMessage = diag(
            2747,
            DiagnosticCategory::Error,
            "_0_components_don_t_accept_text_as_child_elements_Text_in_JSX_has_the_type_string_but_the_expected_t_2747",
            "'{0}' components don't accept text as child elements. Text in JSX has the type 'string', but the expected type of '{1}' is '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_access_ambient_const_enums_when_the_isolatedModules_flag_is_provided: DiagnosticMessage = diag(
            2748,
            DiagnosticCategory::Error,
            "Cannot_access_ambient_const_enums_when_the_isolatedModules_flag_is_provided_2748",
            "Cannot access ambient const enums when the '--isolatedModules' flag is provided.",
        );
    }
    lazy_static! {
        pub static ref _0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0: DiagnosticMessage = diag(
            2749,
            DiagnosticCategory::Error,
            "_0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0_2749",
            "'{0}' refers to a value, but is being used as a type here. Did you mean 'typeof {0}'?",
        );
    }
    lazy_static! {
        pub static ref The_implementation_signature_is_declared_here: DiagnosticMessage = diag(
            2750,
            DiagnosticCategory::Error,
            "The_implementation_signature_is_declared_here_2750",
            "The implementation signature is declared here.",
        );
    }
    lazy_static! {
        pub static ref Circularity_originates_in_type_at_this_location: DiagnosticMessage = diag(
            2751,
            DiagnosticCategory::Error,
            "Circularity_originates_in_type_at_this_location_2751",
            "Circularity originates in type at this location.",
        );
    }
    lazy_static! {
        pub static ref The_first_export_default_is_here: DiagnosticMessage = diag(
            2752,
            DiagnosticCategory::Error,
            "The_first_export_default_is_here_2752",
            "The first export default is here.",
        );
    }
    lazy_static! {
        pub static ref Another_export_default_is_here: DiagnosticMessage = diag(
            2753,
            DiagnosticCategory::Error,
            "Another_export_default_is_here_2753",
            "Another export default is here.",
        );
    }
    lazy_static! {
        pub static ref super_may_not_use_type_arguments: DiagnosticMessage = diag(
            2754,
            DiagnosticCategory::Error,
            "super_may_not_use_type_arguments_2754",
            "'super' may not use type arguments.",
        );
    }
    lazy_static! {
        pub static ref No_constituent_of_type_0_is_callable: DiagnosticMessage = diag(
            2755,
            DiagnosticCategory::Error,
            "No_constituent_of_type_0_is_callable_2755",
            "No constituent of type '{0}' is callable.",
        );
    }
    lazy_static! {
        pub static ref Not_all_constituents_of_type_0_are_callable: DiagnosticMessage = diag(
            2756,
            DiagnosticCategory::Error,
            "Not_all_constituents_of_type_0_are_callable_2756",
            "Not all constituents of type '{0}' are callable.",
        );
    }
    lazy_static! {
        pub static ref Type_0_has_no_call_signatures: DiagnosticMessage = diag(
            2757,
            DiagnosticCategory::Error,
            "Type_0_has_no_call_signatures_2757",
            "Type '{0}' has no call signatures.",
        );
    }
    lazy_static! {
        pub static ref Each_member_of_the_union_type_0_has_signatures_but_none_of_those_signatures_are_compatible_with_each_other: DiagnosticMessage = diag(
            2758,
            DiagnosticCategory::Error,
            "Each_member_of_the_union_type_0_has_signatures_but_none_of_those_signatures_are_compatible_with_each_2758",
            "Each member of the union type '{0}' has signatures, but none of those signatures are compatible with each other.",
        );
    }
    lazy_static! {
        pub static ref No_constituent_of_type_0_is_constructable: DiagnosticMessage = diag(
            2759,
            DiagnosticCategory::Error,
            "No_constituent_of_type_0_is_constructable_2759",
            "No constituent of type '{0}' is constructable.",
        );
    }
    lazy_static! {
        pub static ref Not_all_constituents_of_type_0_are_constructable: DiagnosticMessage = diag(
            2760,
            DiagnosticCategory::Error,
            "Not_all_constituents_of_type_0_are_constructable_2760",
            "Not all constituents of type '{0}' are constructable.",
        );
    }
    lazy_static! {
        pub static ref Type_0_has_no_construct_signatures: DiagnosticMessage = diag(
            2761,
            DiagnosticCategory::Error,
            "Type_0_has_no_construct_signatures_2761",
            "Type '{0}' has no construct signatures.",
        );
    }
    lazy_static! {
        pub static ref Each_member_of_the_union_type_0_has_construct_signatures_but_none_of_those_signatures_are_compatible_with_each_other: DiagnosticMessage = diag(
            2762,
            DiagnosticCategory::Error,
            "Each_member_of_the_union_type_0_has_construct_signatures_but_none_of_those_signatures_are_compatible_2762",
            "Each member of the union type '{0}' has construct signatures, but none of those signatures are compatible with each other.",
        );
    }
    lazy_static! {
        pub static ref Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_for_of_will_always_send_0: DiagnosticMessage = diag(
            2763,
            DiagnosticCategory::Error,
            "Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_for_of_will_always_s_2763",
            "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but for-of will always send '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_spread_will_always_send_0: DiagnosticMessage = diag(
            2764,
            DiagnosticCategory::Error,
            "Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_spread_will_al_2764",
            "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but array spread will always send '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_destructuring_will_always_send_0: DiagnosticMessage = diag(
            2765,
            DiagnosticCategory::Error,
            "Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_destructuring__2765",
            "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but array destructuring will always send '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_delegate_iteration_to_value_because_the_next_method_of_its_iterator_expects_type_1_but_the_containing_generator_will_always_send_0: DiagnosticMessage = diag(
            2766,
            DiagnosticCategory::Error,
            "Cannot_delegate_iteration_to_value_because_the_next_method_of_its_iterator_expects_type_1_but_the_co_2766",
            "Cannot delegate iteration to value because the 'next' method of its iterator expects type '{1}', but the containing generator will always send '{0}'.",
        );
    }
    lazy_static! {
        pub static ref The_0_property_of_an_iterator_must_be_a_method: DiagnosticMessage = diag(
            2767,
            DiagnosticCategory::Error,
            "The_0_property_of_an_iterator_must_be_a_method_2767",
            "The '{0}' property of an iterator must be a method.",
        );
    }
    lazy_static! {
        pub static ref The_0_property_of_an_async_iterator_must_be_a_method: DiagnosticMessage = diag(
            2768,
            DiagnosticCategory::Error,
            "The_0_property_of_an_async_iterator_must_be_a_method_2768",
            "The '{0}' property of an async iterator must be a method.",
        );
    }
    lazy_static! {
        pub static ref No_overload_matches_this_call: DiagnosticMessage = diag(
            2769,
            DiagnosticCategory::Error,
            "No_overload_matches_this_call_2769",
            "No overload matches this call.",
        );
    }
    lazy_static! {
        pub static ref The_last_overload_gave_the_following_error: DiagnosticMessage = diag(
            2770,
            DiagnosticCategory::Error,
            "The_last_overload_gave_the_following_error_2770",
            "The last overload gave the following error.",
        );
    }
    lazy_static! {
        pub static ref The_last_overload_is_declared_here: DiagnosticMessage = diag(
            2771,
            DiagnosticCategory::Error,
            "The_last_overload_is_declared_here_2771",
            "The last overload is declared here.",
        );
    }
    lazy_static! {
        pub static ref Overload_0_of_1_2_gave_the_following_error: DiagnosticMessage = diag(
            2772,
            DiagnosticCategory::Error,
            "Overload_0_of_1_2_gave_the_following_error_2772",
            "Overload {0} of {1}, '{2}', gave the following error.",
        );
    }
    lazy_static! {
        pub static ref Did_you_forget_to_use_await: DiagnosticMessage = diag(
            2773,
            DiagnosticCategory::Error,
            "Did_you_forget_to_use_await_2773",
            "Did you forget to use 'await'?",
        );
    }
    lazy_static! {
        pub static ref This_condition_will_always_return_true_since_this_function_is_always_defined_Did_you_mean_to_call_it_instead: DiagnosticMessage = diag(
            2774,
            DiagnosticCategory::Error,
            "This_condition_will_always_return_true_since_this_function_is_always_defined_Did_you_mean_to_call_it_2774",
            "This condition will always return true since this function is always defined. Did you mean to call it instead?",
        );
    }
    lazy_static! {
        pub static ref Assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation: DiagnosticMessage = diag(
            2775,
            DiagnosticCategory::Error,
            "Assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation_2775",
            "Assertions require every name in the call target to be declared with an explicit type annotation.",
        );
    }
    lazy_static! {
        pub static ref Assertions_require_the_call_target_to_be_an_identifier_or_qualified_name: DiagnosticMessage = diag(
            2776,
            DiagnosticCategory::Error,
            "Assertions_require_the_call_target_to_be_an_identifier_or_qualified_name_2776",
            "Assertions require the call target to be an identifier or qualified name.",
        );
    }
    lazy_static! {
        pub static ref The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access: DiagnosticMessage = diag(
            2777,
            DiagnosticCategory::Error,
            "The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access_2777",
            "The operand of an increment or decrement operator may not be an optional property access.",
        );
    }
    lazy_static! {
        pub static ref The_target_of_an_object_rest_assignment_may_not_be_an_optional_property_access: DiagnosticMessage = diag(
            2778,
            DiagnosticCategory::Error,
            "The_target_of_an_object_rest_assignment_may_not_be_an_optional_property_access_2778",
            "The target of an object rest assignment may not be an optional property access.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access: DiagnosticMessage = diag(
            2779,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access_2779",
            "The left-hand side of an assignment expression may not be an optional property access.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_a_for_in_statement_may_not_be_an_optional_property_access: DiagnosticMessage = diag(
            2780,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_a_for_in_statement_may_not_be_an_optional_property_access_2780",
            "The left-hand side of a 'for...in' statement may not be an optional property access.",
        );
    }
    lazy_static! {
        pub static ref The_left_hand_side_of_a_for_of_statement_may_not_be_an_optional_property_access: DiagnosticMessage = diag(
            2781,
            DiagnosticCategory::Error,
            "The_left_hand_side_of_a_for_of_statement_may_not_be_an_optional_property_access_2781",
            "The left-hand side of a 'for...of' statement may not be an optional property access.",
        );
    }
    lazy_static! {
        pub static ref _0_needs_an_explicit_type_annotation: DiagnosticMessage = diag(
            2782,
            DiagnosticCategory::Message,
            "_0_needs_an_explicit_type_annotation_2782",
            "'{0}' needs an explicit type annotation.",
        );
    }
    lazy_static! {
        pub static ref _0_is_specified_more_than_once_so_this_usage_will_be_overwritten: DiagnosticMessage = diag(
            2783,
            DiagnosticCategory::Error,
            "_0_is_specified_more_than_once_so_this_usage_will_be_overwritten_2783",
            "'{0}' is specified more than once, so this usage will be overwritten.",
        );
    }
    lazy_static! {
        pub static ref get_and_set_accessors_cannot_declare_this_parameters: DiagnosticMessage = diag(
            2784,
            DiagnosticCategory::Error,
            "get_and_set_accessors_cannot_declare_this_parameters_2784",
            "'get' and 'set' accessors cannot declare 'this' parameters.",
        );
    }
    lazy_static! {
        pub static ref This_spread_always_overwrites_this_property: DiagnosticMessage = diag(
            2785,
            DiagnosticCategory::Error,
            "This_spread_always_overwrites_this_property_2785",
            "This spread always overwrites this property.",
        );
    }
    lazy_static! {
        pub static ref _0_cannot_be_used_as_a_JSX_component: DiagnosticMessage = diag(
            2786,
            DiagnosticCategory::Error,
            "_0_cannot_be_used_as_a_JSX_component_2786",
            "'{0}' cannot be used as a JSX component.",
        );
    }
    lazy_static! {
        pub static ref Its_return_type_0_is_not_a_valid_JSX_element: DiagnosticMessage = diag(
            2787,
            DiagnosticCategory::Error,
            "Its_return_type_0_is_not_a_valid_JSX_element_2787",
            "Its return type '{0}' is not a valid JSX element.",
        );
    }
    lazy_static! {
        pub static ref Its_instance_type_0_is_not_a_valid_JSX_element: DiagnosticMessage = diag(
            2788,
            DiagnosticCategory::Error,
            "Its_instance_type_0_is_not_a_valid_JSX_element_2788",
            "Its instance type '{0}' is not a valid JSX element.",
        );
    }
    lazy_static! {
        pub static ref Its_element_type_0_is_not_a_valid_JSX_element: DiagnosticMessage = diag(
            2789,
            DiagnosticCategory::Error,
            "Its_element_type_0_is_not_a_valid_JSX_element_2789",
            "Its element type '{0}' is not a valid JSX element.",
        );
    }
    lazy_static! {
        pub static ref The_operand_of_a_delete_operator_must_be_optional: DiagnosticMessage = diag(
            2790,
            DiagnosticCategory::Error,
            "The_operand_of_a_delete_operator_must_be_optional_2790",
            "The operand of a 'delete' operator must be optional.",
        );
    }
    lazy_static! {
        pub static ref Exponentiation_cannot_be_performed_on_bigint_values_unless_the_target_option_is_set_to_es2016_or_later: DiagnosticMessage = diag(
            2791,
            DiagnosticCategory::Error,
            "Exponentiation_cannot_be_performed_on_bigint_values_unless_the_target_option_is_set_to_es2016_or_lat_2791",
            "Exponentiation cannot be performed on 'bigint' values unless the 'target' option is set to 'es2016' or later.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_node_or_to_add_aliases_to_the_paths_option: DiagnosticMessage = diag(
            2792,
            DiagnosticCategory::Error,
            "Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_node_or_to_add_aliases_to_th_2792",
            "Cannot find module '{0}'. Did you mean to set the 'moduleResolution' option to 'node', or to add aliases to the 'paths' option?",
        );
    }
    lazy_static! {
        pub static ref The_call_would_have_succeeded_against_this_implementation_but_implementation_signatures_of_overloads_are_not_externally_visible: DiagnosticMessage = diag(
            2793,
            DiagnosticCategory::Error,
            "The_call_would_have_succeeded_against_this_implementation_but_implementation_signatures_of_overloads_2793",
            "The call would have succeeded against this implementation, but implementation signatures of overloads are not externally visible.",
        );
    }
    lazy_static! {
        pub static ref Expected_0_arguments_but_got_1_Did_you_forget_to_include_void_in_your_type_argument_to_Promise: DiagnosticMessage = diag(
            2794,
            DiagnosticCategory::Error,
            "Expected_0_arguments_but_got_1_Did_you_forget_to_include_void_in_your_type_argument_to_Promise_2794",
            "Expected {0} arguments, but got {1}. Did you forget to include 'void' in your type argument to 'Promise'?",
        );
    }
    lazy_static! {
        pub static ref The_intrinsic_keyword_can_only_be_used_to_declare_compiler_provided_intrinsic_types: DiagnosticMessage = diag(
            2795,
            DiagnosticCategory::Error,
            "The_intrinsic_keyword_can_only_be_used_to_declare_compiler_provided_intrinsic_types_2795",
            "The 'intrinsic' keyword can only be used to declare compiler provided intrinsic types.",
        );
    }
    lazy_static! {
        pub static ref It_is_likely_that_you_are_missing_a_comma_to_separate_these_two_template_expressions_They_form_a_tagged_template_expression_which_cannot_be_invoked: DiagnosticMessage = diag(
            2796,
            DiagnosticCategory::Error,
            "It_is_likely_that_you_are_missing_a_comma_to_separate_these_two_template_expressions_They_form_a_tag_2796",
            "It is likely that you are missing a comma to separate these two template expressions. They form a tagged template expression which cannot be invoked.",
        );
    }
    lazy_static! {
        pub static ref A_mixin_class_that_extends_from_a_type_variable_containing_an_abstract_construct_signature_must_also_be_declared_abstract: DiagnosticMessage = diag(
            2797,
            DiagnosticCategory::Error,
            "A_mixin_class_that_extends_from_a_type_variable_containing_an_abstract_construct_signature_must_also_2797",
            "A mixin class that extends from a type variable containing an abstract construct signature must also be declared 'abstract'.",
        );
    }
    lazy_static! {
        pub static ref The_declaration_was_marked_as_deprecated_here: DiagnosticMessage = diag(
            2798,
            DiagnosticCategory::Error,
            "The_declaration_was_marked_as_deprecated_here_2798",
            "The declaration was marked as deprecated here.",
        );
    }
    lazy_static! {
        pub static ref Type_produces_a_tuple_type_that_is_too_large_to_represent: DiagnosticMessage = diag(
            2799,
            DiagnosticCategory::Error,
            "Type_produces_a_tuple_type_that_is_too_large_to_represent_2799",
            "Type produces a tuple type that is too large to represent.",
        );
    }
    lazy_static! {
        pub static ref Expression_produces_a_tuple_type_that_is_too_large_to_represent: DiagnosticMessage = diag(
            2800,
            DiagnosticCategory::Error,
            "Expression_produces_a_tuple_type_that_is_too_large_to_represent_2800",
            "Expression produces a tuple type that is too large to represent.",
        );
    }
    lazy_static! {
        pub static ref This_condition_will_always_return_true_since_this_0_is_always_defined: DiagnosticMessage = diag(
            2801,
            DiagnosticCategory::Error,
            "This_condition_will_always_return_true_since_this_0_is_always_defined_2801",
            "This condition will always return true since this '{0}' is always defined.",
        );
    }
    lazy_static! {
        pub static ref Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es2015_or_higher: DiagnosticMessage = diag(
            2802,
            DiagnosticCategory::Error,
            "Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es201_2802",
            "Type '{0}' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.",
        );
    }
    lazy_static! {
        pub static ref Cannot_assign_to_private_method_0_Private_methods_are_not_writable: DiagnosticMessage = diag(
            2803,
            DiagnosticCategory::Error,
            "Cannot_assign_to_private_method_0_Private_methods_are_not_writable_2803",
            "Cannot assign to private method '{0}'. Private methods are not writable.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_identifier_0_Static_and_instance_elements_cannot_share_the_same_private_name: DiagnosticMessage = diag(
            2804,
            DiagnosticCategory::Error,
            "Duplicate_identifier_0_Static_and_instance_elements_cannot_share_the_same_private_name_2804",
            "Duplicate identifier '{0}'. Static and instance elements cannot share the same private name.",
        );
    }
    lazy_static! {
        pub static ref Static_fields_with_private_names_can_t_have_initializers_when_the_useDefineForClassFields_flag_is_not_specified_with_a_target_of_esnext_Consider_adding_the_useDefineForClassFields_flag: DiagnosticMessage = diag(
            2805,
            DiagnosticCategory::Error,
            "Static_fields_with_private_names_can_t_have_initializers_when_the_useDefineForClassFields_flag_is_no_2805",
            "Static fields with private names can't have initializers when the '--useDefineForClassFields' flag is not specified with a '--target' of 'esnext'. Consider adding the '--useDefineForClassFields' flag.",
        );
    }
    lazy_static! {
        pub static ref Private_accessor_was_defined_without_a_getter: DiagnosticMessage = diag(
            2806,
            DiagnosticCategory::Error,
            "Private_accessor_was_defined_without_a_getter_2806",
            "Private accessor was defined without a getter.",
        );
    }
    lazy_static! {
        pub static ref This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0: DiagnosticMessage = diag(
            2807,
            DiagnosticCategory::Error,
            "This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_o_2807",
            "This syntax requires an imported helper named '{1}' with {2} parameters, which is not compatible with the one in '{0}'. Consider upgrading your version of '{0}'.",
        );
    }
    lazy_static! {
        pub static ref A_get_accessor_must_be_at_least_as_accessible_as_the_setter: DiagnosticMessage = diag(
            2808,
            DiagnosticCategory::Error,
            "A_get_accessor_must_be_at_least_as_accessible_as_the_setter_2808",
            "A get accessor must be at least as accessible as the setter",
        );
    }
    lazy_static! {
        pub static ref Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_destructuring_assignment_you_might_need_to_wrap_the_the_whole_assignment_in_parentheses: DiagnosticMessage = diag(
            2809,
            DiagnosticCategory::Error,
            "Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_d_2809",
            "Declaration or statement expected. This '=' follows a block of statements, so if you intended to write a destructuring assignment, you might need to wrap the the whole assignment in parentheses.",
        );
    }
    lazy_static! {
        pub static ref Property_0_may_not_be_used_in_a_static_property_s_initializer_in_the_same_class_when_target_is_esnext_and_useDefineForClassFields_is_false: DiagnosticMessage = diag(
            2810,
            DiagnosticCategory::Error,
            "Property_0_may_not_be_used_in_a_static_property_s_initializer_in_the_same_class_when_target_is_esnex_2810",
            "Property '{0}' may not be used in a static property's initializer in the same class when 'target' is 'esnext' and 'useDefineForClassFields' is 'false'.",
        );
    }
    lazy_static! {
        pub static ref Initializer_for_property_0: DiagnosticMessage = diag(
            2811,
            DiagnosticCategory::Error,
            "Initializer_for_property_0_2811",
            "Initializer for property '{0}'",
        );
    }
    lazy_static! {
        pub static ref Property_0_does_not_exist_on_type_1_Try_changing_the_lib_compiler_option_to_include_dom: DiagnosticMessage = diag(
            2812,
            DiagnosticCategory::Error,
            "Property_0_does_not_exist_on_type_1_Try_changing_the_lib_compiler_option_to_include_dom_2812",
            "Property '{0}' does not exist on type '{1}'. Try changing the 'lib' compiler option to include 'dom'.",
        );
    }
    lazy_static! {
        pub static ref Class_declaration_cannot_implement_overload_list_for_0: DiagnosticMessage = diag(
            2813,
            DiagnosticCategory::Error,
            "Class_declaration_cannot_implement_overload_list_for_0_2813",
            "Class declaration cannot implement overload list for '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Function_with_bodies_can_only_merge_with_classes_that_are_ambient: DiagnosticMessage = diag(
            2814,
            DiagnosticCategory::Error,
            "Function_with_bodies_can_only_merge_with_classes_that_are_ambient_2814",
            "Function with bodies can only merge with classes that are ambient.",
        );
    }
    lazy_static! {
        pub static ref arguments_cannot_be_referenced_in_property_initializers: DiagnosticMessage = diag(
            2815,
            DiagnosticCategory::Error,
            "arguments_cannot_be_referenced_in_property_initializers_2815",
            "'arguments' cannot be referenced in property initializers.",
        );
    }
    lazy_static! {
        pub static ref Cannot_use_this_in_a_static_property_initializer_of_a_decorated_class: DiagnosticMessage = diag(
            2816,
            DiagnosticCategory::Error,
            "Cannot_use_this_in_a_static_property_initializer_of_a_decorated_class_2816",
            "Cannot use 'this' in a static property initializer of a decorated class.",
        );
    }
    lazy_static! {
        pub static ref Property_0_has_no_initializer_and_is_not_definitely_assigned_in_a_class_static_block: DiagnosticMessage = diag(
            2817,
            DiagnosticCategory::Error,
            "Property_0_has_no_initializer_and_is_not_definitely_assigned_in_a_class_static_block_2817",
            "Property '{0}' has no initializer and is not definitely assigned in a class static block.",
        );
    }
    lazy_static! {
        pub static ref Duplicate_identifier_0_Compiler_reserves_name_1_when_emitting_super_references_in_static_initializers: DiagnosticMessage = diag(
            2818,
            DiagnosticCategory::Error,
            "Duplicate_identifier_0_Compiler_reserves_name_1_when_emitting_super_references_in_static_initializer_2818",
            "Duplicate identifier '{0}'. Compiler reserves name '{1}' when emitting 'super' references in static initializers.",
        );
    }
    lazy_static! {
        pub static ref Namespace_name_cannot_be_0: DiagnosticMessage = diag(
            2819,
            DiagnosticCategory::Error,
            "Namespace_name_cannot_be_0_2819",
            "Namespace name cannot be '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Type_0_is_not_assignable_to_type_1_Did_you_mean_2: DiagnosticMessage = diag(
            2820,
            DiagnosticCategory::Error,
            "Type_0_is_not_assignable_to_type_1_Did_you_mean_2_2820",
            "Type '{0}' is not assignable to type '{1}'. Did you mean '{2}'?",
        );
    }
    lazy_static! {
        pub static ref Import_assertions_are_only_supported_when_the_module_option_is_set_to_esnext: DiagnosticMessage = diag(
            2821,
            DiagnosticCategory::Error,
            "Import_assertions_are_only_supported_when_the_module_option_is_set_to_esnext_2821",
            "Import assertions are only supported when the '--module' option is set to 'esnext'.",
        );
    }
    lazy_static! {
        pub static ref Import_assertions_cannot_be_used_with_type_only_imports_or_exports: DiagnosticMessage = diag(
            2822,
            DiagnosticCategory::Error,
            "Import_assertions_cannot_be_used_with_type_only_imports_or_exports_2822",
            "Import assertions cannot be used with type-only imports or exports.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_namespace_0_Did_you_mean_1: DiagnosticMessage = diag(
            2833,
            DiagnosticCategory::Error,
            "Cannot_find_namespace_0_Did_you_mean_1_2833",
            "Cannot find namespace '{0}'. Did you mean '{1}'?",
        );
    }
    lazy_static! {
        pub static ref Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_node12_or_nodenext_Consider_adding_an_extension_to_the_import_path: DiagnosticMessage = diag(
            2834,
            DiagnosticCategory::Error,
            "Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_n_2834",
            "Relative import paths need explicit file extensions in EcmaScript imports when '--moduleResolution' is 'node12' or 'nodenext'. Consider adding an extension to the import path.",
        );
    }
    lazy_static! {
        pub static ref Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_node12_or_nodenext_Did_you_mean_0: DiagnosticMessage = diag(
            2835,
            DiagnosticCategory::Error,
            "Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_n_2835",
            "Relative import paths need explicit file extensions in EcmaScript imports when '--moduleResolution' is 'node12' or 'nodenext'. Did you mean '{0}'?",
        );
    }
    lazy_static! {
        pub static ref Import_declaration_0_is_using_private_name_1: DiagnosticMessage = diag(
            4000,
            DiagnosticCategory::Error,
            "Import_declaration_0_is_using_private_name_1_4000",
            "Import declaration '{0}' is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_of_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4002,
            DiagnosticCategory::Error,
            "Type_parameter_0_of_exported_class_has_or_is_using_private_name_1_4002",
            "Type parameter '{0}' of exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4004,
            DiagnosticCategory::Error,
            "Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1_4004",
            "Type parameter '{0}' of exported interface has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4006,
            DiagnosticCategory::Error,
            "Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1_4006",
            "Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4008,
            DiagnosticCategory::Error,
            "Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1_4008",
            "Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4010,
            DiagnosticCategory::Error,
            "Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1_4010",
            "Type parameter '{0}' of public static method from exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4012,
            DiagnosticCategory::Error,
            "Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1_4012",
            "Type parameter '{0}' of public method from exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4014,
            DiagnosticCategory::Error,
            "Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1_4014",
            "Type parameter '{0}' of method from exported interface has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_of_exported_function_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4016,
            DiagnosticCategory::Error,
            "Type_parameter_0_of_exported_function_has_or_is_using_private_name_1_4016",
            "Type parameter '{0}' of exported function has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Implements_clause_of_exported_class_0_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4019,
            DiagnosticCategory::Error,
            "Implements_clause_of_exported_class_0_has_or_is_using_private_name_1_4019",
            "Implements clause of exported class '{0}' has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref extends_clause_of_exported_class_0_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4020,
            DiagnosticCategory::Error,
            "extends_clause_of_exported_class_0_has_or_is_using_private_name_1_4020",
            "'extends' clause of exported class '{0}' has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref extends_clause_of_exported_class_has_or_is_using_private_name_0: DiagnosticMessage = diag(
            4021,
            DiagnosticCategory::Error,
            "extends_clause_of_exported_class_has_or_is_using_private_name_0_4021",
            "'extends' clause of exported class has or is using private name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref extends_clause_of_exported_interface_0_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4022,
            DiagnosticCategory::Error,
            "extends_clause_of_exported_interface_0_has_or_is_using_private_name_1_4022",
            "'extends' clause of exported interface '{0}' has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4023,
            DiagnosticCategory::Error,
            "Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4023",
            "Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Exported_variable_0_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4024,
            DiagnosticCategory::Error,
            "Exported_variable_0_has_or_is_using_name_1_from_private_module_2_4024",
            "Exported variable '{0}' has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Exported_variable_0_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4025,
            DiagnosticCategory::Error,
            "Exported_variable_0_has_or_is_using_private_name_1_4025",
            "Exported variable '{0}' has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4026,
            DiagnosticCategory::Error,
            "Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot__4026",
            "Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4027,
            DiagnosticCategory::Error,
            "Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4027",
            "Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Public_static_property_0_of_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4028,
            DiagnosticCategory::Error,
            "Public_static_property_0_of_exported_class_has_or_is_using_private_name_1_4028",
            "Public static property '{0}' of exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4029,
            DiagnosticCategory::Error,
            "Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_name_4029",
            "Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4030,
            DiagnosticCategory::Error,
            "Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4030",
            "Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Public_property_0_of_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4031,
            DiagnosticCategory::Error,
            "Public_property_0_of_exported_class_has_or_is_using_private_name_1_4031",
            "Public property '{0}' of exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4032,
            DiagnosticCategory::Error,
            "Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2_4032",
            "Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_of_exported_interface_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4033,
            DiagnosticCategory::Error,
            "Property_0_of_exported_interface_has_or_is_using_private_name_1_4033",
            "Property '{0}' of exported interface has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4034,
            DiagnosticCategory::Error,
            "Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_name_1_from_private_mod_4034",
            "Parameter type of public static setter '{0}' from exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4035,
            DiagnosticCategory::Error,
            "Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_private_name_1_4035",
            "Parameter type of public static setter '{0}' from exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4036,
            DiagnosticCategory::Error,
            "Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2_4036",
            "Parameter type of public setter '{0}' from exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4037,
            DiagnosticCategory::Error,
            "Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_private_name_1_4037",
            "Parameter type of public setter '{0}' from exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4038,
            DiagnosticCategory::Error,
            "Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_external_modul_4038",
            "Return type of public static getter '{0}' from exported class has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4039,
            DiagnosticCategory::Error,
            "Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_4039",
            "Return type of public static getter '{0}' from exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4040,
            DiagnosticCategory::Error,
            "Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_private_name_1_4040",
            "Return type of public static getter '{0}' from exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4041,
            DiagnosticCategory::Error,
            "Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_4041",
            "Return type of public getter '{0}' from exported class has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4042,
            DiagnosticCategory::Error,
            "Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2_4042",
            "Return type of public getter '{0}' from exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_getter_0_from_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4043,
            DiagnosticCategory::Error,
            "Return_type_of_public_getter_0_from_exported_class_has_or_is_using_private_name_1_4043",
            "Return type of public getter '{0}' from exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: DiagnosticMessage = diag(
            4044,
            DiagnosticCategory::Error,
            "Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_mod_4044",
            "Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0: DiagnosticMessage = diag(
            4045,
            DiagnosticCategory::Error,
            "Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0_4045",
            "Return type of constructor signature from exported interface has or is using private name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: DiagnosticMessage = diag(
            4046,
            DiagnosticCategory::Error,
            "Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4046",
            "Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0: DiagnosticMessage = diag(
            4047,
            DiagnosticCategory::Error,
            "Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0_4047",
            "Return type of call signature from exported interface has or is using private name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: DiagnosticMessage = diag(
            4048,
            DiagnosticCategory::Error,
            "Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4048",
            "Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0: DiagnosticMessage = diag(
            4049,
            DiagnosticCategory::Error,
            "Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0_4049",
            "Return type of index signature from exported interface has or is using private name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: DiagnosticMessage = diag(
            4050,
            DiagnosticCategory::Error,
            "Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module__4050",
            "Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: DiagnosticMessage = diag(
            4051,
            DiagnosticCategory::Error,
            "Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1_4051",
            "Return type of public static method from exported class has or is using name '{0}' from private module '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0: DiagnosticMessage = diag(
            4052,
            DiagnosticCategory::Error,
            "Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0_4052",
            "Return type of public static method from exported class has or is using private name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: DiagnosticMessage = diag(
            4053,
            DiagnosticCategory::Error,
            "Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_c_4053",
            "Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: DiagnosticMessage = diag(
            4054,
            DiagnosticCategory::Error,
            "Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1_4054",
            "Return type of public method from exported class has or is using name '{0}' from private module '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0: DiagnosticMessage = diag(
            4055,
            DiagnosticCategory::Error,
            "Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0_4055",
            "Return type of public method from exported class has or is using private name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1: DiagnosticMessage = diag(
            4056,
            DiagnosticCategory::Error,
            "Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4056",
            "Return type of method from exported interface has or is using name '{0}' from private module '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0: DiagnosticMessage = diag(
            4057,
            DiagnosticCategory::Error,
            "Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0_4057",
            "Return type of method from exported interface has or is using private name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: DiagnosticMessage = diag(
            4058,
            DiagnosticCategory::Error,
            "Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named_4058",
            "Return type of exported function has or is using name '{0}' from external module {1} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1: DiagnosticMessage = diag(
            4059,
            DiagnosticCategory::Error,
            "Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1_4059",
            "Return type of exported function has or is using name '{0}' from private module '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Return_type_of_exported_function_has_or_is_using_private_name_0: DiagnosticMessage = diag(
            4060,
            DiagnosticCategory::Error,
            "Return_type_of_exported_function_has_or_is_using_private_name_0_4060",
            "Return type of exported function has or is using private name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4061,
            DiagnosticCategory::Error,
            "Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_can_4061",
            "Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4062,
            DiagnosticCategory::Error,
            "Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2_4062",
            "Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4063,
            DiagnosticCategory::Error,
            "Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1_4063",
            "Parameter '{0}' of constructor from exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4064,
            DiagnosticCategory::Error,
            "Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_mod_4064",
            "Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4065,
            DiagnosticCategory::Error,
            "Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1_4065",
            "Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4066,
            DiagnosticCategory::Error,
            "Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4066",
            "Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4067,
            DiagnosticCategory::Error,
            "Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1_4067",
            "Parameter '{0}' of call signature from exported interface has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4068,
            DiagnosticCategory::Error,
            "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module__4068",
            "Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4069,
            DiagnosticCategory::Error,
            "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2_4069",
            "Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4070,
            DiagnosticCategory::Error,
            "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1_4070",
            "Parameter '{0}' of public static method from exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4071,
            DiagnosticCategory::Error,
            "Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_c_4071",
            "Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4072,
            DiagnosticCategory::Error,
            "Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2_4072",
            "Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4073,
            DiagnosticCategory::Error,
            "Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1_4073",
            "Parameter '{0}' of public method from exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4074,
            DiagnosticCategory::Error,
            "Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4074",
            "Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4075,
            DiagnosticCategory::Error,
            "Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1_4075",
            "Parameter '{0}' of method from exported interface has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4076,
            DiagnosticCategory::Error,
            "Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4076",
            "Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4077,
            DiagnosticCategory::Error,
            "Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2_4077",
            "Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_exported_function_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4078,
            DiagnosticCategory::Error,
            "Parameter_0_of_exported_function_has_or_is_using_private_name_1_4078",
            "Parameter '{0}' of exported function has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Exported_type_alias_0_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4081,
            DiagnosticCategory::Error,
            "Exported_type_alias_0_has_or_is_using_private_name_1_4081",
            "Exported type alias '{0}' has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Default_export_of_the_module_has_or_is_using_private_name_0: DiagnosticMessage = diag(
            4082,
            DiagnosticCategory::Error,
            "Default_export_of_the_module_has_or_is_using_private_name_0_4082",
            "Default export of the module has or is using private name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_of_exported_type_alias_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4083,
            DiagnosticCategory::Error,
            "Type_parameter_0_of_exported_type_alias_has_or_is_using_private_name_1_4083",
            "Type parameter '{0}' of exported type alias has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Exported_type_alias_0_has_or_is_using_private_name_1_from_module_2: DiagnosticMessage = diag(
            4084,
            DiagnosticCategory::Error,
            "Exported_type_alias_0_has_or_is_using_private_name_1_from_module_2_4084",
            "Exported type alias '{0}' has or is using private name '{1}' from module {2}.",
        );
    }
    lazy_static! {
        pub static ref Conflicting_definitions_for_0_found_at_1_and_2_Consider_installing_a_specific_version_of_this_library_to_resolve_the_conflict: DiagnosticMessage = diag(
            4090,
            DiagnosticCategory::Error,
            "Conflicting_definitions_for_0_found_at_1_and_2_Consider_installing_a_specific_version_of_this_librar_4090",
            "Conflicting definitions for '{0}' found at '{1}' and '{2}'. Consider installing a specific version of this library to resolve the conflict.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4091,
            DiagnosticCategory::Error,
            "Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4091",
            "Parameter '{0}' of index signature from exported interface has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4092,
            DiagnosticCategory::Error,
            "Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_private_name_1_4092",
            "Parameter '{0}' of index signature from exported interface has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_of_exported_class_expression_may_not_be_private_or_protected: DiagnosticMessage = diag(
            4094,
            DiagnosticCategory::Error,
            "Property_0_of_exported_class_expression_may_not_be_private_or_protected_4094",
            "Property '{0}' of exported class expression may not be private or protected.",
        );
    }
    lazy_static! {
        pub static ref Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4095,
            DiagnosticCategory::Error,
            "Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_4095",
            "Public static method '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4096,
            DiagnosticCategory::Error,
            "Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4096",
            "Public static method '{0}' of exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Public_static_method_0_of_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4097,
            DiagnosticCategory::Error,
            "Public_static_method_0_of_exported_class_has_or_is_using_private_name_1_4097",
            "Public static method '{0}' of exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Public_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4098,
            DiagnosticCategory::Error,
            "Public_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4098",
            "Public method '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Public_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4099,
            DiagnosticCategory::Error,
            "Public_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4099",
            "Public method '{0}' of exported class has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Public_method_0_of_exported_class_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4100,
            DiagnosticCategory::Error,
            "Public_method_0_of_exported_class_has_or_is_using_private_name_1_4100",
            "Public method '{0}' of exported class has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Method_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4101,
            DiagnosticCategory::Error,
            "Method_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2_4101",
            "Method '{0}' of exported interface has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Method_0_of_exported_interface_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4102,
            DiagnosticCategory::Error,
            "Method_0_of_exported_interface_has_or_is_using_private_name_1_4102",
            "Method '{0}' of exported interface has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_0_of_exported_mapped_object_type_is_using_private_name_1: DiagnosticMessage = diag(
            4103,
            DiagnosticCategory::Error,
            "Type_parameter_0_of_exported_mapped_object_type_is_using_private_name_1_4103",
            "Type parameter '{0}' of exported mapped object type is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1: DiagnosticMessage = diag(
            4104,
            DiagnosticCategory::Error,
            "The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1_4104",
            "The type '{0}' is 'readonly' and cannot be assigned to the mutable type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Private_or_protected_member_0_cannot_be_accessed_on_a_type_parameter: DiagnosticMessage = diag(
            4105,
            DiagnosticCategory::Error,
            "Private_or_protected_member_0_cannot_be_accessed_on_a_type_parameter_4105",
            "Private or protected member '{0}' cannot be accessed on a type parameter.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_accessor_has_or_is_using_private_name_1: DiagnosticMessage = diag(
            4106,
            DiagnosticCategory::Error,
            "Parameter_0_of_accessor_has_or_is_using_private_name_1_4106",
            "Parameter '{0}' of accessor has or is using private name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_accessor_has_or_is_using_name_1_from_private_module_2: DiagnosticMessage = diag(
            4107,
            DiagnosticCategory::Error,
            "Parameter_0_of_accessor_has_or_is_using_name_1_from_private_module_2_4107",
            "Parameter '{0}' of accessor has or is using name '{1}' from private module '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_of_accessor_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: DiagnosticMessage = diag(
            4108,
            DiagnosticCategory::Error,
            "Parameter_0_of_accessor_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4108",
            "Parameter '{0}' of accessor has or is using name '{1}' from external module '{2}' but cannot be named.",
        );
    }
    lazy_static! {
        pub static ref Type_arguments_for_0_circularly_reference_themselves: DiagnosticMessage = diag(
            4109,
            DiagnosticCategory::Error,
            "Type_arguments_for_0_circularly_reference_themselves_4109",
            "Type arguments for '{0}' circularly reference themselves.",
        );
    }
    lazy_static! {
        pub static ref Tuple_type_arguments_circularly_reference_themselves: DiagnosticMessage = diag(
            4110,
            DiagnosticCategory::Error,
            "Tuple_type_arguments_circularly_reference_themselves_4110",
            "Tuple type arguments circularly reference themselves.",
        );
    }
    lazy_static! {
        pub static ref Property_0_comes_from_an_index_signature_so_it_must_be_accessed_with_0: DiagnosticMessage = diag(
            4111,
            DiagnosticCategory::Error,
            "Property_0_comes_from_an_index_signature_so_it_must_be_accessed_with_0_4111",
            "Property '{0}' comes from an index signature, so it must be accessed with ['{0}'].",
        );
    }
    lazy_static! {
        pub static ref This_member_cannot_have_an_override_modifier_because_its_containing_class_0_does_not_extend_another_class: DiagnosticMessage = diag(
            4112,
            DiagnosticCategory::Error,
            "This_member_cannot_have_an_override_modifier_because_its_containing_class_0_does_not_extend_another__4112",
            "This member cannot have an 'override' modifier because its containing class '{0}' does not extend another class.",
        );
    }
    lazy_static! {
        pub static ref This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0: DiagnosticMessage = diag(
            4113,
            DiagnosticCategory::Error,
            "This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_4113",
            "This member cannot have an 'override' modifier because it is not declared in the base class '{0}'.",
        );
    }
    lazy_static! {
        pub static ref This_member_must_have_an_override_modifier_because_it_overrides_a_member_in_the_base_class_0: DiagnosticMessage = diag(
            4114,
            DiagnosticCategory::Error,
            "This_member_must_have_an_override_modifier_because_it_overrides_a_member_in_the_base_class_0_4114",
            "This member must have an 'override' modifier because it overrides a member in the base class '{0}'.",
        );
    }
    lazy_static! {
        pub static ref This_parameter_property_must_have_an_override_modifier_because_it_overrides_a_member_in_base_class_0: DiagnosticMessage = diag(
            4115,
            DiagnosticCategory::Error,
            "This_parameter_property_must_have_an_override_modifier_because_it_overrides_a_member_in_base_class_0_4115",
            "This parameter property must have an 'override' modifier because it overrides a member in base class '{0}'.",
        );
    }
    lazy_static! {
        pub static ref This_member_must_have_an_override_modifier_because_it_overrides_an_abstract_method_that_is_declared_in_the_base_class_0: DiagnosticMessage = diag(
            4116,
            DiagnosticCategory::Error,
            "This_member_must_have_an_override_modifier_because_it_overrides_an_abstract_method_that_is_declared__4116",
            "This member must have an 'override' modifier because it overrides an abstract method that is declared in the base class '{0}'.",
        );
    }
    lazy_static! {
        pub static ref This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1: DiagnosticMessage = diag(
            4117,
            DiagnosticCategory::Error,
            "This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_Did_you__4117",
            "This member cannot have an 'override' modifier because it is not declared in the base class '{0}'. Did you mean '{1}'?",
        );
    }
    lazy_static! {
        pub static ref The_type_of_this_node_cannot_be_serialized_because_its_property_0_cannot_be_serialized: DiagnosticMessage = diag(
            4118,
            DiagnosticCategory::Error,
            "The_type_of_this_node_cannot_be_serialized_because_its_property_0_cannot_be_serialized_4118",
            "The type of this node cannot be serialized because its property '{0}' cannot be serialized.",
        );
    }
    lazy_static! {
        pub static ref This_member_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0: DiagnosticMessage = diag(
            4119,
            DiagnosticCategory::Error,
            "This_member_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_4119",
            "This member must have a JSDoc comment with an '@override' tag because it overrides a member in the base class '{0}'.",
        );
    }
    lazy_static! {
        pub static ref This_parameter_property_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0: DiagnosticMessage = diag(
            4120,
            DiagnosticCategory::Error,
            "This_parameter_property_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_4120",
            "This parameter property must have a JSDoc comment with an '@override' tag because it overrides a member in the base class '{0}'.",
        );
    }
    lazy_static! {
        pub static ref This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_its_containing_class_0_does_not_extend_another_class: DiagnosticMessage = diag(
            4121,
            DiagnosticCategory::Error,
            "This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_its_containing_class_0_does_not_4121",
            "This member cannot have a JSDoc comment with an '@override' tag because its containing class '{0}' does not extend another class.",
        );
    }
    lazy_static! {
        pub static ref This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0: DiagnosticMessage = diag(
            4122,
            DiagnosticCategory::Error,
            "This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base__4122",
            "This member cannot have a JSDoc comment with an '@override' tag because it is not declared in the base class '{0}'.",
        );
    }
    lazy_static! {
        pub static ref This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1: DiagnosticMessage = diag(
            4123,
            DiagnosticCategory::Error,
            "This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base__4123",
            "This member cannot have a JSDoc comment with an 'override' tag because it is not declared in the base class '{0}'. Did you mean '{1}'?",
        );
    }
    lazy_static! {
        pub static ref Compiler_option_0_of_value_1_is_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next: DiagnosticMessage = diag(
            4124,
            DiagnosticCategory::Error,
            "Compiler_option_0_of_value_1_is_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_w_4124",
            "Compiler option '{0}' of value '{1}' is unstable. Use nightly TypeScript to silence this error. Try updating with 'npm install -D typescript@next'.",
        );
    }
    lazy_static! {
        pub static ref The_current_host_does_not_support_the_0_option: DiagnosticMessage = diag(
            5001,
            DiagnosticCategory::Error,
            "The_current_host_does_not_support_the_0_option_5001",
            "The current host does not support the '{0}' option.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_the_common_subdirectory_path_for_the_input_files: DiagnosticMessage = diag(
            5009,
            DiagnosticCategory::Error,
            "Cannot_find_the_common_subdirectory_path_for_the_input_files_5009",
            "Cannot find the common subdirectory path for the input files.",
        );
    }
    lazy_static! {
        pub static ref File_specification_cannot_end_in_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0: DiagnosticMessage = diag(
            5010,
            DiagnosticCategory::Error,
            "File_specification_cannot_end_in_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0_5010",
            "File specification cannot end in a recursive directory wildcard ('**'): '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_read_file_0_Colon_1: DiagnosticMessage = diag(
            5012,
            DiagnosticCategory::Error,
            "Cannot_read_file_0_Colon_1_5012",
            "Cannot read file '{0}': {1}.",
        );
    }
    lazy_static! {
        pub static ref Failed_to_parse_file_0_Colon_1: DiagnosticMessage = diag(
            5014,
            DiagnosticCategory::Error,
            "Failed_to_parse_file_0_Colon_1_5014",
            "Failed to parse file '{0}': {1}.",
        );
    }
    lazy_static! {
        pub static ref Unknown_compiler_option_0: DiagnosticMessage = diag(
            5023,
            DiagnosticCategory::Error,
            "Unknown_compiler_option_0_5023",
            "Unknown compiler option '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Compiler_option_0_requires_a_value_of_type_1: DiagnosticMessage = diag(
            5024,
            DiagnosticCategory::Error,
            "Compiler_option_0_requires_a_value_of_type_1_5024",
            "Compiler option '{0}' requires a value of type {1}.",
        );
    }
    lazy_static! {
        pub static ref Unknown_compiler_option_0_Did_you_mean_1: DiagnosticMessage = diag(
            5025,
            DiagnosticCategory::Error,
            "Unknown_compiler_option_0_Did_you_mean_1_5025",
            "Unknown compiler option '{0}'. Did you mean '{1}'?",
        );
    }
    lazy_static! {
        pub static ref Could_not_write_file_0_Colon_1: DiagnosticMessage = diag(
            5033,
            DiagnosticCategory::Error,
            "Could_not_write_file_0_Colon_1_5033",
            "Could not write file '{0}': {1}.",
        );
    }
    lazy_static! {
        pub static ref Option_project_cannot_be_mixed_with_source_files_on_a_command_line: DiagnosticMessage = diag(
            5042,
            DiagnosticCategory::Error,
            "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042",
            "Option 'project' cannot be mixed with source files on a command line.",
        );
    }
    lazy_static! {
        pub static ref Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES2015_or_higher: DiagnosticMessage = diag(
            5047,
            DiagnosticCategory::Error,
            "Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES_5047",
            "Option 'isolatedModules' can only be used when either option '--module' is provided or option 'target' is 'ES2015' or higher.",
        );
    }
    lazy_static! {
        pub static ref Option_0_cannot_be_specified_when_option_target_is_ES3: DiagnosticMessage = diag(
            5048,
            DiagnosticCategory::Error,
            "Option_0_cannot_be_specified_when_option_target_is_ES3_5048",
            "Option '{0}' cannot be specified when option 'target' is 'ES3'.",
        );
    }
    lazy_static! {
        pub static ref Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: DiagnosticMessage = diag(
            5051,
            DiagnosticCategory::Error,
            "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051",
            "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided.",
        );
    }
    lazy_static! {
        pub static ref Option_0_cannot_be_specified_without_specifying_option_1: DiagnosticMessage = diag(
            5052,
            DiagnosticCategory::Error,
            "Option_0_cannot_be_specified_without_specifying_option_1_5052",
            "Option '{0}' cannot be specified without specifying option '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Option_0_cannot_be_specified_with_option_1: DiagnosticMessage = diag(
            5053,
            DiagnosticCategory::Error,
            "Option_0_cannot_be_specified_with_option_1_5053",
            "Option '{0}' cannot be specified with option '{1}'.",
        );
    }
    lazy_static! {
        pub static ref A_tsconfig_json_file_is_already_defined_at_Colon_0: DiagnosticMessage = diag(
            5054,
            DiagnosticCategory::Error,
            "A_tsconfig_json_file_is_already_defined_at_Colon_0_5054",
            "A 'tsconfig.json' file is already defined at: '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_write_file_0_because_it_would_overwrite_input_file: DiagnosticMessage = diag(
            5055,
            DiagnosticCategory::Error,
            "Cannot_write_file_0_because_it_would_overwrite_input_file_5055",
            "Cannot write file '{0}' because it would overwrite input file.",
        );
    }
    lazy_static! {
        pub static ref Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files: DiagnosticMessage = diag(
            5056,
            DiagnosticCategory::Error,
            "Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files_5056",
            "Cannot write file '{0}' because it would be overwritten by multiple input files.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_a_tsconfig_json_file_at_the_specified_directory_Colon_0: DiagnosticMessage = diag(
            5057,
            DiagnosticCategory::Error,
            "Cannot_find_a_tsconfig_json_file_at_the_specified_directory_Colon_0_5057",
            "Cannot find a tsconfig.json file at the specified directory: '{0}'.",
        );
    }
    lazy_static! {
        pub static ref The_specified_path_does_not_exist_Colon_0: DiagnosticMessage = diag(
            5058,
            DiagnosticCategory::Error,
            "The_specified_path_does_not_exist_Colon_0_5058",
            "The specified path does not exist: '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Invalid_value_for_reactNamespace_0_is_not_a_valid_identifier: DiagnosticMessage = diag(
            5059,
            DiagnosticCategory::Error,
            "Invalid_value_for_reactNamespace_0_is_not_a_valid_identifier_5059",
            "Invalid value for '--reactNamespace'. '{0}' is not a valid identifier.",
        );
    }
    lazy_static! {
        pub static ref Pattern_0_can_have_at_most_one_Asterisk_character: DiagnosticMessage = diag(
            5061,
            DiagnosticCategory::Error,
            "Pattern_0_can_have_at_most_one_Asterisk_character_5061",
            "Pattern '{0}' can have at most one '*' character.",
        );
    }
    lazy_static! {
        pub static ref Substitution_0_in_pattern_1_can_have_at_most_one_Asterisk_character: DiagnosticMessage = diag(
            5062,
            DiagnosticCategory::Error,
            "Substitution_0_in_pattern_1_can_have_at_most_one_Asterisk_character_5062",
            "Substitution '{0}' in pattern '{1}' can have at most one '*' character.",
        );
    }
    lazy_static! {
        pub static ref Substitutions_for_pattern_0_should_be_an_array: DiagnosticMessage = diag(
            5063,
            DiagnosticCategory::Error,
            "Substitutions_for_pattern_0_should_be_an_array_5063",
            "Substitutions for pattern '{0}' should be an array.",
        );
    }
    lazy_static! {
        pub static ref Substitution_0_for_pattern_1_has_incorrect_type_expected_string_got_2: DiagnosticMessage = diag(
            5064,
            DiagnosticCategory::Error,
            "Substitution_0_for_pattern_1_has_incorrect_type_expected_string_got_2_5064",
            "Substitution '{0}' for pattern '{1}' has incorrect type, expected 'string', got '{2}'.",
        );
    }
    lazy_static! {
        pub static ref File_specification_cannot_contain_a_parent_directory_that_appears_after_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0: DiagnosticMessage = diag(
            5065,
            DiagnosticCategory::Error,
            "File_specification_cannot_contain_a_parent_directory_that_appears_after_a_recursive_directory_wildca_5065",
            "File specification cannot contain a parent directory ('..') that appears after a recursive directory wildcard ('**'): '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Substitutions_for_pattern_0_shouldn_t_be_an_empty_array: DiagnosticMessage = diag(
            5066,
            DiagnosticCategory::Error,
            "Substitutions_for_pattern_0_shouldn_t_be_an_empty_array_5066",
            "Substitutions for pattern '{0}' shouldn't be an empty array.",
        );
    }
    lazy_static! {
        pub static ref Invalid_value_for_jsxFactory_0_is_not_a_valid_identifier_or_qualified_name: DiagnosticMessage = diag(
            5067,
            DiagnosticCategory::Error,
            "Invalid_value_for_jsxFactory_0_is_not_a_valid_identifier_or_qualified_name_5067",
            "Invalid value for 'jsxFactory'. '{0}' is not a valid identifier or qualified-name.",
        );
    }
    lazy_static! {
        pub static ref Adding_a_tsconfig_json_file_will_help_organize_projects_that_contain_both_TypeScript_and_JavaScript_files_Learn_more_at_https_Colon_Slash_Slashaka_ms_Slashtsconfig: DiagnosticMessage = diag(
            5068,
            DiagnosticCategory::Error,
            "Adding_a_tsconfig_json_file_will_help_organize_projects_that_contain_both_TypeScript_and_JavaScript__5068",
            "Adding a tsconfig.json file will help organize projects that contain both TypeScript and JavaScript files. Learn more at https://aka.ms/tsconfig.",
        );
    }
    lazy_static! {
        pub static ref Option_0_cannot_be_specified_without_specifying_option_1_or_option_2: DiagnosticMessage = diag(
            5069,
            DiagnosticCategory::Error,
            "Option_0_cannot_be_specified_without_specifying_option_1_or_option_2_5069",
            "Option '{0}' cannot be specified without specifying option '{1}' or option '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Option_resolveJsonModule_cannot_be_specified_without_node_module_resolution_strategy: DiagnosticMessage = diag(
            5070,
            DiagnosticCategory::Error,
            "Option_resolveJsonModule_cannot_be_specified_without_node_module_resolution_strategy_5070",
            "Option '--resolveJsonModule' cannot be specified without 'node' module resolution strategy.",
        );
    }
    lazy_static! {
        pub static ref Option_resolveJsonModule_can_only_be_specified_when_module_code_generation_is_commonjs_amd_es2015_or_esNext: DiagnosticMessage = diag(
            5071,
            DiagnosticCategory::Error,
            "Option_resolveJsonModule_can_only_be_specified_when_module_code_generation_is_commonjs_amd_es2015_or_5071",
            "Option '--resolveJsonModule' can only be specified when module code generation is 'commonjs', 'amd', 'es2015' or 'esNext'.",
        );
    }
    lazy_static! {
        pub static ref Unknown_build_option_0: DiagnosticMessage = diag(
            5072,
            DiagnosticCategory::Error,
            "Unknown_build_option_0_5072",
            "Unknown build option '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Build_option_0_requires_a_value_of_type_1: DiagnosticMessage = diag(
            5073,
            DiagnosticCategory::Error,
            "Build_option_0_requires_a_value_of_type_1_5073",
            "Build option '{0}' requires a value of type {1}.",
        );
    }
    lazy_static! {
        pub static ref Option_incremental_can_only_be_specified_using_tsconfig_emitting_to_single_file_or_when_option_tsBuildInfoFile_is_specified: DiagnosticMessage = diag(
            5074,
            DiagnosticCategory::Error,
            "Option_incremental_can_only_be_specified_using_tsconfig_emitting_to_single_file_or_when_option_tsBui_5074",
            "Option '--incremental' can only be specified using tsconfig, emitting to single file or when option '--tsBuildInfoFile' is specified.",
        );
    }
    lazy_static! {
        pub static ref _0_is_assignable_to_the_constraint_of_type_1_but_1_could_be_instantiated_with_a_different_subtype_of_constraint_2: DiagnosticMessage = diag(
            5075,
            DiagnosticCategory::Error,
            "_0_is_assignable_to_the_constraint_of_type_1_but_1_could_be_instantiated_with_a_different_subtype_of_5075",
            "'{0}' is assignable to the constraint of type '{1}', but '{1}' could be instantiated with a different subtype of constraint '{2}'.",
        );
    }
    lazy_static! {
        pub static ref _0_and_1_operations_cannot_be_mixed_without_parentheses: DiagnosticMessage = diag(
            5076,
            DiagnosticCategory::Error,
            "_0_and_1_operations_cannot_be_mixed_without_parentheses_5076",
            "'{0}' and '{1}' operations cannot be mixed without parentheses.",
        );
    }
    lazy_static! {
        pub static ref Unknown_build_option_0_Did_you_mean_1: DiagnosticMessage = diag(
            5077,
            DiagnosticCategory::Error,
            "Unknown_build_option_0_Did_you_mean_1_5077",
            "Unknown build option '{0}'. Did you mean '{1}'?",
        );
    }
    lazy_static! {
        pub static ref Unknown_watch_option_0: DiagnosticMessage = diag(
            5078,
            DiagnosticCategory::Error,
            "Unknown_watch_option_0_5078",
            "Unknown watch option '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Unknown_watch_option_0_Did_you_mean_1: DiagnosticMessage = diag(
            5079,
            DiagnosticCategory::Error,
            "Unknown_watch_option_0_Did_you_mean_1_5079",
            "Unknown watch option '{0}'. Did you mean '{1}'?",
        );
    }
    lazy_static! {
        pub static ref Watch_option_0_requires_a_value_of_type_1: DiagnosticMessage = diag(
            5080,
            DiagnosticCategory::Error,
            "Watch_option_0_requires_a_value_of_type_1_5080",
            "Watch option '{0}' requires a value of type {1}.",
        );
    }
    lazy_static! {
        pub static ref Cannot_find_a_tsconfig_json_file_at_the_current_directory_Colon_0: DiagnosticMessage = diag(
            5081,
            DiagnosticCategory::Error,
            "Cannot_find_a_tsconfig_json_file_at_the_current_directory_Colon_0_5081",
            "Cannot find a tsconfig.json file at the current directory: {0}.",
        );
    }
    lazy_static! {
        pub static ref _0_could_be_instantiated_with_an_arbitrary_type_which_could_be_unrelated_to_1: DiagnosticMessage = diag(
            5082,
            DiagnosticCategory::Error,
            "_0_could_be_instantiated_with_an_arbitrary_type_which_could_be_unrelated_to_1_5082",
            "'{0}' could be instantiated with an arbitrary type which could be unrelated to '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_read_file_0: DiagnosticMessage = diag(
            5083,
            DiagnosticCategory::Error,
            "Cannot_read_file_0_5083",
            "Cannot read file '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Tuple_members_must_all_have_names_or_all_not_have_names: DiagnosticMessage = diag(
            5084,
            DiagnosticCategory::Error,
            "Tuple_members_must_all_have_names_or_all_not_have_names_5084",
            "Tuple members must all have names or all not have names.",
        );
    }
    lazy_static! {
        pub static ref A_tuple_member_cannot_be_both_optional_and_rest: DiagnosticMessage = diag(
            5085,
            DiagnosticCategory::Error,
            "A_tuple_member_cannot_be_both_optional_and_rest_5085",
            "A tuple member cannot be both optional and rest.",
        );
    }
    lazy_static! {
        pub static ref A_labeled_tuple_element_is_declared_as_optional_with_a_question_mark_after_the_name_and_before_the_colon_rather_than_after_the_type: DiagnosticMessage = diag(
            5086,
            DiagnosticCategory::Error,
            "A_labeled_tuple_element_is_declared_as_optional_with_a_question_mark_after_the_name_and_before_the_c_5086",
            "A labeled tuple element is declared as optional with a question mark after the name and before the colon, rather than after the type.",
        );
    }
    lazy_static! {
        pub static ref A_labeled_tuple_element_is_declared_as_rest_with_a_before_the_name_rather_than_before_the_type: DiagnosticMessage = diag(
            5087,
            DiagnosticCategory::Error,
            "A_labeled_tuple_element_is_declared_as_rest_with_a_before_the_name_rather_than_before_the_type_5087",
            "A labeled tuple element is declared as rest with a '...' before the name, rather than before the type.",
        );
    }
    lazy_static! {
        pub static ref The_inferred_type_of_0_references_a_type_with_a_cyclic_structure_which_cannot_be_trivially_serialized_A_type_annotation_is_necessary: DiagnosticMessage = diag(
            5088,
            DiagnosticCategory::Error,
            "The_inferred_type_of_0_references_a_type_with_a_cyclic_structure_which_cannot_be_trivially_serialize_5088",
            "The inferred type of '{0}' references a type with a cyclic structure which cannot be trivially serialized. A type annotation is necessary.",
        );
    }
    lazy_static! {
        pub static ref Option_0_cannot_be_specified_when_option_jsx_is_1: DiagnosticMessage = diag(
            5089,
            DiagnosticCategory::Error,
            "Option_0_cannot_be_specified_when_option_jsx_is_1_5089",
            "Option '{0}' cannot be specified when option 'jsx' is '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Non_relative_paths_are_not_allowed_when_baseUrl_is_not_set_Did_you_forget_a_leading_Slash: DiagnosticMessage = diag(
            5090,
            DiagnosticCategory::Error,
            "Non_relative_paths_are_not_allowed_when_baseUrl_is_not_set_Did_you_forget_a_leading_Slash_5090",
            "Non-relative paths are not allowed when 'baseUrl' is not set. Did you forget a leading './'?",
        );
    }
    lazy_static! {
        pub static ref Option_preserveConstEnums_cannot_be_disabled_when_isolatedModules_is_enabled: DiagnosticMessage = diag(
            5091,
            DiagnosticCategory::Error,
            "Option_preserveConstEnums_cannot_be_disabled_when_isolatedModules_is_enabled_5091",
            "Option 'preserveConstEnums' cannot be disabled when 'isolatedModules' is enabled.",
        );
    }
    lazy_static! {
        pub static ref The_root_value_of_a_0_file_must_be_an_object: DiagnosticMessage = diag(
            5092,
            DiagnosticCategory::Error,
            "The_root_value_of_a_0_file_must_be_an_object_5092",
            "The root value of a '{0}' file must be an object.",
        );
    }
    lazy_static! {
        pub static ref Compiler_option_0_may_only_be_used_with_build: DiagnosticMessage = diag(
            5093,
            DiagnosticCategory::Error,
            "Compiler_option_0_may_only_be_used_with_build_5093",
            "Compiler option '--{0}' may only be used with '--build'.",
        );
    }
    lazy_static! {
        pub static ref Compiler_option_0_may_not_be_used_with_build: DiagnosticMessage = diag(
            5094,
            DiagnosticCategory::Error,
            "Compiler_option_0_may_not_be_used_with_build_5094",
            "Compiler option '--{0}' may not be used with '--build'.",
        );
    }
    lazy_static! {
        pub static ref Option_preserveValueImports_can_only_be_used_when_module_is_set_to_es2015_or_later: DiagnosticMessage = diag(
            5095,
            DiagnosticCategory::Error,
            "Option_preserveValueImports_can_only_be_used_when_module_is_set_to_es2015_or_later_5095",
            "Option 'preserveValueImports' can only be used when 'module' is set to 'es2015' or later.",
        );
    }
    lazy_static! {
        pub static ref Generates_a_sourcemap_for_each_corresponding_d_ts_file: DiagnosticMessage = diag(
            6000,
            DiagnosticCategory::Message,
            "Generates_a_sourcemap_for_each_corresponding_d_ts_file_6000",
            "Generates a sourcemap for each corresponding '.d.ts' file.",
        );
    }
    lazy_static! {
        pub static ref Concatenate_and_emit_output_to_single_file: DiagnosticMessage = diag(
            6001,
            DiagnosticCategory::Message,
            "Concatenate_and_emit_output_to_single_file_6001",
            "Concatenate and emit output to single file.",
        );
    }
    lazy_static! {
        pub static ref Generates_corresponding_d_ts_file: DiagnosticMessage = diag(
            6002,
            DiagnosticCategory::Message,
            "Generates_corresponding_d_ts_file_6002",
            "Generates corresponding '.d.ts' file.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations: DiagnosticMessage = diag(
            6004,
            DiagnosticCategory::Message,
            "Specify_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations_6004",
            "Specify the location where debugger should locate TypeScript files instead of source locations.",
        );
    }
    lazy_static! {
        pub static ref Watch_input_files: DiagnosticMessage = diag(
            6005,
            DiagnosticCategory::Message,
            "Watch_input_files_6005",
            "Watch input files.",
        );
    }
    lazy_static! {
        pub static ref Redirect_output_structure_to_the_directory: DiagnosticMessage = diag(
            6006,
            DiagnosticCategory::Message,
            "Redirect_output_structure_to_the_directory_6006",
            "Redirect output structure to the directory.",
        );
    }
    lazy_static! {
        pub static ref Do_not_erase_const_enum_declarations_in_generated_code: DiagnosticMessage = diag(
            6007,
            DiagnosticCategory::Message,
            "Do_not_erase_const_enum_declarations_in_generated_code_6007",
            "Do not erase const enum declarations in generated code.",
        );
    }
    lazy_static! {
        pub static ref Do_not_emit_outputs_if_any_errors_were_reported: DiagnosticMessage = diag(
            6008,
            DiagnosticCategory::Message,
            "Do_not_emit_outputs_if_any_errors_were_reported_6008",
            "Do not emit outputs if any errors were reported.",
        );
    }
    lazy_static! {
        pub static ref Do_not_emit_comments_to_output: DiagnosticMessage = diag(
            6009,
            DiagnosticCategory::Message,
            "Do_not_emit_comments_to_output_6009",
            "Do not emit comments to output.",
        );
    }
    lazy_static! {
        pub static ref Do_not_emit_outputs: DiagnosticMessage = diag(
            6010,
            DiagnosticCategory::Message,
            "Do_not_emit_outputs_6010",
            "Do not emit outputs.",
        );
    }
    lazy_static! {
        pub static ref Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typechecking: DiagnosticMessage = diag(
            6011,
            DiagnosticCategory::Message,
            "Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typech_6011",
            "Allow default imports from modules with no default export. This does not affect code emit, just typechecking.",
        );
    }
    lazy_static! {
        pub static ref Skip_type_checking_of_declaration_files: DiagnosticMessage = diag(
            6012,
            DiagnosticCategory::Message,
            "Skip_type_checking_of_declaration_files_6012",
            "Skip type checking of declaration files.",
        );
    }
    lazy_static! {
        pub static ref Do_not_resolve_the_real_path_of_symlinks: DiagnosticMessage = diag(
            6013,
            DiagnosticCategory::Message,
            "Do_not_resolve_the_real_path_of_symlinks_6013",
            "Do not resolve the real path of symlinks.",
        );
    }
    lazy_static! {
        pub static ref Only_emit_d_ts_declaration_files: DiagnosticMessage = diag(
            6014,
            DiagnosticCategory::Message,
            "Only_emit_d_ts_declaration_files_6014",
            "Only emit '.d.ts' declaration files.",
        );
    }
    lazy_static! {
        pub static ref Specify_ECMAScript_target_version: DiagnosticMessage = diag(
            6015,
            DiagnosticCategory::Message,
            "Specify_ECMAScript_target_version_6015",
            "Specify ECMAScript target version.",
        );
    }
    lazy_static! {
        pub static ref Specify_module_code_generation: DiagnosticMessage = diag(
            6016,
            DiagnosticCategory::Message,
            "Specify_module_code_generation_6016",
            "Specify module code generation.",
        );
    }
    lazy_static! {
        pub static ref Print_this_message: DiagnosticMessage = diag(
            6017,
            DiagnosticCategory::Message,
            "Print_this_message_6017",
            "Print this message.",
        );
    }
    lazy_static! {
        pub static ref Print_the_compiler_s_version: DiagnosticMessage = diag(
            6019,
            DiagnosticCategory::Message,
            "Print_the_compiler_s_version_6019",
            "Print the compiler's version.",
        );
    }
    lazy_static! {
        pub static ref Compile_the_project_given_the_path_to_its_configuration_file_or_to_a_folder_with_a_tsconfig_json: DiagnosticMessage = diag(
            6020,
            DiagnosticCategory::Message,
            "Compile_the_project_given_the_path_to_its_configuration_file_or_to_a_folder_with_a_tsconfig_json_6020",
            "Compile the project given the path to its configuration file, or to a folder with a 'tsconfig.json'.",
        );
    }
    lazy_static! {
        pub static ref Syntax_Colon_0: DiagnosticMessage = diag(
            6023,
            DiagnosticCategory::Message,
            "Syntax_Colon_0_6023",
            "Syntax: {0}",
        );
    }
    lazy_static! {
        pub static ref options: DiagnosticMessage = diag(
            6024,
            DiagnosticCategory::Message,
            "options_6024",
            "options",
        );
    }
    lazy_static! {
        pub static ref file: DiagnosticMessage = diag(
            6025,
            DiagnosticCategory::Message,
            "file_6025",
            "file",
        );
    }
    lazy_static! {
        pub static ref Examples_Colon_0: DiagnosticMessage = diag(
            6026,
            DiagnosticCategory::Message,
            "Examples_Colon_0_6026",
            "Examples: {0}",
        );
    }
    lazy_static! {
        pub static ref Options_Colon: DiagnosticMessage = diag(
            6027,
            DiagnosticCategory::Message,
            "Options_Colon_6027",
            "Options:",
        );
    }
    lazy_static! {
        pub static ref Version_0: DiagnosticMessage = diag(
            6029,
            DiagnosticCategory::Message,
            "Version_0_6029",
            "Version {0}",
        );
    }
    lazy_static! {
        pub static ref Insert_command_line_options_and_files_from_a_file: DiagnosticMessage = diag(
            6030,
            DiagnosticCategory::Message,
            "Insert_command_line_options_and_files_from_a_file_6030",
            "Insert command line options and files from a file.",
        );
    }
    lazy_static! {
        pub static ref Starting_compilation_in_watch_mode: DiagnosticMessage = diag(
            6031,
            DiagnosticCategory::Message,
            "Starting_compilation_in_watch_mode_6031",
            "Starting compilation in watch mode...",
        );
    }
    lazy_static! {
        pub static ref File_change_detected_Starting_incremental_compilation: DiagnosticMessage = diag(
            6032,
            DiagnosticCategory::Message,
            "File_change_detected_Starting_incremental_compilation_6032",
            "File change detected. Starting incremental compilation...",
        );
    }
    lazy_static! {
        pub static ref KIND: DiagnosticMessage = diag(
            6034,
            DiagnosticCategory::Message,
            "KIND_6034",
            "KIND",
        );
    }
    lazy_static! {
        pub static ref FILE: DiagnosticMessage = diag(
            6035,
            DiagnosticCategory::Message,
            "FILE_6035",
            "FILE",
        );
    }
    lazy_static! {
        pub static ref VERSION: DiagnosticMessage = diag(
            6036,
            DiagnosticCategory::Message,
            "VERSION_6036",
            "VERSION",
        );
    }
    lazy_static! {
        pub static ref LOCATION: DiagnosticMessage = diag(
            6037,
            DiagnosticCategory::Message,
            "LOCATION_6037",
            "LOCATION",
        );
    }
    lazy_static! {
        pub static ref DIRECTORY: DiagnosticMessage = diag(
            6038,
            DiagnosticCategory::Message,
            "DIRECTORY_6038",
            "DIRECTORY",
        );
    }
    lazy_static! {
        pub static ref STRATEGY: DiagnosticMessage = diag(
            6039,
            DiagnosticCategory::Message,
            "STRATEGY_6039",
            "STRATEGY",
        );
    }
    lazy_static! {
        pub static ref FILE_OR_DIRECTORY: DiagnosticMessage = diag(
            6040,
            DiagnosticCategory::Message,
            "FILE_OR_DIRECTORY_6040",
            "FILE OR DIRECTORY",
        );
    }
    lazy_static! {
        pub static ref Generates_corresponding_map_file: DiagnosticMessage = diag(
            6043,
            DiagnosticCategory::Message,
            "Generates_corresponding_map_file_6043",
            "Generates corresponding '.map' file.",
        );
    }
    lazy_static! {
        pub static ref Compiler_option_0_expects_an_argument: DiagnosticMessage = diag(
            6044,
            DiagnosticCategory::Error,
            "Compiler_option_0_expects_an_argument_6044",
            "Compiler option '{0}' expects an argument.",
        );
    }
    lazy_static! {
        pub static ref Unterminated_quoted_string_in_response_file_0: DiagnosticMessage = diag(
            6045,
            DiagnosticCategory::Error,
            "Unterminated_quoted_string_in_response_file_0_6045",
            "Unterminated quoted string in response file '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Argument_for_0_option_must_be_Colon_1: DiagnosticMessage = diag(
            6046,
            DiagnosticCategory::Error,
            "Argument_for_0_option_must_be_Colon_1_6046",
            "Argument for '{0}' option must be: {1}.",
        );
    }
    lazy_static! {
        pub static ref Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1: DiagnosticMessage = diag(
            6048,
            DiagnosticCategory::Error,
            "Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1_6048",
            "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Unable_to_open_file_0: DiagnosticMessage = diag(
            6050,
            DiagnosticCategory::Error,
            "Unable_to_open_file_0_6050",
            "Unable to open file '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Corrupted_locale_file_0: DiagnosticMessage = diag(
            6051,
            DiagnosticCategory::Error,
            "Corrupted_locale_file_0_6051",
            "Corrupted locale file {0}.",
        );
    }
    lazy_static! {
        pub static ref Raise_error_on_expressions_and_declarations_with_an_implied_any_type: DiagnosticMessage = diag(
            6052,
            DiagnosticCategory::Message,
            "Raise_error_on_expressions_and_declarations_with_an_implied_any_type_6052",
            "Raise error on expressions and declarations with an implied 'any' type.",
        );
    }
    lazy_static! {
        pub static ref File_0_not_found: DiagnosticMessage = diag(
            6053,
            DiagnosticCategory::Error,
            "File_0_not_found_6053",
            "File '{0}' not found.",
        );
    }
    lazy_static! {
        pub static ref File_0_has_an_unsupported_extension_The_only_supported_extensions_are_1: DiagnosticMessage = diag(
            6054,
            DiagnosticCategory::Error,
            "File_0_has_an_unsupported_extension_The_only_supported_extensions_are_1_6054",
            "File '{0}' has an unsupported extension. The only supported extensions are {1}.",
        );
    }
    lazy_static! {
        pub static ref Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures: DiagnosticMessage = diag(
            6055,
            DiagnosticCategory::Message,
            "Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures_6055",
            "Suppress noImplicitAny errors for indexing objects lacking index signatures.",
        );
    }
    lazy_static! {
        pub static ref Do_not_emit_declarations_for_code_that_has_an_internal_annotation: DiagnosticMessage = diag(
            6056,
            DiagnosticCategory::Message,
            "Do_not_emit_declarations_for_code_that_has_an_internal_annotation_6056",
            "Do not emit declarations for code that has an '@internal' annotation.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir: DiagnosticMessage = diag(
            6058,
            DiagnosticCategory::Message,
            "Specify_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir_6058",
            "Specify the root directory of input files. Use to control the output directory structure with --outDir.",
        );
    }
    lazy_static! {
        pub static ref File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files: DiagnosticMessage = diag(
            6059,
            DiagnosticCategory::Error,
            "File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files_6059",
            "File '{0}' is not under 'rootDir' '{1}'. 'rootDir' is expected to contain all source files.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: DiagnosticMessage = diag(
            6060,
            DiagnosticCategory::Message,
            "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060",
            "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix).",
        );
    }
    lazy_static! {
        pub static ref NEWLINE: DiagnosticMessage = diag(
            6061,
            DiagnosticCategory::Message,
            "NEWLINE_6061",
            "NEWLINE",
        );
    }
    lazy_static! {
        pub static ref Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line: DiagnosticMessage = diag(
            6064,
            DiagnosticCategory::Error,
            "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064",
            "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'null' on command line.",
        );
    }
    lazy_static! {
        pub static ref Enables_experimental_support_for_ES7_decorators: DiagnosticMessage = diag(
            6065,
            DiagnosticCategory::Message,
            "Enables_experimental_support_for_ES7_decorators_6065",
            "Enables experimental support for ES7 decorators.",
        );
    }
    lazy_static! {
        pub static ref Enables_experimental_support_for_emitting_type_metadata_for_decorators: DiagnosticMessage = diag(
            6066,
            DiagnosticCategory::Message,
            "Enables_experimental_support_for_emitting_type_metadata_for_decorators_6066",
            "Enables experimental support for emitting type metadata for decorators.",
        );
    }
    lazy_static! {
        pub static ref Specify_module_resolution_strategy_Colon_node_Node_js_or_classic_TypeScript_pre_1_6: DiagnosticMessage = diag(
            6069,
            DiagnosticCategory::Message,
            "Specify_module_resolution_strategy_Colon_node_Node_js_or_classic_TypeScript_pre_1_6_6069",
            "Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).",
        );
    }
    lazy_static! {
        pub static ref Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file: DiagnosticMessage = diag(
            6070,
            DiagnosticCategory::Message,
            "Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file_6070",
            "Initializes a TypeScript project and creates a tsconfig.json file.",
        );
    }
    lazy_static! {
        pub static ref Successfully_created_a_tsconfig_json_file: DiagnosticMessage = diag(
            6071,
            DiagnosticCategory::Message,
            "Successfully_created_a_tsconfig_json_file_6071",
            "Successfully created a tsconfig.json file.",
        );
    }
    lazy_static! {
        pub static ref Suppress_excess_property_checks_for_object_literals: DiagnosticMessage = diag(
            6072,
            DiagnosticCategory::Message,
            "Suppress_excess_property_checks_for_object_literals_6072",
            "Suppress excess property checks for object literals.",
        );
    }
    lazy_static! {
        pub static ref Stylize_errors_and_messages_using_color_and_context_experimental: DiagnosticMessage = diag(
            6073,
            DiagnosticCategory::Message,
            "Stylize_errors_and_messages_using_color_and_context_experimental_6073",
            "Stylize errors and messages using color and context (experimental).",
        );
    }
    lazy_static! {
        pub static ref Do_not_report_errors_on_unused_labels: DiagnosticMessage = diag(
            6074,
            DiagnosticCategory::Message,
            "Do_not_report_errors_on_unused_labels_6074",
            "Do not report errors on unused labels.",
        );
    }
    lazy_static! {
        pub static ref Report_error_when_not_all_code_paths_in_function_return_a_value: DiagnosticMessage = diag(
            6075,
            DiagnosticCategory::Message,
            "Report_error_when_not_all_code_paths_in_function_return_a_value_6075",
            "Report error when not all code paths in function return a value.",
        );
    }
    lazy_static! {
        pub static ref Report_errors_for_fallthrough_cases_in_switch_statement: DiagnosticMessage = diag(
            6076,
            DiagnosticCategory::Message,
            "Report_errors_for_fallthrough_cases_in_switch_statement_6076",
            "Report errors for fallthrough cases in switch statement.",
        );
    }
    lazy_static! {
        pub static ref Do_not_report_errors_on_unreachable_code: DiagnosticMessage = diag(
            6077,
            DiagnosticCategory::Message,
            "Do_not_report_errors_on_unreachable_code_6077",
            "Do not report errors on unreachable code.",
        );
    }
    lazy_static! {
        pub static ref Disallow_inconsistently_cased_references_to_the_same_file: DiagnosticMessage = diag(
            6078,
            DiagnosticCategory::Message,
            "Disallow_inconsistently_cased_references_to_the_same_file_6078",
            "Disallow inconsistently-cased references to the same file.",
        );
    }
    lazy_static! {
        pub static ref Specify_library_files_to_be_included_in_the_compilation: DiagnosticMessage = diag(
            6079,
            DiagnosticCategory::Message,
            "Specify_library_files_to_be_included_in_the_compilation_6079",
            "Specify library files to be included in the compilation.",
        );
    }
    lazy_static! {
        pub static ref Specify_JSX_code_generation: DiagnosticMessage = diag(
            6080,
            DiagnosticCategory::Message,
            "Specify_JSX_code_generation_6080",
            "Specify JSX code generation.",
        );
    }
    lazy_static! {
        pub static ref File_0_has_an_unsupported_extension_so_skipping_it: DiagnosticMessage = diag(
            6081,
            DiagnosticCategory::Message,
            "File_0_has_an_unsupported_extension_so_skipping_it_6081",
            "File '{0}' has an unsupported extension, so skipping it.",
        );
    }
    lazy_static! {
        pub static ref Only_amd_and_system_modules_are_supported_alongside_0: DiagnosticMessage = diag(
            6082,
            DiagnosticCategory::Error,
            "Only_amd_and_system_modules_are_supported_alongside_0_6082",
            "Only 'amd' and 'system' modules are supported alongside --{0}.",
        );
    }
    lazy_static! {
        pub static ref Base_directory_to_resolve_non_absolute_module_names: DiagnosticMessage = diag(
            6083,
            DiagnosticCategory::Message,
            "Base_directory_to_resolve_non_absolute_module_names_6083",
            "Base directory to resolve non-absolute module names.",
        );
    }
    lazy_static! {
        pub static ref Deprecated_Use_jsxFactory_instead_Specify_the_object_invoked_for_createElement_when_targeting_react_JSX_emit: DiagnosticMessage = diag(
            6084,
            DiagnosticCategory::Message,
            "Deprecated_Use_jsxFactory_instead_Specify_the_object_invoked_for_createElement_when_targeting_react__6084",
            "[Deprecated] Use '--jsxFactory' instead. Specify the object invoked for createElement when targeting 'react' JSX emit",
        );
    }
    lazy_static! {
        pub static ref Enable_tracing_of_the_name_resolution_process: DiagnosticMessage = diag(
            6085,
            DiagnosticCategory::Message,
            "Enable_tracing_of_the_name_resolution_process_6085",
            "Enable tracing of the name resolution process.",
        );
    }
    lazy_static! {
        pub static ref Resolving_module_0_from_1: DiagnosticMessage = diag(
            6086,
            DiagnosticCategory::Message,
            "Resolving_module_0_from_1_6086",
            "======== Resolving module '{0}' from '{1}'. ========",
        );
    }
    lazy_static! {
        pub static ref Explicitly_specified_module_resolution_kind_Colon_0: DiagnosticMessage = diag(
            6087,
            DiagnosticCategory::Message,
            "Explicitly_specified_module_resolution_kind_Colon_0_6087",
            "Explicitly specified module resolution kind: '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Module_resolution_kind_is_not_specified_using_0: DiagnosticMessage = diag(
            6088,
            DiagnosticCategory::Message,
            "Module_resolution_kind_is_not_specified_using_0_6088",
            "Module resolution kind is not specified, using '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Module_name_0_was_successfully_resolved_to_1: DiagnosticMessage = diag(
            6089,
            DiagnosticCategory::Message,
            "Module_name_0_was_successfully_resolved_to_1_6089",
            "======== Module name '{0}' was successfully resolved to '{1}'. ========",
        );
    }
    lazy_static! {
        pub static ref Module_name_0_was_not_resolved: DiagnosticMessage = diag(
            6090,
            DiagnosticCategory::Message,
            "Module_name_0_was_not_resolved_6090",
            "======== Module name '{0}' was not resolved. ========",
        );
    }
    lazy_static! {
        pub static ref paths_option_is_specified_looking_for_a_pattern_to_match_module_name_0: DiagnosticMessage = diag(
            6091,
            DiagnosticCategory::Message,
            "paths_option_is_specified_looking_for_a_pattern_to_match_module_name_0_6091",
            "'paths' option is specified, looking for a pattern to match module name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Module_name_0_matched_pattern_1: DiagnosticMessage = diag(
            6092,
            DiagnosticCategory::Message,
            "Module_name_0_matched_pattern_1_6092",
            "Module name '{0}', matched pattern '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Trying_substitution_0_candidate_module_location_Colon_1: DiagnosticMessage = diag(
            6093,
            DiagnosticCategory::Message,
            "Trying_substitution_0_candidate_module_location_Colon_1_6093",
            "Trying substitution '{0}', candidate module location: '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Resolving_module_name_0_relative_to_base_url_1_2: DiagnosticMessage = diag(
            6094,
            DiagnosticCategory::Message,
            "Resolving_module_name_0_relative_to_base_url_1_2_6094",
            "Resolving module name '{0}' relative to base url '{1}' - '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Loading_module_as_file_Slash_folder_candidate_module_location_0_target_file_type_1: DiagnosticMessage = diag(
            6095,
            DiagnosticCategory::Message,
            "Loading_module_as_file_Slash_folder_candidate_module_location_0_target_file_type_1_6095",
            "Loading module as file / folder, candidate module location '{0}', target file type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref File_0_does_not_exist: DiagnosticMessage = diag(
            6096,
            DiagnosticCategory::Message,
            "File_0_does_not_exist_6096",
            "File '{0}' does not exist.",
        );
    }
    lazy_static! {
        pub static ref File_0_exist_use_it_as_a_name_resolution_result: DiagnosticMessage = diag(
            6097,
            DiagnosticCategory::Message,
            "File_0_exist_use_it_as_a_name_resolution_result_6097",
            "File '{0}' exist - use it as a name resolution result.",
        );
    }
    lazy_static! {
        pub static ref Loading_module_0_from_node_modules_folder_target_file_type_1: DiagnosticMessage = diag(
            6098,
            DiagnosticCategory::Message,
            "Loading_module_0_from_node_modules_folder_target_file_type_1_6098",
            "Loading module '{0}' from 'node_modules' folder, target file type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Found_package_json_at_0: DiagnosticMessage = diag(
            6099,
            DiagnosticCategory::Message,
            "Found_package_json_at_0_6099",
            "Found 'package.json' at '{0}'.",
        );
    }
    lazy_static! {
        pub static ref package_json_does_not_have_a_0_field: DiagnosticMessage = diag(
            6100,
            DiagnosticCategory::Message,
            "package_json_does_not_have_a_0_field_6100",
            "'package.json' does not have a '{0}' field.",
        );
    }
    lazy_static! {
        pub static ref package_json_has_0_field_1_that_references_2: DiagnosticMessage = diag(
            6101,
            DiagnosticCategory::Message,
            "package_json_has_0_field_1_that_references_2_6101",
            "'package.json' has '{0}' field '{1}' that references '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Allow_javascript_files_to_be_compiled: DiagnosticMessage = diag(
            6102,
            DiagnosticCategory::Message,
            "Allow_javascript_files_to_be_compiled_6102",
            "Allow javascript files to be compiled.",
        );
    }
    lazy_static! {
        pub static ref Checking_if_0_is_the_longest_matching_prefix_for_1_2: DiagnosticMessage = diag(
            6104,
            DiagnosticCategory::Message,
            "Checking_if_0_is_the_longest_matching_prefix_for_1_2_6104",
            "Checking if '{0}' is the longest matching prefix for '{1}' - '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Expected_type_of_0_field_in_package_json_to_be_1_got_2: DiagnosticMessage = diag(
            6105,
            DiagnosticCategory::Message,
            "Expected_type_of_0_field_in_package_json_to_be_1_got_2_6105",
            "Expected type of '{0}' field in 'package.json' to be '{1}', got '{2}'.",
        );
    }
    lazy_static! {
        pub static ref baseUrl_option_is_set_to_0_using_this_value_to_resolve_non_relative_module_name_1: DiagnosticMessage = diag(
            6106,
            DiagnosticCategory::Message,
            "baseUrl_option_is_set_to_0_using_this_value_to_resolve_non_relative_module_name_1_6106",
            "'baseUrl' option is set to '{0}', using this value to resolve non-relative module name '{1}'.",
        );
    }
    lazy_static! {
        pub static ref rootDirs_option_is_set_using_it_to_resolve_relative_module_name_0: DiagnosticMessage = diag(
            6107,
            DiagnosticCategory::Message,
            "rootDirs_option_is_set_using_it_to_resolve_relative_module_name_0_6107",
            "'rootDirs' option is set, using it to resolve relative module name '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Longest_matching_prefix_for_0_is_1: DiagnosticMessage = diag(
            6108,
            DiagnosticCategory::Message,
            "Longest_matching_prefix_for_0_is_1_6108",
            "Longest matching prefix for '{0}' is '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Loading_0_from_the_root_dir_1_candidate_location_2: DiagnosticMessage = diag(
            6109,
            DiagnosticCategory::Message,
            "Loading_0_from_the_root_dir_1_candidate_location_2_6109",
            "Loading '{0}' from the root dir '{1}', candidate location '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Trying_other_entries_in_rootDirs: DiagnosticMessage = diag(
            6110,
            DiagnosticCategory::Message,
            "Trying_other_entries_in_rootDirs_6110",
            "Trying other entries in 'rootDirs'.",
        );
    }
    lazy_static! {
        pub static ref Module_resolution_using_rootDirs_has_failed: DiagnosticMessage = diag(
            6111,
            DiagnosticCategory::Message,
            "Module_resolution_using_rootDirs_has_failed_6111",
            "Module resolution using 'rootDirs' has failed.",
        );
    }
    lazy_static! {
        pub static ref Do_not_emit_use_strict_directives_in_module_output: DiagnosticMessage = diag(
            6112,
            DiagnosticCategory::Message,
            "Do_not_emit_use_strict_directives_in_module_output_6112",
            "Do not emit 'use strict' directives in module output.",
        );
    }
    lazy_static! {
        pub static ref Enable_strict_null_checks: DiagnosticMessage = diag(
            6113,
            DiagnosticCategory::Message,
            "Enable_strict_null_checks_6113",
            "Enable strict null checks.",
        );
    }
    lazy_static! {
        pub static ref Unknown_option_excludes_Did_you_mean_exclude: DiagnosticMessage = diag(
            6114,
            DiagnosticCategory::Error,
            "Unknown_option_excludes_Did_you_mean_exclude_6114",
            "Unknown option 'excludes'. Did you mean 'exclude'?",
        );
    }
    lazy_static! {
        pub static ref Raise_error_on_this_expressions_with_an_implied_any_type: DiagnosticMessage = diag(
            6115,
            DiagnosticCategory::Message,
            "Raise_error_on_this_expressions_with_an_implied_any_type_6115",
            "Raise error on 'this' expressions with an implied 'any' type.",
        );
    }
    lazy_static! {
        pub static ref Resolving_type_reference_directive_0_containing_file_1_root_directory_2: DiagnosticMessage = diag(
            6116,
            DiagnosticCategory::Message,
            "Resolving_type_reference_directive_0_containing_file_1_root_directory_2_6116",
            "======== Resolving type reference directive '{0}', containing file '{1}', root directory '{2}'. ========",
        );
    }
    lazy_static! {
        pub static ref Type_reference_directive_0_was_successfully_resolved_to_1_primary_Colon_2: DiagnosticMessage = diag(
            6119,
            DiagnosticCategory::Message,
            "Type_reference_directive_0_was_successfully_resolved_to_1_primary_Colon_2_6119",
            "======== Type reference directive '{0}' was successfully resolved to '{1}', primary: {2}. ========",
        );
    }
    lazy_static! {
        pub static ref Type_reference_directive_0_was_not_resolved: DiagnosticMessage = diag(
            6120,
            DiagnosticCategory::Message,
            "Type_reference_directive_0_was_not_resolved_6120",
            "======== Type reference directive '{0}' was not resolved. ========",
        );
    }
    lazy_static! {
        pub static ref Resolving_with_primary_search_path_0: DiagnosticMessage = diag(
            6121,
            DiagnosticCategory::Message,
            "Resolving_with_primary_search_path_0_6121",
            "Resolving with primary search path '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Root_directory_cannot_be_determined_skipping_primary_search_paths: DiagnosticMessage = diag(
            6122,
            DiagnosticCategory::Message,
            "Root_directory_cannot_be_determined_skipping_primary_search_paths_6122",
            "Root directory cannot be determined, skipping primary search paths.",
        );
    }
    lazy_static! {
        pub static ref Resolving_type_reference_directive_0_containing_file_1_root_directory_not_set: DiagnosticMessage = diag(
            6123,
            DiagnosticCategory::Message,
            "Resolving_type_reference_directive_0_containing_file_1_root_directory_not_set_6123",
            "======== Resolving type reference directive '{0}', containing file '{1}', root directory not set. ========",
        );
    }
    lazy_static! {
        pub static ref Type_declaration_files_to_be_included_in_compilation: DiagnosticMessage = diag(
            6124,
            DiagnosticCategory::Message,
            "Type_declaration_files_to_be_included_in_compilation_6124",
            "Type declaration files to be included in compilation.",
        );
    }
    lazy_static! {
        pub static ref Looking_up_in_node_modules_folder_initial_location_0: DiagnosticMessage = diag(
            6125,
            DiagnosticCategory::Message,
            "Looking_up_in_node_modules_folder_initial_location_0_6125",
            "Looking up in 'node_modules' folder, initial location '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Containing_file_is_not_specified_and_root_directory_cannot_be_determined_skipping_lookup_in_node_modules_folder: DiagnosticMessage = diag(
            6126,
            DiagnosticCategory::Message,
            "Containing_file_is_not_specified_and_root_directory_cannot_be_determined_skipping_lookup_in_node_mod_6126",
            "Containing file is not specified and root directory cannot be determined, skipping lookup in 'node_modules' folder.",
        );
    }
    lazy_static! {
        pub static ref Resolving_type_reference_directive_0_containing_file_not_set_root_directory_1: DiagnosticMessage = diag(
            6127,
            DiagnosticCategory::Message,
            "Resolving_type_reference_directive_0_containing_file_not_set_root_directory_1_6127",
            "======== Resolving type reference directive '{0}', containing file not set, root directory '{1}'. ========",
        );
    }
    lazy_static! {
        pub static ref Resolving_type_reference_directive_0_containing_file_not_set_root_directory_not_set: DiagnosticMessage = diag(
            6128,
            DiagnosticCategory::Message,
            "Resolving_type_reference_directive_0_containing_file_not_set_root_directory_not_set_6128",
            "======== Resolving type reference directive '{0}', containing file not set, root directory not set. ========",
        );
    }
    lazy_static! {
        pub static ref Resolving_real_path_for_0_result_1: DiagnosticMessage = diag(
            6130,
            DiagnosticCategory::Message,
            "Resolving_real_path_for_0_result_1_6130",
            "Resolving real path for '{0}', result '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_compile_modules_using_option_0_unless_the_module_flag_is_amd_or_system: DiagnosticMessage = diag(
            6131,
            DiagnosticCategory::Error,
            "Cannot_compile_modules_using_option_0_unless_the_module_flag_is_amd_or_system_6131",
            "Cannot compile modules using option '{0}' unless the '--module' flag is 'amd' or 'system'.",
        );
    }
    lazy_static! {
        pub static ref File_name_0_has_a_1_extension_stripping_it: DiagnosticMessage = diag(
            6132,
            DiagnosticCategory::Message,
            "File_name_0_has_a_1_extension_stripping_it_6132",
            "File name '{0}' has a '{1}' extension - stripping it.",
        );
    }
    lazy_static! {
        pub static ref _0_is_declared_but_its_value_is_never_read: DiagnosticMessage = diag(
            6133,
            DiagnosticCategory::Error,
            "_0_is_declared_but_its_value_is_never_read_6133",
            "'{0}' is declared but its value is never read.",
        );
    }
    lazy_static! {
        pub static ref Report_errors_on_unused_locals: DiagnosticMessage = diag(
            6134,
            DiagnosticCategory::Message,
            "Report_errors_on_unused_locals_6134",
            "Report errors on unused locals.",
        );
    }
    lazy_static! {
        pub static ref Report_errors_on_unused_parameters: DiagnosticMessage = diag(
            6135,
            DiagnosticCategory::Message,
            "Report_errors_on_unused_parameters_6135",
            "Report errors on unused parameters.",
        );
    }
    lazy_static! {
        pub static ref The_maximum_dependency_depth_to_search_under_node_modules_and_load_JavaScript_files: DiagnosticMessage = diag(
            6136,
            DiagnosticCategory::Message,
            "The_maximum_dependency_depth_to_search_under_node_modules_and_load_JavaScript_files_6136",
            "The maximum dependency depth to search under node_modules and load JavaScript files.",
        );
    }
    lazy_static! {
        pub static ref Cannot_import_type_declaration_files_Consider_importing_0_instead_of_1: DiagnosticMessage = diag(
            6137,
            DiagnosticCategory::Error,
            "Cannot_import_type_declaration_files_Consider_importing_0_instead_of_1_6137",
            "Cannot import type declaration files. Consider importing '{0}' instead of '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_declared_but_its_value_is_never_read: DiagnosticMessage = diag(
            6138,
            DiagnosticCategory::Error,
            "Property_0_is_declared_but_its_value_is_never_read_6138",
            "Property '{0}' is declared but its value is never read.",
        );
    }
    lazy_static! {
        pub static ref Import_emit_helpers_from_tslib: DiagnosticMessage = diag(
            6139,
            DiagnosticCategory::Message,
            "Import_emit_helpers_from_tslib_6139",
            "Import emit helpers from 'tslib'.",
        );
    }
    lazy_static! {
        pub static ref Auto_discovery_for_typings_is_enabled_in_project_0_Running_extra_resolution_pass_for_module_1_using_cache_location_2: DiagnosticMessage = diag(
            6140,
            DiagnosticCategory::Error,
            "Auto_discovery_for_typings_is_enabled_in_project_0_Running_extra_resolution_pass_for_module_1_using__6140",
            "Auto discovery for typings is enabled in project '{0}'. Running extra resolution pass for module '{1}' using cache location '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Parse_in_strict_mode_and_emit_use_strict_for_each_source_file: DiagnosticMessage = diag(
            6141,
            DiagnosticCategory::Message,
            "Parse_in_strict_mode_and_emit_use_strict_for_each_source_file_6141",
            "Parse in strict mode and emit \"use strict\" for each source file.",
        );
    }
    lazy_static! {
        pub static ref Module_0_was_resolved_to_1_but_jsx_is_not_set: DiagnosticMessage = diag(
            6142,
            DiagnosticCategory::Error,
            "Module_0_was_resolved_to_1_but_jsx_is_not_set_6142",
            "Module '{0}' was resolved to '{1}', but '--jsx' is not set.",
        );
    }
    lazy_static! {
        pub static ref Module_0_was_resolved_as_locally_declared_ambient_module_in_file_1: DiagnosticMessage = diag(
            6144,
            DiagnosticCategory::Message,
            "Module_0_was_resolved_as_locally_declared_ambient_module_in_file_1_6144",
            "Module '{0}' was resolved as locally declared ambient module in file '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Module_0_was_resolved_as_ambient_module_declared_in_1_since_this_file_was_not_modified: DiagnosticMessage = diag(
            6145,
            DiagnosticCategory::Message,
            "Module_0_was_resolved_as_ambient_module_declared_in_1_since_this_file_was_not_modified_6145",
            "Module '{0}' was resolved as ambient module declared in '{1}' since this file was not modified.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_JSX_factory_function_to_use_when_targeting_react_JSX_emit_e_g_React_createElement_or_h: DiagnosticMessage = diag(
            6146,
            DiagnosticCategory::Message,
            "Specify_the_JSX_factory_function_to_use_when_targeting_react_JSX_emit_e_g_React_createElement_or_h_6146",
            "Specify the JSX factory function to use when targeting 'react' JSX emit, e.g. 'React.createElement' or 'h'.",
        );
    }
    lazy_static! {
        pub static ref Resolution_for_module_0_was_found_in_cache_from_location_1: DiagnosticMessage = diag(
            6147,
            DiagnosticCategory::Message,
            "Resolution_for_module_0_was_found_in_cache_from_location_1_6147",
            "Resolution for module '{0}' was found in cache from location '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Directory_0_does_not_exist_skipping_all_lookups_in_it: DiagnosticMessage = diag(
            6148,
            DiagnosticCategory::Message,
            "Directory_0_does_not_exist_skipping_all_lookups_in_it_6148",
            "Directory '{0}' does not exist, skipping all lookups in it.",
        );
    }
    lazy_static! {
        pub static ref Show_diagnostic_information: DiagnosticMessage = diag(
            6149,
            DiagnosticCategory::Message,
            "Show_diagnostic_information_6149",
            "Show diagnostic information.",
        );
    }
    lazy_static! {
        pub static ref Show_verbose_diagnostic_information: DiagnosticMessage = diag(
            6150,
            DiagnosticCategory::Message,
            "Show_verbose_diagnostic_information_6150",
            "Show verbose diagnostic information.",
        );
    }
    lazy_static! {
        pub static ref Emit_a_single_file_with_source_maps_instead_of_having_a_separate_file: DiagnosticMessage = diag(
            6151,
            DiagnosticCategory::Message,
            "Emit_a_single_file_with_source_maps_instead_of_having_a_separate_file_6151",
            "Emit a single file with source maps instead of having a separate file.",
        );
    }
    lazy_static! {
        pub static ref Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap_to_be_set: DiagnosticMessage = diag(
            6152,
            DiagnosticCategory::Message,
            "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152",
            "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set.",
        );
    }
    lazy_static! {
        pub static ref Transpile_each_file_as_a_separate_module_similar_to_ts_transpileModule: DiagnosticMessage = diag(
            6153,
            DiagnosticCategory::Message,
            "Transpile_each_file_as_a_separate_module_similar_to_ts_transpileModule_6153",
            "Transpile each file as a separate module (similar to 'ts.transpileModule').",
        );
    }
    lazy_static! {
        pub static ref Print_names_of_generated_files_part_of_the_compilation: DiagnosticMessage = diag(
            6154,
            DiagnosticCategory::Message,
            "Print_names_of_generated_files_part_of_the_compilation_6154",
            "Print names of generated files part of the compilation.",
        );
    }
    lazy_static! {
        pub static ref Print_names_of_files_part_of_the_compilation: DiagnosticMessage = diag(
            6155,
            DiagnosticCategory::Message,
            "Print_names_of_files_part_of_the_compilation_6155",
            "Print names of files part of the compilation.",
        );
    }
    lazy_static! {
        pub static ref The_locale_used_when_displaying_messages_to_the_user_e_g_en_us: DiagnosticMessage = diag(
            6156,
            DiagnosticCategory::Message,
            "The_locale_used_when_displaying_messages_to_the_user_e_g_en_us_6156",
            "The locale used when displaying messages to the user (e.g. 'en-us')",
        );
    }
    lazy_static! {
        pub static ref Do_not_generate_custom_helper_functions_like_extends_in_compiled_output: DiagnosticMessage = diag(
            6157,
            DiagnosticCategory::Message,
            "Do_not_generate_custom_helper_functions_like_extends_in_compiled_output_6157",
            "Do not generate custom helper functions like '__extends' in compiled output.",
        );
    }
    lazy_static! {
        pub static ref Do_not_include_the_default_library_file_lib_d_ts: DiagnosticMessage = diag(
            6158,
            DiagnosticCategory::Message,
            "Do_not_include_the_default_library_file_lib_d_ts_6158",
            "Do not include the default library file (lib.d.ts).",
        );
    }
    lazy_static! {
        pub static ref Do_not_add_triple_slash_references_or_imported_modules_to_the_list_of_compiled_files: DiagnosticMessage = diag(
            6159,
            DiagnosticCategory::Message,
            "Do_not_add_triple_slash_references_or_imported_modules_to_the_list_of_compiled_files_6159",
            "Do not add triple-slash references or imported modules to the list of compiled files.",
        );
    }
    lazy_static! {
        pub static ref Deprecated_Use_skipLibCheck_instead_Skip_type_checking_of_default_library_declaration_files: DiagnosticMessage = diag(
            6160,
            DiagnosticCategory::Message,
            "Deprecated_Use_skipLibCheck_instead_Skip_type_checking_of_default_library_declaration_files_6160",
            "[Deprecated] Use '--skipLibCheck' instead. Skip type checking of default library declaration files.",
        );
    }
    lazy_static! {
        pub static ref List_of_folders_to_include_type_definitions_from: DiagnosticMessage = diag(
            6161,
            DiagnosticCategory::Message,
            "List_of_folders_to_include_type_definitions_from_6161",
            "List of folders to include type definitions from.",
        );
    }
    lazy_static! {
        pub static ref Disable_size_limitations_on_JavaScript_projects: DiagnosticMessage = diag(
            6162,
            DiagnosticCategory::Message,
            "Disable_size_limitations_on_JavaScript_projects_6162",
            "Disable size limitations on JavaScript projects.",
        );
    }
    lazy_static! {
        pub static ref The_character_set_of_the_input_files: DiagnosticMessage = diag(
            6163,
            DiagnosticCategory::Message,
            "The_character_set_of_the_input_files_6163",
            "The character set of the input files.",
        );
    }
    lazy_static! {
        pub static ref Do_not_truncate_error_messages: DiagnosticMessage = diag(
            6165,
            DiagnosticCategory::Message,
            "Do_not_truncate_error_messages_6165",
            "Do not truncate error messages.",
        );
    }
    lazy_static! {
        pub static ref Output_directory_for_generated_declaration_files: DiagnosticMessage = diag(
            6166,
            DiagnosticCategory::Message,
            "Output_directory_for_generated_declaration_files_6166",
            "Output directory for generated declaration files.",
        );
    }
    lazy_static! {
        pub static ref A_series_of_entries_which_re_map_imports_to_lookup_locations_relative_to_the_baseUrl: DiagnosticMessage = diag(
            6167,
            DiagnosticCategory::Message,
            "A_series_of_entries_which_re_map_imports_to_lookup_locations_relative_to_the_baseUrl_6167",
            "A series of entries which re-map imports to lookup locations relative to the 'baseUrl'.",
        );
    }
    lazy_static! {
        pub static ref List_of_root_folders_whose_combined_content_represents_the_structure_of_the_project_at_runtime: DiagnosticMessage = diag(
            6168,
            DiagnosticCategory::Message,
            "List_of_root_folders_whose_combined_content_represents_the_structure_of_the_project_at_runtime_6168",
            "List of root folders whose combined content represents the structure of the project at runtime.",
        );
    }
    lazy_static! {
        pub static ref Show_all_compiler_options: DiagnosticMessage = diag(
            6169,
            DiagnosticCategory::Message,
            "Show_all_compiler_options_6169",
            "Show all compiler options.",
        );
    }
    lazy_static! {
        pub static ref Deprecated_Use_outFile_instead_Concatenate_and_emit_output_to_single_file: DiagnosticMessage = diag(
            6170,
            DiagnosticCategory::Message,
            "Deprecated_Use_outFile_instead_Concatenate_and_emit_output_to_single_file_6170",
            "[Deprecated] Use '--outFile' instead. Concatenate and emit output to single file",
        );
    }
    lazy_static! {
        pub static ref Command_line_Options: DiagnosticMessage = diag(
            6171,
            DiagnosticCategory::Message,
            "Command_line_Options_6171",
            "Command-line Options",
        );
    }
    lazy_static! {
        pub static ref Provide_full_support_for_iterables_in_for_of_spread_and_destructuring_when_targeting_ES5_or_ES3: DiagnosticMessage = diag(
            6179,
            DiagnosticCategory::Message,
            "Provide_full_support_for_iterables_in_for_of_spread_and_destructuring_when_targeting_ES5_or_ES3_6179",
            "Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'.",
        );
    }
    lazy_static! {
        pub static ref Enable_all_strict_type_checking_options: DiagnosticMessage = diag(
            6180,
            DiagnosticCategory::Message,
            "Enable_all_strict_type_checking_options_6180",
            "Enable all strict type-checking options.",
        );
    }
    lazy_static! {
        pub static ref List_of_language_service_plugins: DiagnosticMessage = diag(
            6181,
            DiagnosticCategory::Message,
            "List_of_language_service_plugins_6181",
            "List of language service plugins.",
        );
    }
    lazy_static! {
        pub static ref Scoped_package_detected_looking_in_0: DiagnosticMessage = diag(
            6182,
            DiagnosticCategory::Message,
            "Scoped_package_detected_looking_in_0_6182",
            "Scoped package detected, looking in '{0}'",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2: DiagnosticMessage = diag(
            6183,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2_6183",
            "Reusing resolution of module '{0}' from '{1}' of old program, it was successfully resolved to '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2_with_Package_ID_3: DiagnosticMessage = diag(
            6184,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2_with_Package__6184",
            "Reusing resolution of module '{0}' from '{1}' of old program, it was successfully resolved to '{2}' with Package ID '{3}'.",
        );
    }
    lazy_static! {
        pub static ref Enable_strict_checking_of_function_types: DiagnosticMessage = diag(
            6186,
            DiagnosticCategory::Message,
            "Enable_strict_checking_of_function_types_6186",
            "Enable strict checking of function types.",
        );
    }
    lazy_static! {
        pub static ref Enable_strict_checking_of_property_initialization_in_classes: DiagnosticMessage = diag(
            6187,
            DiagnosticCategory::Message,
            "Enable_strict_checking_of_property_initialization_in_classes_6187",
            "Enable strict checking of property initialization in classes.",
        );
    }
    lazy_static! {
        pub static ref Numeric_separators_are_not_allowed_here: DiagnosticMessage = diag(
            6188,
            DiagnosticCategory::Error,
            "Numeric_separators_are_not_allowed_here_6188",
            "Numeric separators are not allowed here.",
        );
    }
    lazy_static! {
        pub static ref Multiple_consecutive_numeric_separators_are_not_permitted: DiagnosticMessage = diag(
            6189,
            DiagnosticCategory::Error,
            "Multiple_consecutive_numeric_separators_are_not_permitted_6189",
            "Multiple consecutive numeric separators are not permitted.",
        );
    }
    lazy_static! {
        pub static ref Whether_to_keep_outdated_console_output_in_watch_mode_instead_of_clearing_the_screen: DiagnosticMessage = diag(
            6191,
            DiagnosticCategory::Message,
            "Whether_to_keep_outdated_console_output_in_watch_mode_instead_of_clearing_the_screen_6191",
            "Whether to keep outdated console output in watch mode instead of clearing the screen.",
        );
    }
    lazy_static! {
        pub static ref All_imports_in_import_declaration_are_unused: DiagnosticMessage = diag(
            6192,
            DiagnosticCategory::Error,
            "All_imports_in_import_declaration_are_unused_6192",
            "All imports in import declaration are unused.",
        );
    }
    lazy_static! {
        pub static ref Found_1_error_Watching_for_file_changes: DiagnosticMessage = diag(
            6193,
            DiagnosticCategory::Message,
            "Found_1_error_Watching_for_file_changes_6193",
            "Found 1 error. Watching for file changes.",
        );
    }
    lazy_static! {
        pub static ref Found_0_errors_Watching_for_file_changes: DiagnosticMessage = diag(
            6194,
            DiagnosticCategory::Message,
            "Found_0_errors_Watching_for_file_changes_6194",
            "Found {0} errors. Watching for file changes.",
        );
    }
    lazy_static! {
        pub static ref Resolve_keyof_to_string_valued_property_names_only_no_numbers_or_symbols: DiagnosticMessage = diag(
            6195,
            DiagnosticCategory::Message,
            "Resolve_keyof_to_string_valued_property_names_only_no_numbers_or_symbols_6195",
            "Resolve 'keyof' to string valued property names only (no numbers or symbols).",
        );
    }
    lazy_static! {
        pub static ref _0_is_declared_but_never_used: DiagnosticMessage = diag(
            6196,
            DiagnosticCategory::Error,
            "_0_is_declared_but_never_used_6196",
            "'{0}' is declared but never used.",
        );
    }
    lazy_static! {
        pub static ref Include_modules_imported_with_json_extension: DiagnosticMessage = diag(
            6197,
            DiagnosticCategory::Message,
            "Include_modules_imported_with_json_extension_6197",
            "Include modules imported with '.json' extension",
        );
    }
    lazy_static! {
        pub static ref All_destructured_elements_are_unused: DiagnosticMessage = diag(
            6198,
            DiagnosticCategory::Error,
            "All_destructured_elements_are_unused_6198",
            "All destructured elements are unused.",
        );
    }
    lazy_static! {
        pub static ref All_variables_are_unused: DiagnosticMessage = diag(
            6199,
            DiagnosticCategory::Error,
            "All_variables_are_unused_6199",
            "All variables are unused.",
        );
    }
    lazy_static! {
        pub static ref Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0: DiagnosticMessage = diag(
            6200,
            DiagnosticCategory::Error,
            "Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0_6200",
            "Definitions of the following identifiers conflict with those in another file: {0}",
        );
    }
    lazy_static! {
        pub static ref Conflicts_are_in_this_file: DiagnosticMessage = diag(
            6201,
            DiagnosticCategory::Message,
            "Conflicts_are_in_this_file_6201",
            "Conflicts are in this file.",
        );
    }
    lazy_static! {
        pub static ref Project_references_may_not_form_a_circular_graph_Cycle_detected_Colon_0: DiagnosticMessage = diag(
            6202,
            DiagnosticCategory::Error,
            "Project_references_may_not_form_a_circular_graph_Cycle_detected_Colon_0_6202",
            "Project references may not form a circular graph. Cycle detected: {0}",
        );
    }
    lazy_static! {
        pub static ref _0_was_also_declared_here: DiagnosticMessage = diag(
            6203,
            DiagnosticCategory::Message,
            "_0_was_also_declared_here_6203",
            "'{0}' was also declared here.",
        );
    }
    lazy_static! {
        pub static ref and_here: DiagnosticMessage = diag(
            6204,
            DiagnosticCategory::Message,
            "and_here_6204",
            "and here.",
        );
    }
    lazy_static! {
        pub static ref All_type_parameters_are_unused: DiagnosticMessage = diag(
            6205,
            DiagnosticCategory::Error,
            "All_type_parameters_are_unused_6205",
            "All type parameters are unused.",
        );
    }
    lazy_static! {
        pub static ref package_json_has_a_typesVersions_field_with_version_specific_path_mappings: DiagnosticMessage = diag(
            6206,
            DiagnosticCategory::Message,
            "package_json_has_a_typesVersions_field_with_version_specific_path_mappings_6206",
            "'package.json' has a 'typesVersions' field with version-specific path mappings.",
        );
    }
    lazy_static! {
        pub static ref package_json_does_not_have_a_typesVersions_entry_that_matches_version_0: DiagnosticMessage = diag(
            6207,
            DiagnosticCategory::Message,
            "package_json_does_not_have_a_typesVersions_entry_that_matches_version_0_6207",
            "'package.json' does not have a 'typesVersions' entry that matches version '{0}'.",
        );
    }
    lazy_static! {
        pub static ref package_json_has_a_typesVersions_entry_0_that_matches_compiler_version_1_looking_for_a_pattern_to_match_module_name_2: DiagnosticMessage = diag(
            6208,
            DiagnosticCategory::Message,
            "package_json_has_a_typesVersions_entry_0_that_matches_compiler_version_1_looking_for_a_pattern_to_ma_6208",
            "'package.json' has a 'typesVersions' entry '{0}' that matches compiler version '{1}', looking for a pattern to match module name '{2}'.",
        );
    }
    lazy_static! {
        pub static ref package_json_has_a_typesVersions_entry_0_that_is_not_a_valid_semver_range: DiagnosticMessage = diag(
            6209,
            DiagnosticCategory::Message,
            "package_json_has_a_typesVersions_entry_0_that_is_not_a_valid_semver_range_6209",
            "'package.json' has a 'typesVersions' entry '{0}' that is not a valid semver range.",
        );
    }
    lazy_static! {
        pub static ref An_argument_for_0_was_not_provided: DiagnosticMessage = diag(
            6210,
            DiagnosticCategory::Message,
            "An_argument_for_0_was_not_provided_6210",
            "An argument for '{0}' was not provided.",
        );
    }
    lazy_static! {
        pub static ref An_argument_matching_this_binding_pattern_was_not_provided: DiagnosticMessage = diag(
            6211,
            DiagnosticCategory::Message,
            "An_argument_matching_this_binding_pattern_was_not_provided_6211",
            "An argument matching this binding pattern was not provided.",
        );
    }
    lazy_static! {
        pub static ref Did_you_mean_to_call_this_expression: DiagnosticMessage = diag(
            6212,
            DiagnosticCategory::Message,
            "Did_you_mean_to_call_this_expression_6212",
            "Did you mean to call this expression?",
        );
    }
    lazy_static! {
        pub static ref Did_you_mean_to_use_new_with_this_expression: DiagnosticMessage = diag(
            6213,
            DiagnosticCategory::Message,
            "Did_you_mean_to_use_new_with_this_expression_6213",
            "Did you mean to use 'new' with this expression?",
        );
    }
    lazy_static! {
        pub static ref Enable_strict_bind_call_and_apply_methods_on_functions: DiagnosticMessage = diag(
            6214,
            DiagnosticCategory::Message,
            "Enable_strict_bind_call_and_apply_methods_on_functions_6214",
            "Enable strict 'bind', 'call', and 'apply' methods on functions.",
        );
    }
    lazy_static! {
        pub static ref Using_compiler_options_of_project_reference_redirect_0: DiagnosticMessage = diag(
            6215,
            DiagnosticCategory::Message,
            "Using_compiler_options_of_project_reference_redirect_0_6215",
            "Using compiler options of project reference redirect '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Found_1_error: DiagnosticMessage = diag(
            6216,
            DiagnosticCategory::Message,
            "Found_1_error_6216",
            "Found 1 error.",
        );
    }
    lazy_static! {
        pub static ref Found_0_errors: DiagnosticMessage = diag(
            6217,
            DiagnosticCategory::Message,
            "Found_0_errors_6217",
            "Found {0} errors.",
        );
    }
    lazy_static! {
        pub static ref Module_name_0_was_successfully_resolved_to_1_with_Package_ID_2: DiagnosticMessage = diag(
            6218,
            DiagnosticCategory::Message,
            "Module_name_0_was_successfully_resolved_to_1_with_Package_ID_2_6218",
            "======== Module name '{0}' was successfully resolved to '{1}' with Package ID '{2}'. ========",
        );
    }
    lazy_static! {
        pub static ref Type_reference_directive_0_was_successfully_resolved_to_1_with_Package_ID_2_primary_Colon_3: DiagnosticMessage = diag(
            6219,
            DiagnosticCategory::Message,
            "Type_reference_directive_0_was_successfully_resolved_to_1_with_Package_ID_2_primary_Colon_3_6219",
            "======== Type reference directive '{0}' was successfully resolved to '{1}' with Package ID '{2}', primary: {3}. ========",
        );
    }
    lazy_static! {
        pub static ref package_json_had_a_falsy_0_field: DiagnosticMessage = diag(
            6220,
            DiagnosticCategory::Message,
            "package_json_had_a_falsy_0_field_6220",
            "'package.json' had a falsy '{0}' field.",
        );
    }
    lazy_static! {
        pub static ref Disable_use_of_source_files_instead_of_declaration_files_from_referenced_projects: DiagnosticMessage = diag(
            6221,
            DiagnosticCategory::Message,
            "Disable_use_of_source_files_instead_of_declaration_files_from_referenced_projects_6221",
            "Disable use of source files instead of declaration files from referenced projects.",
        );
    }
    lazy_static! {
        pub static ref Emit_class_fields_with_Define_instead_of_Set: DiagnosticMessage = diag(
            6222,
            DiagnosticCategory::Message,
            "Emit_class_fields_with_Define_instead_of_Set_6222",
            "Emit class fields with Define instead of Set.",
        );
    }
    lazy_static! {
        pub static ref Generates_a_CPU_profile: DiagnosticMessage = diag(
            6223,
            DiagnosticCategory::Message,
            "Generates_a_CPU_profile_6223",
            "Generates a CPU profile.",
        );
    }
    lazy_static! {
        pub static ref Disable_solution_searching_for_this_project: DiagnosticMessage = diag(
            6224,
            DiagnosticCategory::Message,
            "Disable_solution_searching_for_this_project_6224",
            "Disable solution searching for this project.",
        );
    }
    lazy_static! {
        pub static ref Specify_strategy_for_watching_file_Colon_FixedPollingInterval_default_PriorityPollingInterval_DynamicPriorityPolling_FixedChunkSizePolling_UseFsEvents_UseFsEventsOnParentDirectory: DiagnosticMessage = diag(
            6225,
            DiagnosticCategory::Message,
            "Specify_strategy_for_watching_file_Colon_FixedPollingInterval_default_PriorityPollingInterval_Dynami_6225",
            "Specify strategy for watching file: 'FixedPollingInterval' (default), 'PriorityPollingInterval', 'DynamicPriorityPolling', 'FixedChunkSizePolling', 'UseFsEvents', 'UseFsEventsOnParentDirectory'.",
        );
    }
    lazy_static! {
        pub static ref Specify_strategy_for_watching_directory_on_platforms_that_don_t_support_recursive_watching_natively_Colon_UseFsEvents_default_FixedPollingInterval_DynamicPriorityPolling_FixedChunkSizePolling: DiagnosticMessage = diag(
            6226,
            DiagnosticCategory::Message,
            "Specify_strategy_for_watching_directory_on_platforms_that_don_t_support_recursive_watching_natively__6226",
            "Specify strategy for watching directory on platforms that don't support recursive watching natively: 'UseFsEvents' (default), 'FixedPollingInterval', 'DynamicPriorityPolling', 'FixedChunkSizePolling'.",
        );
    }
    lazy_static! {
        pub static ref Specify_strategy_for_creating_a_polling_watch_when_it_fails_to_create_using_file_system_events_Colon_FixedInterval_default_PriorityInterval_DynamicPriority_FixedChunkSize: DiagnosticMessage = diag(
            6227,
            DiagnosticCategory::Message,
            "Specify_strategy_for_creating_a_polling_watch_when_it_fails_to_create_using_file_system_events_Colon_6227",
            "Specify strategy for creating a polling watch when it fails to create using file system events: 'FixedInterval' (default), 'PriorityInterval', 'DynamicPriority', 'FixedChunkSize'.",
        );
    }
    lazy_static! {
        pub static ref Tag_0_expects_at_least_1_arguments_but_the_JSX_factory_2_provides_at_most_3: DiagnosticMessage = diag(
            6229,
            DiagnosticCategory::Error,
            "Tag_0_expects_at_least_1_arguments_but_the_JSX_factory_2_provides_at_most_3_6229",
            "Tag '{0}' expects at least '{1}' arguments, but the JSX factory '{2}' provides at most '{3}'.",
        );
    }
    lazy_static! {
        pub static ref Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line: DiagnosticMessage = diag(
            6230,
            DiagnosticCategory::Error,
            "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230",
            "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'false' or 'null' on command line.",
        );
    }
    lazy_static! {
        pub static ref Could_not_resolve_the_path_0_with_the_extensions_Colon_1: DiagnosticMessage = diag(
            6231,
            DiagnosticCategory::Error,
            "Could_not_resolve_the_path_0_with_the_extensions_Colon_1_6231",
            "Could not resolve the path '{0}' with the extensions: {1}.",
        );
    }
    lazy_static! {
        pub static ref Declaration_augments_declaration_in_another_file_This_cannot_be_serialized: DiagnosticMessage = diag(
            6232,
            DiagnosticCategory::Error,
            "Declaration_augments_declaration_in_another_file_This_cannot_be_serialized_6232",
            "Declaration augments declaration in another file. This cannot be serialized.",
        );
    }
    lazy_static! {
        pub static ref This_is_the_declaration_being_augmented_Consider_moving_the_augmenting_declaration_into_the_same_file: DiagnosticMessage = diag(
            6233,
            DiagnosticCategory::Error,
            "This_is_the_declaration_being_augmented_Consider_moving_the_augmenting_declaration_into_the_same_fil_6233",
            "This is the declaration being augmented. Consider moving the augmenting declaration into the same file.",
        );
    }
    lazy_static! {
        pub static ref This_expression_is_not_callable_because_it_is_a_get_accessor_Did_you_mean_to_use_it_without: DiagnosticMessage = diag(
            6234,
            DiagnosticCategory::Error,
            "This_expression_is_not_callable_because_it_is_a_get_accessor_Did_you_mean_to_use_it_without_6234",
            "This expression is not callable because it is a 'get' accessor. Did you mean to use it without '()'?",
        );
    }
    lazy_static! {
        pub static ref Disable_loading_referenced_projects: DiagnosticMessage = diag(
            6235,
            DiagnosticCategory::Message,
            "Disable_loading_referenced_projects_6235",
            "Disable loading referenced projects.",
        );
    }
    lazy_static! {
        pub static ref Arguments_for_the_rest_parameter_0_were_not_provided: DiagnosticMessage = diag(
            6236,
            DiagnosticCategory::Error,
            "Arguments_for_the_rest_parameter_0_were_not_provided_6236",
            "Arguments for the rest parameter '{0}' were not provided.",
        );
    }
    lazy_static! {
        pub static ref Generates_an_event_trace_and_a_list_of_types: DiagnosticMessage = diag(
            6237,
            DiagnosticCategory::Message,
            "Generates_an_event_trace_and_a_list_of_types_6237",
            "Generates an event trace and a list of types.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_module_specifier_to_be_used_to_import_the_jsx_and_jsxs_factory_functions_from_eg_react: DiagnosticMessage = diag(
            6238,
            DiagnosticCategory::Error,
            "Specify_the_module_specifier_to_be_used_to_import_the_jsx_and_jsxs_factory_functions_from_eg_react_6238",
            "Specify the module specifier to be used to import the 'jsx' and 'jsxs' factory functions from. eg, react",
        );
    }
    lazy_static! {
        pub static ref File_0_exists_according_to_earlier_cached_lookups: DiagnosticMessage = diag(
            6239,
            DiagnosticCategory::Message,
            "File_0_exists_according_to_earlier_cached_lookups_6239",
            "File '{0}' exists according to earlier cached lookups.",
        );
    }
    lazy_static! {
        pub static ref File_0_does_not_exist_according_to_earlier_cached_lookups: DiagnosticMessage = diag(
            6240,
            DiagnosticCategory::Message,
            "File_0_does_not_exist_according_to_earlier_cached_lookups_6240",
            "File '{0}' does not exist according to earlier cached lookups.",
        );
    }
    lazy_static! {
        pub static ref Resolution_for_type_reference_directive_0_was_found_in_cache_from_location_1: DiagnosticMessage = diag(
            6241,
            DiagnosticCategory::Message,
            "Resolution_for_type_reference_directive_0_was_found_in_cache_from_location_1_6241",
            "Resolution for type reference directive '{0}' was found in cache from location '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Resolving_type_reference_directive_0_containing_file_1: DiagnosticMessage = diag(
            6242,
            DiagnosticCategory::Message,
            "Resolving_type_reference_directive_0_containing_file_1_6242",
            "======== Resolving type reference directive '{0}', containing file '{1}'. ========",
        );
    }
    lazy_static! {
        pub static ref Interpret_optional_property_types_as_written_rather_than_adding_undefined: DiagnosticMessage = diag(
            6243,
            DiagnosticCategory::Message,
            "Interpret_optional_property_types_as_written_rather_than_adding_undefined_6243",
            "Interpret optional property types as written, rather than adding 'undefined'.",
        );
    }
    lazy_static! {
        pub static ref Modules: DiagnosticMessage = diag(
            6244,
            DiagnosticCategory::Message,
            "Modules_6244",
            "Modules",
        );
    }
    lazy_static! {
        pub static ref File_Management: DiagnosticMessage = diag(
            6245,
            DiagnosticCategory::Message,
            "File_Management_6245",
            "File Management",
        );
    }
    lazy_static! {
        pub static ref Emit: DiagnosticMessage = diag(
            6246,
            DiagnosticCategory::Message,
            "Emit_6246",
            "Emit",
        );
    }
    lazy_static! {
        pub static ref JavaScript_Support: DiagnosticMessage = diag(
            6247,
            DiagnosticCategory::Message,
            "JavaScript_Support_6247",
            "JavaScript Support",
        );
    }
    lazy_static! {
        pub static ref Type_Checking: DiagnosticMessage = diag(
            6248,
            DiagnosticCategory::Message,
            "Type_Checking_6248",
            "Type Checking",
        );
    }
    lazy_static! {
        pub static ref Editor_Support: DiagnosticMessage = diag(
            6249,
            DiagnosticCategory::Message,
            "Editor_Support_6249",
            "Editor Support",
        );
    }
    lazy_static! {
        pub static ref Watch_and_Build_Modes: DiagnosticMessage = diag(
            6250,
            DiagnosticCategory::Message,
            "Watch_and_Build_Modes_6250",
            "Watch and Build Modes",
        );
    }
    lazy_static! {
        pub static ref Compiler_Diagnostics: DiagnosticMessage = diag(
            6251,
            DiagnosticCategory::Message,
            "Compiler_Diagnostics_6251",
            "Compiler Diagnostics",
        );
    }
    lazy_static! {
        pub static ref Interop_Constraints: DiagnosticMessage = diag(
            6252,
            DiagnosticCategory::Message,
            "Interop_Constraints_6252",
            "Interop Constraints",
        );
    }
    lazy_static! {
        pub static ref Backwards_Compatibility: DiagnosticMessage = diag(
            6253,
            DiagnosticCategory::Message,
            "Backwards_Compatibility_6253",
            "Backwards Compatibility",
        );
    }
    lazy_static! {
        pub static ref Language_and_Environment: DiagnosticMessage = diag(
            6254,
            DiagnosticCategory::Message,
            "Language_and_Environment_6254",
            "Language and Environment",
        );
    }
    lazy_static! {
        pub static ref Projects: DiagnosticMessage = diag(
            6255,
            DiagnosticCategory::Message,
            "Projects_6255",
            "Projects",
        );
    }
    lazy_static! {
        pub static ref Output_Formatting: DiagnosticMessage = diag(
            6256,
            DiagnosticCategory::Message,
            "Output_Formatting_6256",
            "Output Formatting",
        );
    }
    lazy_static! {
        pub static ref Completeness: DiagnosticMessage = diag(
            6257,
            DiagnosticCategory::Message,
            "Completeness_6257",
            "Completeness",
        );
    }
    lazy_static! {
        pub static ref _0_should_be_set_inside_the_compilerOptions_object_of_the_config_json_file: DiagnosticMessage = diag(
            6258,
            DiagnosticCategory::Error,
            "_0_should_be_set_inside_the_compilerOptions_object_of_the_config_json_file_6258",
            "'{0}' should be set inside the 'compilerOptions' object of the config json file",
        );
    }
    lazy_static! {
        pub static ref Directory_0_has_no_containing_package_json_scope_Imports_will_not_resolve: DiagnosticMessage = diag(
            6270,
            DiagnosticCategory::Message,
            "Directory_0_has_no_containing_package_json_scope_Imports_will_not_resolve_6270",
            "Directory '{0}' has no containing package.json scope. Imports will not resolve.",
        );
    }
    lazy_static! {
        pub static ref Import_specifier_0_does_not_exist_in_package_json_scope_at_path_1: DiagnosticMessage = diag(
            6271,
            DiagnosticCategory::Message,
            "Import_specifier_0_does_not_exist_in_package_json_scope_at_path_1_6271",
            "Import specifier '{0}' does not exist in package.json scope at path '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Invalid_import_specifier_0_has_no_possible_resolutions: DiagnosticMessage = diag(
            6272,
            DiagnosticCategory::Message,
            "Invalid_import_specifier_0_has_no_possible_resolutions_6272",
            "Invalid import specifier '{0}' has no possible resolutions.",
        );
    }
    lazy_static! {
        pub static ref package_json_scope_0_has_no_imports_defined: DiagnosticMessage = diag(
            6273,
            DiagnosticCategory::Message,
            "package_json_scope_0_has_no_imports_defined_6273",
            "package.json scope '{0}' has no imports defined.",
        );
    }
    lazy_static! {
        pub static ref package_json_scope_0_explicitly_maps_specifier_1_to_null: DiagnosticMessage = diag(
            6274,
            DiagnosticCategory::Message,
            "package_json_scope_0_explicitly_maps_specifier_1_to_null_6274",
            "package.json scope '{0}' explicitly maps specifier '{1}' to null.",
        );
    }
    lazy_static! {
        pub static ref package_json_scope_0_has_invalid_type_for_target_of_specifier_1: DiagnosticMessage = diag(
            6275,
            DiagnosticCategory::Message,
            "package_json_scope_0_has_invalid_type_for_target_of_specifier_1_6275",
            "package.json scope '{0}' has invalid type for target of specifier '{1}'",
        );
    }
    lazy_static! {
        pub static ref Export_specifier_0_does_not_exist_in_package_json_scope_at_path_1: DiagnosticMessage = diag(
            6276,
            DiagnosticCategory::Message,
            "Export_specifier_0_does_not_exist_in_package_json_scope_at_path_1_6276",
            "Export specifier '{0}' does not exist in package.json scope at path '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Enable_project_compilation: DiagnosticMessage = diag(
            6302,
            DiagnosticCategory::Message,
            "Enable_project_compilation_6302",
            "Enable project compilation",
        );
    }
    lazy_static! {
        pub static ref Composite_projects_may_not_disable_declaration_emit: DiagnosticMessage = diag(
            6304,
            DiagnosticCategory::Error,
            "Composite_projects_may_not_disable_declaration_emit_6304",
            "Composite projects may not disable declaration emit.",
        );
    }
    lazy_static! {
        pub static ref Output_file_0_has_not_been_built_from_source_file_1: DiagnosticMessage = diag(
            6305,
            DiagnosticCategory::Error,
            "Output_file_0_has_not_been_built_from_source_file_1_6305",
            "Output file '{0}' has not been built from source file '{1}'.",
        );
    }
    lazy_static! {
        pub static ref Referenced_project_0_must_have_setting_composite_Colon_true: DiagnosticMessage = diag(
            6306,
            DiagnosticCategory::Error,
            "Referenced_project_0_must_have_setting_composite_Colon_true_6306",
            "Referenced project '{0}' must have setting \"composite\": true.",
        );
    }
    lazy_static! {
        pub static ref File_0_is_not_listed_within_the_file_list_of_project_1_Projects_must_list_all_files_or_use_an_include_pattern: DiagnosticMessage = diag(
            6307,
            DiagnosticCategory::Error,
            "File_0_is_not_listed_within_the_file_list_of_project_1_Projects_must_list_all_files_or_use_an_includ_6307",
            "File '{0}' is not listed within the file list of project '{1}'. Projects must list all files or use an 'include' pattern.",
        );
    }
    lazy_static! {
        pub static ref Cannot_prepend_project_0_because_it_does_not_have_outFile_set: DiagnosticMessage = diag(
            6308,
            DiagnosticCategory::Error,
            "Cannot_prepend_project_0_because_it_does_not_have_outFile_set_6308",
            "Cannot prepend project '{0}' because it does not have 'outFile' set",
        );
    }
    lazy_static! {
        pub static ref Output_file_0_from_project_1_does_not_exist: DiagnosticMessage = diag(
            6309,
            DiagnosticCategory::Error,
            "Output_file_0_from_project_1_does_not_exist_6309",
            "Output file '{0}' from project '{1}' does not exist",
        );
    }
    lazy_static! {
        pub static ref Referenced_project_0_may_not_disable_emit: DiagnosticMessage = diag(
            6310,
            DiagnosticCategory::Error,
            "Referenced_project_0_may_not_disable_emit_6310",
            "Referenced project '{0}' may not disable emit.",
        );
    }
    lazy_static! {
        pub static ref Project_0_is_out_of_date_because_oldest_output_1_is_older_than_newest_input_2: DiagnosticMessage = diag(
            6350,
            DiagnosticCategory::Message,
            "Project_0_is_out_of_date_because_oldest_output_1_is_older_than_newest_input_2_6350",
            "Project '{0}' is out of date because oldest output '{1}' is older than newest input '{2}'",
        );
    }
    lazy_static! {
        pub static ref Project_0_is_up_to_date_because_newest_input_1_is_older_than_oldest_output_2: DiagnosticMessage = diag(
            6351,
            DiagnosticCategory::Message,
            "Project_0_is_up_to_date_because_newest_input_1_is_older_than_oldest_output_2_6351",
            "Project '{0}' is up to date because newest input '{1}' is older than oldest output '{2}'",
        );
    }
    lazy_static! {
        pub static ref Project_0_is_out_of_date_because_output_file_1_does_not_exist: DiagnosticMessage = diag(
            6352,
            DiagnosticCategory::Message,
            "Project_0_is_out_of_date_because_output_file_1_does_not_exist_6352",
            "Project '{0}' is out of date because output file '{1}' does not exist",
        );
    }
    lazy_static! {
        pub static ref Project_0_is_out_of_date_because_its_dependency_1_is_out_of_date: DiagnosticMessage = diag(
            6353,
            DiagnosticCategory::Message,
            "Project_0_is_out_of_date_because_its_dependency_1_is_out_of_date_6353",
            "Project '{0}' is out of date because its dependency '{1}' is out of date",
        );
    }
    lazy_static! {
        pub static ref Project_0_is_up_to_date_with_d_ts_files_from_its_dependencies: DiagnosticMessage = diag(
            6354,
            DiagnosticCategory::Message,
            "Project_0_is_up_to_date_with_d_ts_files_from_its_dependencies_6354",
            "Project '{0}' is up to date with .d.ts files from its dependencies",
        );
    }
    lazy_static! {
        pub static ref Projects_in_this_build_Colon_0: DiagnosticMessage = diag(
            6355,
            DiagnosticCategory::Message,
            "Projects_in_this_build_Colon_0_6355",
            "Projects in this build: {0}",
        );
    }
    lazy_static! {
        pub static ref A_non_dry_build_would_delete_the_following_files_Colon_0: DiagnosticMessage = diag(
            6356,
            DiagnosticCategory::Message,
            "A_non_dry_build_would_delete_the_following_files_Colon_0_6356",
            "A non-dry build would delete the following files: {0}",
        );
    }
    lazy_static! {
        pub static ref A_non_dry_build_would_build_project_0: DiagnosticMessage = diag(
            6357,
            DiagnosticCategory::Message,
            "A_non_dry_build_would_build_project_0_6357",
            "A non-dry build would build project '{0}'",
        );
    }
    lazy_static! {
        pub static ref Building_project_0: DiagnosticMessage = diag(
            6358,
            DiagnosticCategory::Message,
            "Building_project_0_6358",
            "Building project '{0}'...",
        );
    }
    lazy_static! {
        pub static ref Updating_output_timestamps_of_project_0: DiagnosticMessage = diag(
            6359,
            DiagnosticCategory::Message,
            "Updating_output_timestamps_of_project_0_6359",
            "Updating output timestamps of project '{0}'...",
        );
    }
    lazy_static! {
        pub static ref Project_0_is_up_to_date: DiagnosticMessage = diag(
            6361,
            DiagnosticCategory::Message,
            "Project_0_is_up_to_date_6361",
            "Project '{0}' is up to date",
        );
    }
    lazy_static! {
        pub static ref Skipping_build_of_project_0_because_its_dependency_1_has_errors: DiagnosticMessage = diag(
            6362,
            DiagnosticCategory::Message,
            "Skipping_build_of_project_0_because_its_dependency_1_has_errors_6362",
            "Skipping build of project '{0}' because its dependency '{1}' has errors",
        );
    }
    lazy_static! {
        pub static ref Project_0_can_t_be_built_because_its_dependency_1_has_errors: DiagnosticMessage = diag(
            6363,
            DiagnosticCategory::Message,
            "Project_0_can_t_be_built_because_its_dependency_1_has_errors_6363",
            "Project '{0}' can't be built because its dependency '{1}' has errors",
        );
    }
    lazy_static! {
        pub static ref Build_one_or_more_projects_and_their_dependencies_if_out_of_date: DiagnosticMessage = diag(
            6364,
            DiagnosticCategory::Message,
            "Build_one_or_more_projects_and_their_dependencies_if_out_of_date_6364",
            "Build one or more projects and their dependencies, if out of date",
        );
    }
    lazy_static! {
        pub static ref Delete_the_outputs_of_all_projects: DiagnosticMessage = diag(
            6365,
            DiagnosticCategory::Message,
            "Delete_the_outputs_of_all_projects_6365",
            "Delete the outputs of all projects",
        );
    }
    lazy_static! {
        pub static ref Show_what_would_be_built_or_deleted_if_specified_with_clean: DiagnosticMessage = diag(
            6367,
            DiagnosticCategory::Message,
            "Show_what_would_be_built_or_deleted_if_specified_with_clean_6367",
            "Show what would be built (or deleted, if specified with '--clean')",
        );
    }
    lazy_static! {
        pub static ref Option_build_must_be_the_first_command_line_argument: DiagnosticMessage = diag(
            6369,
            DiagnosticCategory::Error,
            "Option_build_must_be_the_first_command_line_argument_6369",
            "Option '--build' must be the first command line argument.",
        );
    }
    lazy_static! {
        pub static ref Options_0_and_1_cannot_be_combined: DiagnosticMessage = diag(
            6370,
            DiagnosticCategory::Error,
            "Options_0_and_1_cannot_be_combined_6370",
            "Options '{0}' and '{1}' cannot be combined.",
        );
    }
    lazy_static! {
        pub static ref Updating_unchanged_output_timestamps_of_project_0: DiagnosticMessage = diag(
            6371,
            DiagnosticCategory::Message,
            "Updating_unchanged_output_timestamps_of_project_0_6371",
            "Updating unchanged output timestamps of project '{0}'...",
        );
    }
    lazy_static! {
        pub static ref Project_0_is_out_of_date_because_output_of_its_dependency_1_has_changed: DiagnosticMessage = diag(
            6372,
            DiagnosticCategory::Message,
            "Project_0_is_out_of_date_because_output_of_its_dependency_1_has_changed_6372",
            "Project '{0}' is out of date because output of its dependency '{1}' has changed",
        );
    }
    lazy_static! {
        pub static ref Updating_output_of_project_0: DiagnosticMessage = diag(
            6373,
            DiagnosticCategory::Message,
            "Updating_output_of_project_0_6373",
            "Updating output of project '{0}'...",
        );
    }
    lazy_static! {
        pub static ref A_non_dry_build_would_update_timestamps_for_output_of_project_0: DiagnosticMessage = diag(
            6374,
            DiagnosticCategory::Message,
            "A_non_dry_build_would_update_timestamps_for_output_of_project_0_6374",
            "A non-dry build would update timestamps for output of project '{0}'",
        );
    }
    lazy_static! {
        pub static ref A_non_dry_build_would_update_output_of_project_0: DiagnosticMessage = diag(
            6375,
            DiagnosticCategory::Message,
            "A_non_dry_build_would_update_output_of_project_0_6375",
            "A non-dry build would update output of project '{0}'",
        );
    }
    lazy_static! {
        pub static ref Cannot_update_output_of_project_0_because_there_was_error_reading_file_1: DiagnosticMessage = diag(
            6376,
            DiagnosticCategory::Message,
            "Cannot_update_output_of_project_0_because_there_was_error_reading_file_1_6376",
            "Cannot update output of project '{0}' because there was error reading file '{1}'",
        );
    }
    lazy_static! {
        pub static ref Cannot_write_file_0_because_it_will_overwrite_tsbuildinfo_file_generated_by_referenced_project_1: DiagnosticMessage = diag(
            6377,
            DiagnosticCategory::Error,
            "Cannot_write_file_0_because_it_will_overwrite_tsbuildinfo_file_generated_by_referenced_project_1_6377",
            "Cannot write file '{0}' because it will overwrite '.tsbuildinfo' file generated by referenced project '{1}'",
        );
    }
    lazy_static! {
        pub static ref Enable_incremental_compilation: DiagnosticMessage = diag(
            6378,
            DiagnosticCategory::Message,
            "Enable_incremental_compilation_6378",
            "Enable incremental compilation",
        );
    }
    lazy_static! {
        pub static ref Composite_projects_may_not_disable_incremental_compilation: DiagnosticMessage = diag(
            6379,
            DiagnosticCategory::Error,
            "Composite_projects_may_not_disable_incremental_compilation_6379",
            "Composite projects may not disable incremental compilation.",
        );
    }
    lazy_static! {
        pub static ref Specify_file_to_store_incremental_compilation_information: DiagnosticMessage = diag(
            6380,
            DiagnosticCategory::Message,
            "Specify_file_to_store_incremental_compilation_information_6380",
            "Specify file to store incremental compilation information",
        );
    }
    lazy_static! {
        pub static ref Project_0_is_out_of_date_because_output_for_it_was_generated_with_version_1_that_differs_with_current_version_2: DiagnosticMessage = diag(
            6381,
            DiagnosticCategory::Message,
            "Project_0_is_out_of_date_because_output_for_it_was_generated_with_version_1_that_differs_with_curren_6381",
            "Project '{0}' is out of date because output for it was generated with version '{1}' that differs with current version '{2}'",
        );
    }
    lazy_static! {
        pub static ref Skipping_build_of_project_0_because_its_dependency_1_was_not_built: DiagnosticMessage = diag(
            6382,
            DiagnosticCategory::Message,
            "Skipping_build_of_project_0_because_its_dependency_1_was_not_built_6382",
            "Skipping build of project '{0}' because its dependency '{1}' was not built",
        );
    }
    lazy_static! {
        pub static ref Project_0_can_t_be_built_because_its_dependency_1_was_not_built: DiagnosticMessage = diag(
            6383,
            DiagnosticCategory::Message,
            "Project_0_can_t_be_built_because_its_dependency_1_was_not_built_6383",
            "Project '{0}' can't be built because its dependency '{1}' was not built",
        );
    }
    lazy_static! {
        pub static ref Have_recompiles_in_incremental_and_watch_assume_that_changes_within_a_file_will_only_affect_files_directly_depending_on_it: DiagnosticMessage = diag(
            6384,
            DiagnosticCategory::Message,
            "Have_recompiles_in_incremental_and_watch_assume_that_changes_within_a_file_will_only_affect_files_di_6384",
            "Have recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it.",
        );
    }
    lazy_static! {
        pub static ref _0_is_deprecated: DiagnosticMessage = diag(
            6385,
            DiagnosticCategory::Suggestion,
            "_0_is_deprecated_6385",
            "'{0}' is deprecated.",
        );
    }
    lazy_static! {
        pub static ref Performance_timings_for_diagnostics_or_extendedDiagnostics_are_not_available_in_this_session_A_native_implementation_of_the_Web_Performance_API_could_not_be_found: DiagnosticMessage = diag(
            6386,
            DiagnosticCategory::Message,
            "Performance_timings_for_diagnostics_or_extendedDiagnostics_are_not_available_in_this_session_A_nativ_6386",
            "Performance timings for '--diagnostics' or '--extendedDiagnostics' are not available in this session. A native implementation of the Web Performance API could not be found.",
        );
    }
    lazy_static! {
        pub static ref The_signature_0_of_1_is_deprecated: DiagnosticMessage = diag(
            6387,
            DiagnosticCategory::Suggestion,
            "The_signature_0_of_1_is_deprecated_6387",
            "The signature '{0}' of '{1}' is deprecated.",
        );
    }
    lazy_static! {
        pub static ref Project_0_is_being_forcibly_rebuilt: DiagnosticMessage = diag(
            6388,
            DiagnosticCategory::Message,
            "Project_0_is_being_forcibly_rebuilt_6388",
            "Project '{0}' is being forcibly rebuilt",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_module_0_from_1_of_old_program_it_was_not_resolved: DiagnosticMessage = diag(
            6389,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_module_0_from_1_of_old_program_it_was_not_resolved_6389",
            "Reusing resolution of module '{0}' from '{1}' of old program, it was not resolved.",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved_to_2: DiagnosticMessage = diag(
            6390,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved__6390",
            "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was successfully resolved to '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved_to_2_with_Package_ID_3: DiagnosticMessage = diag(
            6391,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved__6391",
            "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was successfully resolved to '{2}' with Package ID '{3}'.",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_not_resolved: DiagnosticMessage = diag(
            6392,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_not_resolved_6392",
            "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was not resolved.",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3: DiagnosticMessage = diag(
            6393,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_6393",
            "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}'.",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3_with_Package_ID_4: DiagnosticMessage = diag(
            6394,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_6394",
            "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}' with Package ID '{4}'.",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_not_resolved: DiagnosticMessage = diag(
            6395,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_not_resolved_6395",
            "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was not resolved.",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3: DiagnosticMessage = diag(
            6396,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_succes_6396",
            "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}'.",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3_with_Package_ID_4: DiagnosticMessage = diag(
            6397,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_succes_6397",
            "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}' with Package ID '{4}'.",
        );
    }
    lazy_static! {
        pub static ref Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_not_resolved: DiagnosticMessage = diag(
            6398,
            DiagnosticCategory::Message,
            "Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_not_re_6398",
            "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was not resolved.",
        );
    }
    lazy_static! {
        pub static ref The_expected_type_comes_from_property_0_which_is_declared_here_on_type_1: DiagnosticMessage = diag(
            6500,
            DiagnosticCategory::Message,
            "The_expected_type_comes_from_property_0_which_is_declared_here_on_type_1_6500",
            "The expected type comes from property '{0}' which is declared here on type '{1}'",
        );
    }
    lazy_static! {
        pub static ref The_expected_type_comes_from_this_index_signature: DiagnosticMessage = diag(
            6501,
            DiagnosticCategory::Message,
            "The_expected_type_comes_from_this_index_signature_6501",
            "The expected type comes from this index signature.",
        );
    }
    lazy_static! {
        pub static ref The_expected_type_comes_from_the_return_type_of_this_signature: DiagnosticMessage = diag(
            6502,
            DiagnosticCategory::Message,
            "The_expected_type_comes_from_the_return_type_of_this_signature_6502",
            "The expected type comes from the return type of this signature.",
        );
    }
    lazy_static! {
        pub static ref Print_names_of_files_that_are_part_of_the_compilation_and_then_stop_processing: DiagnosticMessage = diag(
            6503,
            DiagnosticCategory::Message,
            "Print_names_of_files_that_are_part_of_the_compilation_and_then_stop_processing_6503",
            "Print names of files that are part of the compilation and then stop processing.",
        );
    }
    lazy_static! {
        pub static ref File_0_is_a_JavaScript_file_Did_you_mean_to_enable_the_allowJs_option: DiagnosticMessage = diag(
            6504,
            DiagnosticCategory::Error,
            "File_0_is_a_JavaScript_file_Did_you_mean_to_enable_the_allowJs_option_6504",
            "File '{0}' is a JavaScript file. Did you mean to enable the 'allowJs' option?",
        );
    }
    lazy_static! {
        pub static ref Print_names_of_files_and_the_reason_they_are_part_of_the_compilation: DiagnosticMessage = diag(
            6505,
            DiagnosticCategory::Message,
            "Print_names_of_files_and_the_reason_they_are_part_of_the_compilation_6505",
            "Print names of files and the reason they are part of the compilation.",
        );
    }
    lazy_static! {
        pub static ref Consider_adding_a_declare_modifier_to_this_class: DiagnosticMessage = diag(
            6506,
            DiagnosticCategory::Message,
            "Consider_adding_a_declare_modifier_to_this_class_6506",
            "Consider adding a 'declare' modifier to this class.",
        );
    }
    lazy_static! {
        pub static ref Allow_JavaScript_files_to_be_a_part_of_your_program_Use_the_checkJS_option_to_get_errors_from_these_files: DiagnosticMessage = diag(
            6600,
            DiagnosticCategory::Message,
            "Allow_JavaScript_files_to_be_a_part_of_your_program_Use_the_checkJS_option_to_get_errors_from_these__6600",
            "Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files.",
        );
    }
    lazy_static! {
        pub static ref Allow_import_x_from_y_when_a_module_doesn_t_have_a_default_export: DiagnosticMessage = diag(
            6601,
            DiagnosticCategory::Message,
            "Allow_import_x_from_y_when_a_module_doesn_t_have_a_default_export_6601",
            "Allow 'import x from y' when a module doesn't have a default export.",
        );
    }
    lazy_static! {
        pub static ref Allow_accessing_UMD_globals_from_modules: DiagnosticMessage = diag(
            6602,
            DiagnosticCategory::Message,
            "Allow_accessing_UMD_globals_from_modules_6602",
            "Allow accessing UMD globals from modules.",
        );
    }
    lazy_static! {
        pub static ref Disable_error_reporting_for_unreachable_code: DiagnosticMessage = diag(
            6603,
            DiagnosticCategory::Message,
            "Disable_error_reporting_for_unreachable_code_6603",
            "Disable error reporting for unreachable code.",
        );
    }
    lazy_static! {
        pub static ref Disable_error_reporting_for_unused_labels: DiagnosticMessage = diag(
            6604,
            DiagnosticCategory::Message,
            "Disable_error_reporting_for_unused_labels_6604",
            "Disable error reporting for unused labels.",
        );
    }
    lazy_static! {
        pub static ref Ensure_use_strict_is_always_emitted: DiagnosticMessage = diag(
            6605,
            DiagnosticCategory::Message,
            "Ensure_use_strict_is_always_emitted_6605",
            "Ensure 'use strict' is always emitted.",
        );
    }
    lazy_static! {
        pub static ref Have_recompiles_in_projects_that_use_incremental_and_watch_mode_assume_that_changes_within_a_file_will_only_affect_files_directly_depending_on_it: DiagnosticMessage = diag(
            6606,
            DiagnosticCategory::Message,
            "Have_recompiles_in_projects_that_use_incremental_and_watch_mode_assume_that_changes_within_a_file_wi_6606",
            "Have recompiles in projects that use `incremental` and `watch` mode assume that changes within a file will only affect files directly depending on it.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_base_directory_to_resolve_non_relative_module_names: DiagnosticMessage = diag(
            6607,
            DiagnosticCategory::Message,
            "Specify_the_base_directory_to_resolve_non_relative_module_names_6607",
            "Specify the base directory to resolve non-relative module names.",
        );
    }
    lazy_static! {
        pub static ref No_longer_supported_In_early_versions_manually_set_the_text_encoding_for_reading_files: DiagnosticMessage = diag(
            6608,
            DiagnosticCategory::Message,
            "No_longer_supported_In_early_versions_manually_set_the_text_encoding_for_reading_files_6608",
            "No longer supported. In early versions, manually set the text encoding for reading files.",
        );
    }
    lazy_static! {
        pub static ref Enable_error_reporting_in_type_checked_JavaScript_files: DiagnosticMessage = diag(
            6609,
            DiagnosticCategory::Message,
            "Enable_error_reporting_in_type_checked_JavaScript_files_6609",
            "Enable error reporting in type-checked JavaScript files.",
        );
    }
    lazy_static! {
        pub static ref Enable_constraints_that_allow_a_TypeScript_project_to_be_used_with_project_references: DiagnosticMessage = diag(
            6611,
            DiagnosticCategory::Message,
            "Enable_constraints_that_allow_a_TypeScript_project_to_be_used_with_project_references_6611",
            "Enable constraints that allow a TypeScript project to be used with project references.",
        );
    }
    lazy_static! {
        pub static ref Generate_d_ts_files_from_TypeScript_and_JavaScript_files_in_your_project: DiagnosticMessage = diag(
            6612,
            DiagnosticCategory::Message,
            "Generate_d_ts_files_from_TypeScript_and_JavaScript_files_in_your_project_6612",
            "Generate .d.ts files from TypeScript and JavaScript files in your project.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_output_directory_for_generated_declaration_files: DiagnosticMessage = diag(
            6613,
            DiagnosticCategory::Message,
            "Specify_the_output_directory_for_generated_declaration_files_6613",
            "Specify the output directory for generated declaration files.",
        );
    }
    lazy_static! {
        pub static ref Create_sourcemaps_for_d_ts_files: DiagnosticMessage = diag(
            6614,
            DiagnosticCategory::Message,
            "Create_sourcemaps_for_d_ts_files_6614",
            "Create sourcemaps for d.ts files.",
        );
    }
    lazy_static! {
        pub static ref Output_compiler_performance_information_after_building: DiagnosticMessage = diag(
            6615,
            DiagnosticCategory::Message,
            "Output_compiler_performance_information_after_building_6615",
            "Output compiler performance information after building.",
        );
    }
    lazy_static! {
        pub static ref Disables_inference_for_type_acquisition_by_looking_at_filenames_in_a_project: DiagnosticMessage = diag(
            6616,
            DiagnosticCategory::Message,
            "Disables_inference_for_type_acquisition_by_looking_at_filenames_in_a_project_6616",
            "Disables inference for type acquisition by looking at filenames in a project.",
        );
    }
    lazy_static! {
        pub static ref Reduce_the_number_of_projects_loaded_automatically_by_TypeScript: DiagnosticMessage = diag(
            6617,
            DiagnosticCategory::Message,
            "Reduce_the_number_of_projects_loaded_automatically_by_TypeScript_6617",
            "Reduce the number of projects loaded automatically by TypeScript.",
        );
    }
    lazy_static! {
        pub static ref Remove_the_20mb_cap_on_total_source_code_size_for_JavaScript_files_in_the_TypeScript_language_server: DiagnosticMessage = diag(
            6618,
            DiagnosticCategory::Message,
            "Remove_the_20mb_cap_on_total_source_code_size_for_JavaScript_files_in_the_TypeScript_language_server_6618",
            "Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server.",
        );
    }
    lazy_static! {
        pub static ref Opt_a_project_out_of_multi_project_reference_checking_when_editing: DiagnosticMessage = diag(
            6619,
            DiagnosticCategory::Message,
            "Opt_a_project_out_of_multi_project_reference_checking_when_editing_6619",
            "Opt a project out of multi-project reference checking when editing.",
        );
    }
    lazy_static! {
        pub static ref Disable_preferring_source_files_instead_of_declaration_files_when_referencing_composite_projects: DiagnosticMessage = diag(
            6620,
            DiagnosticCategory::Message,
            "Disable_preferring_source_files_instead_of_declaration_files_when_referencing_composite_projects_6620",
            "Disable preferring source files instead of declaration files when referencing composite projects",
        );
    }
    lazy_static! {
        pub static ref Emit_more_compliant_but_verbose_and_less_performant_JavaScript_for_iteration: DiagnosticMessage = diag(
            6621,
            DiagnosticCategory::Message,
            "Emit_more_compliant_but_verbose_and_less_performant_JavaScript_for_iteration_6621",
            "Emit more compliant, but verbose and less performant JavaScript for iteration.",
        );
    }
    lazy_static! {
        pub static ref Emit_a_UTF_8_Byte_Order_Mark_BOM_in_the_beginning_of_output_files: DiagnosticMessage = diag(
            6622,
            DiagnosticCategory::Message,
            "Emit_a_UTF_8_Byte_Order_Mark_BOM_in_the_beginning_of_output_files_6622",
            "Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.",
        );
    }
    lazy_static! {
        pub static ref Only_output_d_ts_files_and_not_JavaScript_files: DiagnosticMessage = diag(
            6623,
            DiagnosticCategory::Message,
            "Only_output_d_ts_files_and_not_JavaScript_files_6623",
            "Only output d.ts files and not JavaScript files.",
        );
    }
    lazy_static! {
        pub static ref Emit_design_type_metadata_for_decorated_declarations_in_source_files: DiagnosticMessage = diag(
            6624,
            DiagnosticCategory::Message,
            "Emit_design_type_metadata_for_decorated_declarations_in_source_files_6624",
            "Emit design-type metadata for decorated declarations in source files.",
        );
    }
    lazy_static! {
        pub static ref Disable_the_type_acquisition_for_JavaScript_projects: DiagnosticMessage = diag(
            6625,
            DiagnosticCategory::Message,
            "Disable_the_type_acquisition_for_JavaScript_projects_6625",
            "Disable the type acquisition for JavaScript projects",
        );
    }
    lazy_static! {
        pub static ref Emit_additional_JavaScript_to_ease_support_for_importing_CommonJS_modules_This_enables_allowSyntheticDefaultImports_for_type_compatibility: DiagnosticMessage = diag(
            6626,
            DiagnosticCategory::Message,
            "Emit_additional_JavaScript_to_ease_support_for_importing_CommonJS_modules_This_enables_allowSyntheti_6626",
            "Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility.",
        );
    }
    lazy_static! {
        pub static ref Filters_results_from_the_include_option: DiagnosticMessage = diag(
            6627,
            DiagnosticCategory::Message,
            "Filters_results_from_the_include_option_6627",
            "Filters results from the `include` option.",
        );
    }
    lazy_static! {
        pub static ref Remove_a_list_of_directories_from_the_watch_process: DiagnosticMessage = diag(
            6628,
            DiagnosticCategory::Message,
            "Remove_a_list_of_directories_from_the_watch_process_6628",
            "Remove a list of directories from the watch process.",
        );
    }
    lazy_static! {
        pub static ref Remove_a_list_of_files_from_the_watch_mode_s_processing: DiagnosticMessage = diag(
            6629,
            DiagnosticCategory::Message,
            "Remove_a_list_of_files_from_the_watch_mode_s_processing_6629",
            "Remove a list of files from the watch mode's processing.",
        );
    }
    lazy_static! {
        pub static ref Enable_experimental_support_for_TC39_stage_2_draft_decorators: DiagnosticMessage = diag(
            6630,
            DiagnosticCategory::Message,
            "Enable_experimental_support_for_TC39_stage_2_draft_decorators_6630",
            "Enable experimental support for TC39 stage 2 draft decorators.",
        );
    }
    lazy_static! {
        pub static ref Print_files_read_during_the_compilation_including_why_it_was_included: DiagnosticMessage = diag(
            6631,
            DiagnosticCategory::Message,
            "Print_files_read_during_the_compilation_including_why_it_was_included_6631",
            "Print files read during the compilation including why it was included.",
        );
    }
    lazy_static! {
        pub static ref Output_more_detailed_compiler_performance_information_after_building: DiagnosticMessage = diag(
            6632,
            DiagnosticCategory::Message,
            "Output_more_detailed_compiler_performance_information_after_building_6632",
            "Output more detailed compiler performance information after building.",
        );
    }
    lazy_static! {
        pub static ref Specify_one_or_more_path_or_node_module_references_to_base_configuration_files_from_which_settings_are_inherited: DiagnosticMessage = diag(
            6633,
            DiagnosticCategory::Message,
            "Specify_one_or_more_path_or_node_module_references_to_base_configuration_files_from_which_settings_a_6633",
            "Specify one or more path or node module references to base configuration files from which settings are inherited.",
        );
    }
    lazy_static! {
        pub static ref Specify_what_approach_the_watcher_should_use_if_the_system_runs_out_of_native_file_watchers: DiagnosticMessage = diag(
            6634,
            DiagnosticCategory::Message,
            "Specify_what_approach_the_watcher_should_use_if_the_system_runs_out_of_native_file_watchers_6634",
            "Specify what approach the watcher should use if the system runs out of native file watchers.",
        );
    }
    lazy_static! {
        pub static ref Include_a_list_of_files_This_does_not_support_glob_patterns_as_opposed_to_include: DiagnosticMessage = diag(
            6635,
            DiagnosticCategory::Message,
            "Include_a_list_of_files_This_does_not_support_glob_patterns_as_opposed_to_include_6635",
            "Include a list of files. This does not support glob patterns, as opposed to `include`.",
        );
    }
    lazy_static! {
        pub static ref Build_all_projects_including_those_that_appear_to_be_up_to_date: DiagnosticMessage = diag(
            6636,
            DiagnosticCategory::Message,
            "Build_all_projects_including_those_that_appear_to_be_up_to_date_6636",
            "Build all projects, including those that appear to be up to date",
        );
    }
    lazy_static! {
        pub static ref Ensure_that_casing_is_correct_in_imports: DiagnosticMessage = diag(
            6637,
            DiagnosticCategory::Message,
            "Ensure_that_casing_is_correct_in_imports_6637",
            "Ensure that casing is correct in imports.",
        );
    }
    lazy_static! {
        pub static ref Emit_a_v8_CPU_profile_of_the_compiler_run_for_debugging: DiagnosticMessage = diag(
            6638,
            DiagnosticCategory::Message,
            "Emit_a_v8_CPU_profile_of_the_compiler_run_for_debugging_6638",
            "Emit a v8 CPU profile of the compiler run for debugging.",
        );
    }
    lazy_static! {
        pub static ref Allow_importing_helper_functions_from_tslib_once_per_project_instead_of_including_them_per_file: DiagnosticMessage = diag(
            6639,
            DiagnosticCategory::Message,
            "Allow_importing_helper_functions_from_tslib_once_per_project_instead_of_including_them_per_file_6639",
            "Allow importing helper functions from tslib once per project, instead of including them per-file.",
        );
    }
    lazy_static! {
        pub static ref Specify_a_list_of_glob_patterns_that_match_files_to_be_included_in_compilation: DiagnosticMessage = diag(
            6641,
            DiagnosticCategory::Message,
            "Specify_a_list_of_glob_patterns_that_match_files_to_be_included_in_compilation_6641",
            "Specify a list of glob patterns that match files to be included in compilation.",
        );
    }
    lazy_static! {
        pub static ref Save_tsbuildinfo_files_to_allow_for_incremental_compilation_of_projects: DiagnosticMessage = diag(
            6642,
            DiagnosticCategory::Message,
            "Save_tsbuildinfo_files_to_allow_for_incremental_compilation_of_projects_6642",
            "Save .tsbuildinfo files to allow for incremental compilation of projects.",
        );
    }
    lazy_static! {
        pub static ref Include_sourcemap_files_inside_the_emitted_JavaScript: DiagnosticMessage = diag(
            6643,
            DiagnosticCategory::Message,
            "Include_sourcemap_files_inside_the_emitted_JavaScript_6643",
            "Include sourcemap files inside the emitted JavaScript.",
        );
    }
    lazy_static! {
        pub static ref Include_source_code_in_the_sourcemaps_inside_the_emitted_JavaScript: DiagnosticMessage = diag(
            6644,
            DiagnosticCategory::Message,
            "Include_source_code_in_the_sourcemaps_inside_the_emitted_JavaScript_6644",
            "Include source code in the sourcemaps inside the emitted JavaScript.",
        );
    }
    lazy_static! {
        pub static ref Ensure_that_each_file_can_be_safely_transpiled_without_relying_on_other_imports: DiagnosticMessage = diag(
            6645,
            DiagnosticCategory::Message,
            "Ensure_that_each_file_can_be_safely_transpiled_without_relying_on_other_imports_6645",
            "Ensure that each file can be safely transpiled without relying on other imports.",
        );
    }
    lazy_static! {
        pub static ref Specify_what_JSX_code_is_generated: DiagnosticMessage = diag(
            6646,
            DiagnosticCategory::Message,
            "Specify_what_JSX_code_is_generated_6646",
            "Specify what JSX code is generated.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_JSX_factory_function_used_when_targeting_React_JSX_emit_e_g_React_createElement_or_h: DiagnosticMessage = diag(
            6647,
            DiagnosticCategory::Message,
            "Specify_the_JSX_factory_function_used_when_targeting_React_JSX_emit_e_g_React_createElement_or_h_6647",
            "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'",
        );
    }
    lazy_static! {
        pub static ref Specify_the_JSX_Fragment_reference_used_for_fragments_when_targeting_React_JSX_emit_e_g_React_Fragment_or_Fragment: DiagnosticMessage = diag(
            6648,
            DiagnosticCategory::Message,
            "Specify_the_JSX_Fragment_reference_used_for_fragments_when_targeting_React_JSX_emit_e_g_React_Fragme_6648",
            "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.",
        );
    }
    lazy_static! {
        pub static ref Specify_module_specifier_used_to_import_the_JSX_factory_functions_when_using_jsx_Colon_react_jsx_Asterisk: DiagnosticMessage = diag(
            6649,
            DiagnosticCategory::Message,
            "Specify_module_specifier_used_to_import_the_JSX_factory_functions_when_using_jsx_Colon_react_jsx_Ast_6649",
            "Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`",
        );
    }
    lazy_static! {
        pub static ref Make_keyof_only_return_strings_instead_of_string_numbers_or_symbols_Legacy_option: DiagnosticMessage = diag(
            6650,
            DiagnosticCategory::Message,
            "Make_keyof_only_return_strings_instead_of_string_numbers_or_symbols_Legacy_option_6650",
            "Make keyof only return strings instead of string, numbers or symbols. Legacy option.",
        );
    }
    lazy_static! {
        pub static ref Specify_a_set_of_bundled_library_declaration_files_that_describe_the_target_runtime_environment: DiagnosticMessage = diag(
            6651,
            DiagnosticCategory::Message,
            "Specify_a_set_of_bundled_library_declaration_files_that_describe_the_target_runtime_environment_6651",
            "Specify a set of bundled library declaration files that describe the target runtime environment.",
        );
    }
    lazy_static! {
        pub static ref Print_the_names_of_emitted_files_after_a_compilation: DiagnosticMessage = diag(
            6652,
            DiagnosticCategory::Message,
            "Print_the_names_of_emitted_files_after_a_compilation_6652",
            "Print the names of emitted files after a compilation.",
        );
    }
    lazy_static! {
        pub static ref Print_all_of_the_files_read_during_the_compilation: DiagnosticMessage = diag(
            6653,
            DiagnosticCategory::Message,
            "Print_all_of_the_files_read_during_the_compilation_6653",
            "Print all of the files read during the compilation.",
        );
    }
    lazy_static! {
        pub static ref Set_the_language_of_the_messaging_from_TypeScript_This_does_not_affect_emit: DiagnosticMessage = diag(
            6654,
            DiagnosticCategory::Message,
            "Set_the_language_of_the_messaging_from_TypeScript_This_does_not_affect_emit_6654",
            "Set the language of the messaging from TypeScript. This does not affect emit.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations: DiagnosticMessage = diag(
            6655,
            DiagnosticCategory::Message,
            "Specify_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations_6655",
            "Specify the location where debugger should locate map files instead of generated locations.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_maximum_folder_depth_used_for_checking_JavaScript_files_from_node_modules_Only_applicable_with_allowJs: DiagnosticMessage = diag(
            6656,
            DiagnosticCategory::Message,
            "Specify_the_maximum_folder_depth_used_for_checking_JavaScript_files_from_node_modules_Only_applicabl_6656",
            "Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`.",
        );
    }
    lazy_static! {
        pub static ref Specify_what_module_code_is_generated: DiagnosticMessage = diag(
            6657,
            DiagnosticCategory::Message,
            "Specify_what_module_code_is_generated_6657",
            "Specify what module code is generated.",
        );
    }
    lazy_static! {
        pub static ref Specify_how_TypeScript_looks_up_a_file_from_a_given_module_specifier: DiagnosticMessage = diag(
            6658,
            DiagnosticCategory::Message,
            "Specify_how_TypeScript_looks_up_a_file_from_a_given_module_specifier_6658",
            "Specify how TypeScript looks up a file from a given module specifier.",
        );
    }
    lazy_static! {
        pub static ref Set_the_newline_character_for_emitting_files: DiagnosticMessage = diag(
            6659,
            DiagnosticCategory::Message,
            "Set_the_newline_character_for_emitting_files_6659",
            "Set the newline character for emitting files.",
        );
    }
    lazy_static! {
        pub static ref Disable_emitting_files_from_a_compilation: DiagnosticMessage = diag(
            6660,
            DiagnosticCategory::Message,
            "Disable_emitting_files_from_a_compilation_6660",
            "Disable emitting files from a compilation.",
        );
    }
    lazy_static! {
        pub static ref Disable_generating_custom_helper_functions_like_extends_in_compiled_output: DiagnosticMessage = diag(
            6661,
            DiagnosticCategory::Message,
            "Disable_generating_custom_helper_functions_like_extends_in_compiled_output_6661",
            "Disable generating custom helper functions like `__extends` in compiled output.",
        );
    }
    lazy_static! {
        pub static ref Disable_emitting_files_if_any_type_checking_errors_are_reported: DiagnosticMessage = diag(
            6662,
            DiagnosticCategory::Message,
            "Disable_emitting_files_if_any_type_checking_errors_are_reported_6662",
            "Disable emitting files if any type checking errors are reported.",
        );
    }
    lazy_static! {
        pub static ref Disable_truncating_types_in_error_messages: DiagnosticMessage = diag(
            6663,
            DiagnosticCategory::Message,
            "Disable_truncating_types_in_error_messages_6663",
            "Disable truncating types in error messages.",
        );
    }
    lazy_static! {
        pub static ref Enable_error_reporting_for_fallthrough_cases_in_switch_statements: DiagnosticMessage = diag(
            6664,
            DiagnosticCategory::Message,
            "Enable_error_reporting_for_fallthrough_cases_in_switch_statements_6664",
            "Enable error reporting for fallthrough cases in switch statements.",
        );
    }
    lazy_static! {
        pub static ref Enable_error_reporting_for_expressions_and_declarations_with_an_implied_any_type: DiagnosticMessage = diag(
            6665,
            DiagnosticCategory::Message,
            "Enable_error_reporting_for_expressions_and_declarations_with_an_implied_any_type_6665",
            "Enable error reporting for expressions and declarations with an implied `any` type..",
        );
    }
    lazy_static! {
        pub static ref Ensure_overriding_members_in_derived_classes_are_marked_with_an_override_modifier: DiagnosticMessage = diag(
            6666,
            DiagnosticCategory::Message,
            "Ensure_overriding_members_in_derived_classes_are_marked_with_an_override_modifier_6666",
            "Ensure overriding members in derived classes are marked with an override modifier.",
        );
    }
    lazy_static! {
        pub static ref Enable_error_reporting_for_codepaths_that_do_not_explicitly_return_in_a_function: DiagnosticMessage = diag(
            6667,
            DiagnosticCategory::Message,
            "Enable_error_reporting_for_codepaths_that_do_not_explicitly_return_in_a_function_6667",
            "Enable error reporting for codepaths that do not explicitly return in a function.",
        );
    }
    lazy_static! {
        pub static ref Enable_error_reporting_when_this_is_given_the_type_any: DiagnosticMessage = diag(
            6668,
            DiagnosticCategory::Message,
            "Enable_error_reporting_when_this_is_given_the_type_any_6668",
            "Enable error reporting when `this` is given the type `any`.",
        );
    }
    lazy_static! {
        pub static ref Disable_adding_use_strict_directives_in_emitted_JavaScript_files: DiagnosticMessage = diag(
            6669,
            DiagnosticCategory::Message,
            "Disable_adding_use_strict_directives_in_emitted_JavaScript_files_6669",
            "Disable adding 'use strict' directives in emitted JavaScript files.",
        );
    }
    lazy_static! {
        pub static ref Disable_including_any_library_files_including_the_default_lib_d_ts: DiagnosticMessage = diag(
            6670,
            DiagnosticCategory::Message,
            "Disable_including_any_library_files_including_the_default_lib_d_ts_6670",
            "Disable including any library files, including the default lib.d.ts.",
        );
    }
    lazy_static! {
        pub static ref Enforces_using_indexed_accessors_for_keys_declared_using_an_indexed_type: DiagnosticMessage = diag(
            6671,
            DiagnosticCategory::Message,
            "Enforces_using_indexed_accessors_for_keys_declared_using_an_indexed_type_6671",
            "Enforces using indexed accessors for keys declared using an indexed type",
        );
    }
    lazy_static! {
        pub static ref Disallow_import_s_require_s_or_reference_s_from_expanding_the_number_of_files_TypeScript_should_add_to_a_project: DiagnosticMessage = diag(
            6672,
            DiagnosticCategory::Message,
            "Disallow_import_s_require_s_or_reference_s_from_expanding_the_number_of_files_TypeScript_should_add__6672",
            "Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project.",
        );
    }
    lazy_static! {
        pub static ref Disable_strict_checking_of_generic_signatures_in_function_types: DiagnosticMessage = diag(
            6673,
            DiagnosticCategory::Message,
            "Disable_strict_checking_of_generic_signatures_in_function_types_6673",
            "Disable strict checking of generic signatures in function types.",
        );
    }
    lazy_static! {
        pub static ref Add_undefined_to_a_type_when_accessed_using_an_index: DiagnosticMessage = diag(
            6674,
            DiagnosticCategory::Message,
            "Add_undefined_to_a_type_when_accessed_using_an_index_6674",
            "Add `undefined` to a type when accessed using an index.",
        );
    }
    lazy_static! {
        pub static ref Enable_error_reporting_when_a_local_variables_aren_t_read: DiagnosticMessage = diag(
            6675,
            DiagnosticCategory::Message,
            "Enable_error_reporting_when_a_local_variables_aren_t_read_6675",
            "Enable error reporting when a local variables aren't read.",
        );
    }
    lazy_static! {
        pub static ref Raise_an_error_when_a_function_parameter_isn_t_read: DiagnosticMessage = diag(
            6676,
            DiagnosticCategory::Message,
            "Raise_an_error_when_a_function_parameter_isn_t_read_6676",
            "Raise an error when a function parameter isn't read",
        );
    }
    lazy_static! {
        pub static ref Deprecated_setting_Use_outFile_instead: DiagnosticMessage = diag(
            6677,
            DiagnosticCategory::Message,
            "Deprecated_setting_Use_outFile_instead_6677",
            "Deprecated setting. Use `outFile` instead.",
        );
    }
    lazy_static! {
        pub static ref Specify_an_output_folder_for_all_emitted_files: DiagnosticMessage = diag(
            6678,
            DiagnosticCategory::Message,
            "Specify_an_output_folder_for_all_emitted_files_6678",
            "Specify an output folder for all emitted files.",
        );
    }
    lazy_static! {
        pub static ref Specify_a_file_that_bundles_all_outputs_into_one_JavaScript_file_If_declaration_is_true_also_designates_a_file_that_bundles_all_d_ts_output: DiagnosticMessage = diag(
            6679,
            DiagnosticCategory::Message,
            "Specify_a_file_that_bundles_all_outputs_into_one_JavaScript_file_If_declaration_is_true_also_designa_6679",
            "Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output.",
        );
    }
    lazy_static! {
        pub static ref Specify_a_set_of_entries_that_re_map_imports_to_additional_lookup_locations: DiagnosticMessage = diag(
            6680,
            DiagnosticCategory::Message,
            "Specify_a_set_of_entries_that_re_map_imports_to_additional_lookup_locations_6680",
            "Specify a set of entries that re-map imports to additional lookup locations.",
        );
    }
    lazy_static! {
        pub static ref Specify_a_list_of_language_service_plugins_to_include: DiagnosticMessage = diag(
            6681,
            DiagnosticCategory::Message,
            "Specify_a_list_of_language_service_plugins_to_include_6681",
            "Specify a list of language service plugins to include.",
        );
    }
    lazy_static! {
        pub static ref Disable_erasing_const_enum_declarations_in_generated_code: DiagnosticMessage = diag(
            6682,
            DiagnosticCategory::Message,
            "Disable_erasing_const_enum_declarations_in_generated_code_6682",
            "Disable erasing `const enum` declarations in generated code.",
        );
    }
    lazy_static! {
        pub static ref Disable_resolving_symlinks_to_their_realpath_This_correlates_to_the_same_flag_in_node: DiagnosticMessage = diag(
            6683,
            DiagnosticCategory::Message,
            "Disable_resolving_symlinks_to_their_realpath_This_correlates_to_the_same_flag_in_node_6683",
            "Disable resolving symlinks to their realpath. This correlates to the same flag in node.",
        );
    }
    lazy_static! {
        pub static ref Disable_wiping_the_console_in_watch_mode: DiagnosticMessage = diag(
            6684,
            DiagnosticCategory::Message,
            "Disable_wiping_the_console_in_watch_mode_6684",
            "Disable wiping the console in watch mode",
        );
    }
    lazy_static! {
        pub static ref Enable_color_and_formatting_in_TypeScript_s_output_to_make_compiler_errors_easier_to_read: DiagnosticMessage = diag(
            6685,
            DiagnosticCategory::Message,
            "Enable_color_and_formatting_in_TypeScript_s_output_to_make_compiler_errors_easier_to_read_6685",
            "Enable color and formatting in TypeScript's output to make compiler errors easier to read",
        );
    }
    lazy_static! {
        pub static ref Specify_the_object_invoked_for_createElement_This_only_applies_when_targeting_react_JSX_emit: DiagnosticMessage = diag(
            6686,
            DiagnosticCategory::Message,
            "Specify_the_object_invoked_for_createElement_This_only_applies_when_targeting_react_JSX_emit_6686",
            "Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit.",
        );
    }
    lazy_static! {
        pub static ref Specify_an_array_of_objects_that_specify_paths_for_projects_Used_in_project_references: DiagnosticMessage = diag(
            6687,
            DiagnosticCategory::Message,
            "Specify_an_array_of_objects_that_specify_paths_for_projects_Used_in_project_references_6687",
            "Specify an array of objects that specify paths for projects. Used in project references.",
        );
    }
    lazy_static! {
        pub static ref Disable_emitting_comments: DiagnosticMessage = diag(
            6688,
            DiagnosticCategory::Message,
            "Disable_emitting_comments_6688",
            "Disable emitting comments.",
        );
    }
    lazy_static! {
        pub static ref Enable_importing_json_files: DiagnosticMessage = diag(
            6689,
            DiagnosticCategory::Message,
            "Enable_importing_json_files_6689",
            "Enable importing .json files",
        );
    }
    lazy_static! {
        pub static ref Specify_the_root_folder_within_your_source_files: DiagnosticMessage = diag(
            6690,
            DiagnosticCategory::Message,
            "Specify_the_root_folder_within_your_source_files_6690",
            "Specify the root folder within your source files.",
        );
    }
    lazy_static! {
        pub static ref Allow_multiple_folders_to_be_treated_as_one_when_resolving_modules: DiagnosticMessage = diag(
            6691,
            DiagnosticCategory::Message,
            "Allow_multiple_folders_to_be_treated_as_one_when_resolving_modules_6691",
            "Allow multiple folders to be treated as one when resolving modules.",
        );
    }
    lazy_static! {
        pub static ref Skip_type_checking_d_ts_files_that_are_included_with_TypeScript: DiagnosticMessage = diag(
            6692,
            DiagnosticCategory::Message,
            "Skip_type_checking_d_ts_files_that_are_included_with_TypeScript_6692",
            "Skip type checking .d.ts files that are included with TypeScript.",
        );
    }
    lazy_static! {
        pub static ref Skip_type_checking_all_d_ts_files: DiagnosticMessage = diag(
            6693,
            DiagnosticCategory::Message,
            "Skip_type_checking_all_d_ts_files_6693",
            "Skip type checking all .d.ts files.",
        );
    }
    lazy_static! {
        pub static ref Create_source_map_files_for_emitted_JavaScript_files: DiagnosticMessage = diag(
            6694,
            DiagnosticCategory::Message,
            "Create_source_map_files_for_emitted_JavaScript_files_6694",
            "Create source map files for emitted JavaScript files.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_root_path_for_debuggers_to_find_the_reference_source_code: DiagnosticMessage = diag(
            6695,
            DiagnosticCategory::Message,
            "Specify_the_root_path_for_debuggers_to_find_the_reference_source_code_6695",
            "Specify the root path for debuggers to find the reference source code.",
        );
    }
    lazy_static! {
        pub static ref Check_that_the_arguments_for_bind_call_and_apply_methods_match_the_original_function: DiagnosticMessage = diag(
            6697,
            DiagnosticCategory::Message,
            "Check_that_the_arguments_for_bind_call_and_apply_methods_match_the_original_function_6697",
            "Check that the arguments for `bind`, `call`, and `apply` methods match the original function.",
        );
    }
    lazy_static! {
        pub static ref When_assigning_functions_check_to_ensure_parameters_and_the_return_values_are_subtype_compatible: DiagnosticMessage = diag(
            6698,
            DiagnosticCategory::Message,
            "When_assigning_functions_check_to_ensure_parameters_and_the_return_values_are_subtype_compatible_6698",
            "When assigning functions, check to ensure parameters and the return values are subtype-compatible.",
        );
    }
    lazy_static! {
        pub static ref When_type_checking_take_into_account_null_and_undefined: DiagnosticMessage = diag(
            6699,
            DiagnosticCategory::Message,
            "When_type_checking_take_into_account_null_and_undefined_6699",
            "When type checking, take into account `null` and `undefined`.",
        );
    }
    lazy_static! {
        pub static ref Check_for_class_properties_that_are_declared_but_not_set_in_the_constructor: DiagnosticMessage = diag(
            6700,
            DiagnosticCategory::Message,
            "Check_for_class_properties_that_are_declared_but_not_set_in_the_constructor_6700",
            "Check for class properties that are declared but not set in the constructor.",
        );
    }
    lazy_static! {
        pub static ref Disable_emitting_declarations_that_have_internal_in_their_JSDoc_comments: DiagnosticMessage = diag(
            6701,
            DiagnosticCategory::Message,
            "Disable_emitting_declarations_that_have_internal_in_their_JSDoc_comments_6701",
            "Disable emitting declarations that have `@internal` in their JSDoc comments.",
        );
    }
    lazy_static! {
        pub static ref Disable_reporting_of_excess_property_errors_during_the_creation_of_object_literals: DiagnosticMessage = diag(
            6702,
            DiagnosticCategory::Message,
            "Disable_reporting_of_excess_property_errors_during_the_creation_of_object_literals_6702",
            "Disable reporting of excess property errors during the creation of object literals.",
        );
    }
    lazy_static! {
        pub static ref Suppress_noImplicitAny_errors_when_indexing_objects_that_lack_index_signatures: DiagnosticMessage = diag(
            6703,
            DiagnosticCategory::Message,
            "Suppress_noImplicitAny_errors_when_indexing_objects_that_lack_index_signatures_6703",
            "Suppress `noImplicitAny` errors when indexing objects that lack index signatures.",
        );
    }
    lazy_static! {
        pub static ref Synchronously_call_callbacks_and_update_the_state_of_directory_watchers_on_platforms_that_don_t_support_recursive_watching_natively: DiagnosticMessage = diag(
            6704,
            DiagnosticCategory::Message,
            "Synchronously_call_callbacks_and_update_the_state_of_directory_watchers_on_platforms_that_don_t_supp_6704",
            "Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.",
        );
    }
    lazy_static! {
        pub static ref Set_the_JavaScript_language_version_for_emitted_JavaScript_and_include_compatible_library_declarations: DiagnosticMessage = diag(
            6705,
            DiagnosticCategory::Message,
            "Set_the_JavaScript_language_version_for_emitted_JavaScript_and_include_compatible_library_declaratio_6705",
            "Set the JavaScript language version for emitted JavaScript and include compatible library declarations.",
        );
    }
    lazy_static! {
        pub static ref Log_paths_used_during_the_moduleResolution_process: DiagnosticMessage = diag(
            6706,
            DiagnosticCategory::Message,
            "Log_paths_used_during_the_moduleResolution_process_6706",
            "Log paths used during the `moduleResolution` process.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_folder_for_tsbuildinfo_incremental_compilation_files: DiagnosticMessage = diag(
            6707,
            DiagnosticCategory::Message,
            "Specify_the_folder_for_tsbuildinfo_incremental_compilation_files_6707",
            "Specify the folder for .tsbuildinfo incremental compilation files.",
        );
    }
    lazy_static! {
        pub static ref Specify_options_for_automatic_acquisition_of_declaration_files: DiagnosticMessage = diag(
            6709,
            DiagnosticCategory::Message,
            "Specify_options_for_automatic_acquisition_of_declaration_files_6709",
            "Specify options for automatic acquisition of declaration files.",
        );
    }
    lazy_static! {
        pub static ref Specify_multiple_folders_that_act_like_Slashnode_modules_Slash_types: DiagnosticMessage = diag(
            6710,
            DiagnosticCategory::Message,
            "Specify_multiple_folders_that_act_like_Slashnode_modules_Slash_types_6710",
            "Specify multiple folders that act like `./node_modules/@types`.",
        );
    }
    lazy_static! {
        pub static ref Specify_type_package_names_to_be_included_without_being_referenced_in_a_source_file: DiagnosticMessage = diag(
            6711,
            DiagnosticCategory::Message,
            "Specify_type_package_names_to_be_included_without_being_referenced_in_a_source_file_6711",
            "Specify type package names to be included without being referenced in a source file.",
        );
    }
    lazy_static! {
        pub static ref Emit_ECMAScript_standard_compliant_class_fields: DiagnosticMessage = diag(
            6712,
            DiagnosticCategory::Message,
            "Emit_ECMAScript_standard_compliant_class_fields_6712",
            "Emit ECMAScript-standard-compliant class fields.",
        );
    }
    lazy_static! {
        pub static ref Enable_verbose_logging: DiagnosticMessage = diag(
            6713,
            DiagnosticCategory::Message,
            "Enable_verbose_logging_6713",
            "Enable verbose logging",
        );
    }
    lazy_static! {
        pub static ref Specify_how_directories_are_watched_on_systems_that_lack_recursive_file_watching_functionality: DiagnosticMessage = diag(
            6714,
            DiagnosticCategory::Message,
            "Specify_how_directories_are_watched_on_systems_that_lack_recursive_file_watching_functionality_6714",
            "Specify how directories are watched on systems that lack recursive file-watching functionality.",
        );
    }
    lazy_static! {
        pub static ref Specify_how_the_TypeScript_watch_mode_works: DiagnosticMessage = diag(
            6715,
            DiagnosticCategory::Message,
            "Specify_how_the_TypeScript_watch_mode_works_6715",
            "Specify how the TypeScript watch mode works.",
        );
    }
    lazy_static! {
        pub static ref Include_undefined_in_index_signature_results: DiagnosticMessage = diag(
            6716,
            DiagnosticCategory::Message,
            "Include_undefined_in_index_signature_results_6716",
            "Include 'undefined' in index signature results",
        );
    }
    lazy_static! {
        pub static ref Require_undeclared_properties_from_index_signatures_to_use_element_accesses: DiagnosticMessage = diag(
            6717,
            DiagnosticCategory::Message,
            "Require_undeclared_properties_from_index_signatures_to_use_element_accesses_6717",
            "Require undeclared properties from index signatures to use element accesses.",
        );
    }
    lazy_static! {
        pub static ref Specify_emit_Slashchecking_behavior_for_imports_that_are_only_used_for_types: DiagnosticMessage = diag(
            6718,
            DiagnosticCategory::Message,
            "Specify_emit_Slashchecking_behavior_for_imports_that_are_only_used_for_types_6718",
            "Specify emit/checking behavior for imports that are only used for types",
        );
    }
    lazy_static! {
        pub static ref Type_catch_clause_variables_as_unknown_instead_of_any: DiagnosticMessage = diag(
            6803,
            DiagnosticCategory::Message,
            "Type_catch_clause_variables_as_unknown_instead_of_any_6803",
            "Type catch clause variables as 'unknown' instead of 'any'.",
        );
    }
    lazy_static! {
        pub static ref one_of_Colon: DiagnosticMessage = diag(
            6900,
            DiagnosticCategory::Message,
            "one_of_Colon_6900",
            "one of:",
        );
    }
    lazy_static! {
        pub static ref one_or_more_Colon: DiagnosticMessage = diag(
            6901,
            DiagnosticCategory::Message,
            "one_or_more_Colon_6901",
            "one or more:",
        );
    }
    lazy_static! {
        pub static ref type_Colon: DiagnosticMessage = diag(
            6902,
            DiagnosticCategory::Message,
            "type_Colon_6902",
            "type:",
        );
    }
    lazy_static! {
        pub static ref default_Colon: DiagnosticMessage = diag(
            6903,
            DiagnosticCategory::Message,
            "default_Colon_6903",
            "default:",
        );
    }
    lazy_static! {
        pub static ref module_system_or_esModuleInterop: DiagnosticMessage = diag(
            6904,
            DiagnosticCategory::Message,
            "module_system_or_esModuleInterop_6904",
            "module === \"system\" or esModuleInterop",
        );
    }
    lazy_static! {
        pub static ref false_unless_strict_is_set: DiagnosticMessage = diag(
            6905,
            DiagnosticCategory::Message,
            "false_unless_strict_is_set_6905",
            "`false`, unless `strict` is set",
        );
    }
    lazy_static! {
        pub static ref false_unless_composite_is_set: DiagnosticMessage = diag(
            6906,
            DiagnosticCategory::Message,
            "false_unless_composite_is_set_6906",
            "`false`, unless `composite` is set",
        );
    }
    lazy_static! {
        pub static ref node_modules_bower_components_jspm_packages_plus_the_value_of_outDir_if_one_is_specified: DiagnosticMessage = diag(
            6907,
            DiagnosticCategory::Message,
            "node_modules_bower_components_jspm_packages_plus_the_value_of_outDir_if_one_is_specified_6907",
            "`[\"node_modules\", \"bower_components\", \"jspm_packages\"]`, plus the value of `outDir` if one is specified.",
        );
    }
    lazy_static! {
        pub static ref if_files_is_specified_otherwise_Asterisk_Asterisk_Slash_Asterisk: DiagnosticMessage = diag(
            6908,
            DiagnosticCategory::Message,
            "if_files_is_specified_otherwise_Asterisk_Asterisk_Slash_Asterisk_6908",
            "`[]` if `files` is specified, otherwise `[\"**/*\"]`",
        );
    }
    lazy_static! {
        pub static ref true_if_composite_false_otherwise: DiagnosticMessage = diag(
            6909,
            DiagnosticCategory::Message,
            "true_if_composite_false_otherwise_6909",
            "`true` if `composite`, `false` otherwise",
        );
    }
    lazy_static! {
        pub static ref Computed_from_the_list_of_input_files: DiagnosticMessage = diag(
            6911,
            DiagnosticCategory::Message,
            "Computed_from_the_list_of_input_files_6911",
            "Computed from the list of input files",
        );
    }
    lazy_static! {
        pub static ref Platform_specific: DiagnosticMessage = diag(
            6912,
            DiagnosticCategory::Message,
            "Platform_specific_6912",
            "Platform specific",
        );
    }
    lazy_static! {
        pub static ref You_can_learn_about_all_of_the_compiler_options_at_0: DiagnosticMessage = diag(
            6913,
            DiagnosticCategory::Message,
            "You_can_learn_about_all_of_the_compiler_options_at_0_6913",
            "You can learn about all of the compiler options at {0}",
        );
    }
    lazy_static! {
        pub static ref Including_watch_w_will_start_watching_the_current_project_for_the_file_changes_Once_set_you_can_config_watch_mode_with_Colon: DiagnosticMessage = diag(
            6914,
            DiagnosticCategory::Message,
            "Including_watch_w_will_start_watching_the_current_project_for_the_file_changes_Once_set_you_can_conf_6914",
            "Including --watch, -w will start watching the current project for the file changes. Once set, you can config watch mode with:",
        );
    }
    lazy_static! {
        pub static ref Using_build_b_will_make_tsc_behave_more_like_a_build_orchestrator_than_a_compiler_This_is_used_to_trigger_building_composite_projects_which_you_can_learn_more_about_at_0: DiagnosticMessage = diag(
            6915,
            DiagnosticCategory::Message,
            "Using_build_b_will_make_tsc_behave_more_like_a_build_orchestrator_than_a_compiler_This_is_used_to_tr_6915",
            "Using --build, -b will make tsc behave more like a build orchestrator than a compiler. This is used to trigger building composite projects which you can learn more about at {0}",
        );
    }
    lazy_static! {
        pub static ref COMMON_COMMANDS: DiagnosticMessage = diag(
            6916,
            DiagnosticCategory::Message,
            "COMMON_COMMANDS_6916",
            "COMMON COMMANDS",
        );
    }
    lazy_static! {
        pub static ref ALL_COMPILER_OPTIONS: DiagnosticMessage = diag(
            6917,
            DiagnosticCategory::Message,
            "ALL_COMPILER_OPTIONS_6917",
            "ALL COMPILER OPTIONS",
        );
    }
    lazy_static! {
        pub static ref WATCH_OPTIONS: DiagnosticMessage = diag(
            6918,
            DiagnosticCategory::Message,
            "WATCH_OPTIONS_6918",
            "WATCH OPTIONS",
        );
    }
    lazy_static! {
        pub static ref BUILD_OPTIONS: DiagnosticMessage = diag(
            6919,
            DiagnosticCategory::Message,
            "BUILD_OPTIONS_6919",
            "BUILD OPTIONS",
        );
    }
    lazy_static! {
        pub static ref COMMON_COMPILER_OPTIONS: DiagnosticMessage = diag(
            6920,
            DiagnosticCategory::Message,
            "COMMON_COMPILER_OPTIONS_6920",
            "COMMON COMPILER OPTIONS",
        );
    }
    lazy_static! {
        pub static ref COMMAND_LINE_FLAGS: DiagnosticMessage = diag(
            6921,
            DiagnosticCategory::Message,
            "COMMAND_LINE_FLAGS_6921",
            "COMMAND LINE FLAGS",
        );
    }
    lazy_static! {
        pub static ref tsc_Colon_The_TypeScript_Compiler: DiagnosticMessage = diag(
            6922,
            DiagnosticCategory::Message,
            "tsc_Colon_The_TypeScript_Compiler_6922",
            "tsc: The TypeScript Compiler",
        );
    }
    lazy_static! {
        pub static ref Compiles_the_current_project_tsconfig_json_in_the_working_directory: DiagnosticMessage = diag(
            6923,
            DiagnosticCategory::Message,
            "Compiles_the_current_project_tsconfig_json_in_the_working_directory_6923",
            "Compiles the current project (tsconfig.json in the working directory.)",
        );
    }
    lazy_static! {
        pub static ref Ignoring_tsconfig_json_compiles_the_specified_files_with_default_compiler_options: DiagnosticMessage = diag(
            6924,
            DiagnosticCategory::Message,
            "Ignoring_tsconfig_json_compiles_the_specified_files_with_default_compiler_options_6924",
            "Ignoring tsconfig.json, compiles the specified files with default compiler options.",
        );
    }
    lazy_static! {
        pub static ref Build_a_composite_project_in_the_working_directory: DiagnosticMessage = diag(
            6925,
            DiagnosticCategory::Message,
            "Build_a_composite_project_in_the_working_directory_6925",
            "Build a composite project in the working directory.",
        );
    }
    lazy_static! {
        pub static ref Creates_a_tsconfig_json_with_the_recommended_settings_in_the_working_directory: DiagnosticMessage = diag(
            6926,
            DiagnosticCategory::Message,
            "Creates_a_tsconfig_json_with_the_recommended_settings_in_the_working_directory_6926",
            "Creates a tsconfig.json with the recommended settings in the working directory.",
        );
    }
    lazy_static! {
        pub static ref Compiles_the_TypeScript_project_located_at_the_specified_path: DiagnosticMessage = diag(
            6927,
            DiagnosticCategory::Message,
            "Compiles_the_TypeScript_project_located_at_the_specified_path_6927",
            "Compiles the TypeScript project located at the specified path.",
        );
    }
    lazy_static! {
        pub static ref An_expanded_version_of_this_information_showing_all_possible_compiler_options: DiagnosticMessage = diag(
            6928,
            DiagnosticCategory::Message,
            "An_expanded_version_of_this_information_showing_all_possible_compiler_options_6928",
            "An expanded version of this information, showing all possible compiler options",
        );
    }
    lazy_static! {
        pub static ref Compiles_the_current_project_with_additional_settings: DiagnosticMessage = diag(
            6929,
            DiagnosticCategory::Message,
            "Compiles_the_current_project_with_additional_settings_6929",
            "Compiles the current project, with additional settings.",
        );
    }
    lazy_static! {
        pub static ref true_for_ES2022_and_above_including_ESNext: DiagnosticMessage = diag(
            6930,
            DiagnosticCategory::Message,
            "true_for_ES2022_and_above_including_ESNext_6930",
            "`true` for ES2022 and above, including ESNext.",
        );
    }
    lazy_static! {
        pub static ref Variable_0_implicitly_has_an_1_type: DiagnosticMessage = diag(
            7005,
            DiagnosticCategory::Error,
            "Variable_0_implicitly_has_an_1_type_7005",
            "Variable '{0}' implicitly has an '{1}' type.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_implicitly_has_an_1_type: DiagnosticMessage = diag(
            7006,
            DiagnosticCategory::Error,
            "Parameter_0_implicitly_has_an_1_type_7006",
            "Parameter '{0}' implicitly has an '{1}' type.",
        );
    }
    lazy_static! {
        pub static ref Member_0_implicitly_has_an_1_type: DiagnosticMessage = diag(
            7008,
            DiagnosticCategory::Error,
            "Member_0_implicitly_has_an_1_type_7008",
            "Member '{0}' implicitly has an '{1}' type.",
        );
    }
    lazy_static! {
        pub static ref new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type: DiagnosticMessage = diag(
            7009,
            DiagnosticCategory::Error,
            "new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type_7009",
            "'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.",
        );
    }
    lazy_static! {
        pub static ref _0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type: DiagnosticMessage = diag(
            7010,
            DiagnosticCategory::Error,
            "_0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type_7010",
            "'{0}', which lacks return-type annotation, implicitly has an '{1}' return type.",
        );
    }
    lazy_static! {
        pub static ref Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type: DiagnosticMessage = diag(
            7011,
            DiagnosticCategory::Error,
            "Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type_7011",
            "Function expression, which lacks return-type annotation, implicitly has an '{0}' return type.",
        );
    }
    lazy_static! {
        pub static ref Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: DiagnosticMessage = diag(
            7013,
            DiagnosticCategory::Error,
            "Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type_7013",
            "Construct signature, which lacks return-type annotation, implicitly has an 'any' return type.",
        );
    }
    lazy_static! {
        pub static ref Function_type_which_lacks_return_type_annotation_implicitly_has_an_0_return_type: DiagnosticMessage = diag(
            7014,
            DiagnosticCategory::Error,
            "Function_type_which_lacks_return_type_annotation_implicitly_has_an_0_return_type_7014",
            "Function type, which lacks return-type annotation, implicitly has an '{0}' return type.",
        );
    }
    lazy_static! {
        pub static ref Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number: DiagnosticMessage = diag(
            7015,
            DiagnosticCategory::Error,
            "Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number_7015",
            "Element implicitly has an 'any' type because index expression is not of type 'number'.",
        );
    }
    lazy_static! {
        pub static ref Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type: DiagnosticMessage = diag(
            7016,
            DiagnosticCategory::Error,
            "Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type_7016",
            "Could not find a declaration file for module '{0}'. '{1}' implicitly has an 'any' type.",
        );
    }
    lazy_static! {
        pub static ref Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature: DiagnosticMessage = diag(
            7017,
            DiagnosticCategory::Error,
            "Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_7017",
            "Element implicitly has an 'any' type because type '{0}' has no index signature.",
        );
    }
    lazy_static! {
        pub static ref Object_literal_s_property_0_implicitly_has_an_1_type: DiagnosticMessage = diag(
            7018,
            DiagnosticCategory::Error,
            "Object_literal_s_property_0_implicitly_has_an_1_type_7018",
            "Object literal's property '{0}' implicitly has an '{1}' type.",
        );
    }
    lazy_static! {
        pub static ref Rest_parameter_0_implicitly_has_an_any_type: DiagnosticMessage = diag(
            7019,
            DiagnosticCategory::Error,
            "Rest_parameter_0_implicitly_has_an_any_type_7019",
            "Rest parameter '{0}' implicitly has an 'any[]' type.",
        );
    }
    lazy_static! {
        pub static ref Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: DiagnosticMessage = diag(
            7020,
            DiagnosticCategory::Error,
            "Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type_7020",
            "Call signature, which lacks return-type annotation, implicitly has an 'any' return type.",
        );
    }
    lazy_static! {
        pub static ref _0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer: DiagnosticMessage = diag(
            7022,
            DiagnosticCategory::Error,
            "_0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or__7022",
            "'{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.",
        );
    }
    lazy_static! {
        pub static ref _0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: DiagnosticMessage = diag(
            7023,
            DiagnosticCategory::Error,
            "_0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_reference_7023",
            "'{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.",
        );
    }
    lazy_static! {
        pub static ref Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: DiagnosticMessage = diag(
            7024,
            DiagnosticCategory::Error,
            "Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_ref_7024",
            "Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.",
        );
    }
    lazy_static! {
        pub static ref Generator_implicitly_has_yield_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type_annotation: DiagnosticMessage = diag(
            7025,
            DiagnosticCategory::Error,
            "Generator_implicitly_has_yield_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_retu_7025",
            "Generator implicitly has yield type '{0}' because it does not yield any values. Consider supplying a return type annotation.",
        );
    }
    lazy_static! {
        pub static ref JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists: DiagnosticMessage = diag(
            7026,
            DiagnosticCategory::Error,
            "JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists_7026",
            "JSX element implicitly has type 'any' because no interface 'JSX.{0}' exists.",
        );
    }
    lazy_static! {
        pub static ref Unreachable_code_detected: DiagnosticMessage = diag(
            7027,
            DiagnosticCategory::Error,
            "Unreachable_code_detected_7027",
            "Unreachable code detected.",
        );
    }
    lazy_static! {
        pub static ref Unused_label: DiagnosticMessage = diag(
            7028,
            DiagnosticCategory::Error,
            "Unused_label_7028",
            "Unused label.",
        );
    }
    lazy_static! {
        pub static ref Fallthrough_case_in_switch: DiagnosticMessage = diag(
            7029,
            DiagnosticCategory::Error,
            "Fallthrough_case_in_switch_7029",
            "Fallthrough case in switch.",
        );
    }
    lazy_static! {
        pub static ref Not_all_code_paths_return_a_value: DiagnosticMessage = diag(
            7030,
            DiagnosticCategory::Error,
            "Not_all_code_paths_return_a_value_7030",
            "Not all code paths return a value.",
        );
    }
    lazy_static! {
        pub static ref Binding_element_0_implicitly_has_an_1_type: DiagnosticMessage = diag(
            7031,
            DiagnosticCategory::Error,
            "Binding_element_0_implicitly_has_an_1_type_7031",
            "Binding element '{0}' implicitly has an '{1}' type.",
        );
    }
    lazy_static! {
        pub static ref Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_parameter_type_annotation: DiagnosticMessage = diag(
            7032,
            DiagnosticCategory::Error,
            "Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_parameter_type_annotation_7032",
            "Property '{0}' implicitly has type 'any', because its set accessor lacks a parameter type annotation.",
        );
    }
    lazy_static! {
        pub static ref Property_0_implicitly_has_type_any_because_its_get_accessor_lacks_a_return_type_annotation: DiagnosticMessage = diag(
            7033,
            DiagnosticCategory::Error,
            "Property_0_implicitly_has_type_any_because_its_get_accessor_lacks_a_return_type_annotation_7033",
            "Property '{0}' implicitly has type 'any', because its get accessor lacks a return type annotation.",
        );
    }
    lazy_static! {
        pub static ref Variable_0_implicitly_has_type_1_in_some_locations_where_its_type_cannot_be_determined: DiagnosticMessage = diag(
            7034,
            DiagnosticCategory::Error,
            "Variable_0_implicitly_has_type_1_in_some_locations_where_its_type_cannot_be_determined_7034",
            "Variable '{0}' implicitly has type '{1}' in some locations where its type cannot be determined.",
        );
    }
    lazy_static! {
        pub static ref Try_npm_i_save_dev_types_Slash_1_if_it_exists_or_add_a_new_declaration_d_ts_file_containing_declare_module_0: DiagnosticMessage = diag(
            7035,
            DiagnosticCategory::Error,
            "Try_npm_i_save_dev_types_Slash_1_if_it_exists_or_add_a_new_declaration_d_ts_file_containing_declare__7035",
            "Try `npm i --save-dev @types/{1}` if it exists or add a new declaration (.d.ts) file containing `declare module '{0}';`",
        );
    }
    lazy_static! {
        pub static ref Dynamic_import_s_specifier_must_be_of_type_string_but_here_has_type_0: DiagnosticMessage = diag(
            7036,
            DiagnosticCategory::Error,
            "Dynamic_import_s_specifier_must_be_of_type_string_but_here_has_type_0_7036",
            "Dynamic import's specifier must be of type 'string', but here has type '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Enables_emit_interoperability_between_CommonJS_and_ES_Modules_via_creation_of_namespace_objects_for_all_imports_Implies_allowSyntheticDefaultImports: DiagnosticMessage = diag(
            7037,
            DiagnosticCategory::Message,
            "Enables_emit_interoperability_between_CommonJS_and_ES_Modules_via_creation_of_namespace_objects_for__7037",
            "Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'.",
        );
    }
    lazy_static! {
        pub static ref Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cause_a_failure_at_runtime_Consider_using_a_default_import_or_import_require_here_instead: DiagnosticMessage = diag(
            7038,
            DiagnosticCategory::Message,
            "Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cau_7038",
            "Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.",
        );
    }
    lazy_static! {
        pub static ref Mapped_object_type_implicitly_has_an_any_template_type: DiagnosticMessage = diag(
            7039,
            DiagnosticCategory::Error,
            "Mapped_object_type_implicitly_has_an_any_template_type_7039",
            "Mapped object type implicitly has an 'any' template type.",
        );
    }
    lazy_static! {
        pub static ref If_the_0_package_actually_exposes_this_module_consider_sending_a_pull_request_to_amend_https_Colon_Slash_Slashgithub_com_SlashDefinitelyTyped_SlashDefinitelyTyped_Slashtree_Slashmaster_Slashtypes_Slash_1: DiagnosticMessage = diag(
            7040,
            DiagnosticCategory::Error,
            "If_the_0_package_actually_exposes_this_module_consider_sending_a_pull_request_to_amend_https_Colon_S_7040",
            "If the '{0}' package actually exposes this module, consider sending a pull request to amend 'https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/{1}'",
        );
    }
    lazy_static! {
        pub static ref The_containing_arrow_function_captures_the_global_value_of_this: DiagnosticMessage = diag(
            7041,
            DiagnosticCategory::Error,
            "The_containing_arrow_function_captures_the_global_value_of_this_7041",
            "The containing arrow function captures the global value of 'this'.",
        );
    }
    lazy_static! {
        pub static ref Module_0_was_resolved_to_1_but_resolveJsonModule_is_not_used: DiagnosticMessage = diag(
            7042,
            DiagnosticCategory::Error,
            "Module_0_was_resolved_to_1_but_resolveJsonModule_is_not_used_7042",
            "Module '{0}' was resolved to '{1}', but '--resolveJsonModule' is not used.",
        );
    }
    lazy_static! {
        pub static ref Variable_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage: DiagnosticMessage = diag(
            7043,
            DiagnosticCategory::Suggestion,
            "Variable_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage_7043",
            "Variable '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage.",
        );
    }
    lazy_static! {
        pub static ref Parameter_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage: DiagnosticMessage = diag(
            7044,
            DiagnosticCategory::Suggestion,
            "Parameter_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage_7044",
            "Parameter '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage.",
        );
    }
    lazy_static! {
        pub static ref Member_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage: DiagnosticMessage = diag(
            7045,
            DiagnosticCategory::Suggestion,
            "Member_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage_7045",
            "Member '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage.",
        );
    }
    lazy_static! {
        pub static ref Variable_0_implicitly_has_type_1_in_some_locations_but_a_better_type_may_be_inferred_from_usage: DiagnosticMessage = diag(
            7046,
            DiagnosticCategory::Suggestion,
            "Variable_0_implicitly_has_type_1_in_some_locations_but_a_better_type_may_be_inferred_from_usage_7046",
            "Variable '{0}' implicitly has type '{1}' in some locations, but a better type may be inferred from usage.",
        );
    }
    lazy_static! {
        pub static ref Rest_parameter_0_implicitly_has_an_any_type_but_a_better_type_may_be_inferred_from_usage: DiagnosticMessage = diag(
            7047,
            DiagnosticCategory::Suggestion,
            "Rest_parameter_0_implicitly_has_an_any_type_but_a_better_type_may_be_inferred_from_usage_7047",
            "Rest parameter '{0}' implicitly has an 'any[]' type, but a better type may be inferred from usage.",
        );
    }
    lazy_static! {
        pub static ref Property_0_implicitly_has_type_any_but_a_better_type_for_its_get_accessor_may_be_inferred_from_usage: DiagnosticMessage = diag(
            7048,
            DiagnosticCategory::Suggestion,
            "Property_0_implicitly_has_type_any_but_a_better_type_for_its_get_accessor_may_be_inferred_from_usage_7048",
            "Property '{0}' implicitly has type 'any', but a better type for its get accessor may be inferred from usage.",
        );
    }
    lazy_static! {
        pub static ref Property_0_implicitly_has_type_any_but_a_better_type_for_its_set_accessor_may_be_inferred_from_usage: DiagnosticMessage = diag(
            7049,
            DiagnosticCategory::Suggestion,
            "Property_0_implicitly_has_type_any_but_a_better_type_for_its_set_accessor_may_be_inferred_from_usage_7049",
            "Property '{0}' implicitly has type 'any', but a better type for its set accessor may be inferred from usage.",
        );
    }
    lazy_static! {
        pub static ref _0_implicitly_has_an_1_return_type_but_a_better_type_may_be_inferred_from_usage: DiagnosticMessage = diag(
            7050,
            DiagnosticCategory::Suggestion,
            "_0_implicitly_has_an_1_return_type_but_a_better_type_may_be_inferred_from_usage_7050",
            "'{0}' implicitly has an '{1}' return type, but a better type may be inferred from usage.",
        );
    }
    lazy_static! {
        pub static ref Parameter_has_a_name_but_no_type_Did_you_mean_0_Colon_1: DiagnosticMessage = diag(
            7051,
            DiagnosticCategory::Error,
            "Parameter_has_a_name_but_no_type_Did_you_mean_0_Colon_1_7051",
            "Parameter has a name but no type. Did you mean '{0}: {1}'?",
        );
    }
    lazy_static! {
        pub static ref Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_Did_you_mean_to_call_1: DiagnosticMessage = diag(
            7052,
            DiagnosticCategory::Error,
            "Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_Did_you_mean_to_call_1_7052",
            "Element implicitly has an 'any' type because type '{0}' has no index signature. Did you mean to call '{1}'?",
        );
    }
    lazy_static! {
        pub static ref Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1: DiagnosticMessage = diag(
            7053,
            DiagnosticCategory::Error,
            "Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1_7053",
            "Element implicitly has an 'any' type because expression of type '{0}' can't be used to index type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref No_index_signature_with_a_parameter_of_type_0_was_found_on_type_1: DiagnosticMessage = diag(
            7054,
            DiagnosticCategory::Error,
            "No_index_signature_with_a_parameter_of_type_0_was_found_on_type_1_7054",
            "No index signature with a parameter of type '{0}' was found on type '{1}'.",
        );
    }
    lazy_static! {
        pub static ref _0_which_lacks_return_type_annotation_implicitly_has_an_1_yield_type: DiagnosticMessage = diag(
            7055,
            DiagnosticCategory::Error,
            "_0_which_lacks_return_type_annotation_implicitly_has_an_1_yield_type_7055",
            "'{0}', which lacks return-type annotation, implicitly has an '{1}' yield type.",
        );
    }
    lazy_static! {
        pub static ref The_inferred_type_of_this_node_exceeds_the_maximum_length_the_compiler_will_serialize_An_explicit_type_annotation_is_needed: DiagnosticMessage = diag(
            7056,
            DiagnosticCategory::Error,
            "The_inferred_type_of_this_node_exceeds_the_maximum_length_the_compiler_will_serialize_An_explicit_ty_7056",
            "The inferred type of this node exceeds the maximum length the compiler will serialize. An explicit type annotation is needed.",
        );
    }
    lazy_static! {
        pub static ref yield_expression_implicitly_results_in_an_any_type_because_its_containing_generator_lacks_a_return_type_annotation: DiagnosticMessage = diag(
            7057,
            DiagnosticCategory::Error,
            "yield_expression_implicitly_results_in_an_any_type_because_its_containing_generator_lacks_a_return_t_7057",
            "'yield' expression implicitly results in an 'any' type because its containing generator lacks a return-type annotation.",
        );
    }
    lazy_static! {
        pub static ref If_the_0_package_actually_exposes_this_module_try_adding_a_new_declaration_d_ts_file_containing_declare_module_1: DiagnosticMessage = diag(
            7058,
            DiagnosticCategory::Error,
            "If_the_0_package_actually_exposes_this_module_try_adding_a_new_declaration_d_ts_file_containing_decl_7058",
            "If the '{0}' package actually exposes this module, try adding a new declaration (.d.ts) file containing `declare module '{1}';`",
        );
    }
    lazy_static! {
        pub static ref This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Use_an_as_expression_instead: DiagnosticMessage = diag(
            7059,
            DiagnosticCategory::Error,
            "This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Use_an_as_expression_instead_7059",
            "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
        );
    }
    lazy_static! {
        pub static ref This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Add_a_trailing_comma_or_explicit_constraint: DiagnosticMessage = diag(
            7060,
            DiagnosticCategory::Error,
            "This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Add_a_trailing_comma_or_explicit_cons_7060",
            "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.",
        );
    }
    lazy_static! {
        pub static ref A_mapped_type_may_not_declare_properties_or_methods: DiagnosticMessage = diag(
            7061,
            DiagnosticCategory::Error,
            "A_mapped_type_may_not_declare_properties_or_methods_7061",
            "A mapped type may not declare properties or methods.",
        );
    }
    lazy_static! {
        pub static ref JSON_imports_are_experimental_in_ES_module_mode_imports: DiagnosticMessage = diag(
            7062,
            DiagnosticCategory::Error,
            "JSON_imports_are_experimental_in_ES_module_mode_imports_7062",
            "JSON imports are experimental in ES module mode imports.",
        );
    }
    lazy_static! {
        pub static ref You_cannot_rename_this_element: DiagnosticMessage = diag(
            8000,
            DiagnosticCategory::Error,
            "You_cannot_rename_this_element_8000",
            "You cannot rename this element.",
        );
    }
    lazy_static! {
        pub static ref You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library: DiagnosticMessage = diag(
            8001,
            DiagnosticCategory::Error,
            "You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library_8001",
            "You cannot rename elements that are defined in the standard TypeScript library.",
        );
    }
    lazy_static! {
        pub static ref import_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8002,
            DiagnosticCategory::Error,
            "import_can_only_be_used_in_TypeScript_files_8002",
            "'import ... =' can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref export_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8003,
            DiagnosticCategory::Error,
            "export_can_only_be_used_in_TypeScript_files_8003",
            "'export =' can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref Type_parameter_declarations_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8004,
            DiagnosticCategory::Error,
            "Type_parameter_declarations_can_only_be_used_in_TypeScript_files_8004",
            "Type parameter declarations can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref implements_clauses_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8005,
            DiagnosticCategory::Error,
            "implements_clauses_can_only_be_used_in_TypeScript_files_8005",
            "'implements' clauses can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref _0_declarations_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8006,
            DiagnosticCategory::Error,
            "_0_declarations_can_only_be_used_in_TypeScript_files_8006",
            "'{0}' declarations can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref Type_aliases_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8008,
            DiagnosticCategory::Error,
            "Type_aliases_can_only_be_used_in_TypeScript_files_8008",
            "Type aliases can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref The_0_modifier_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8009,
            DiagnosticCategory::Error,
            "The_0_modifier_can_only_be_used_in_TypeScript_files_8009",
            "The '{0}' modifier can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref Type_annotations_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8010,
            DiagnosticCategory::Error,
            "Type_annotations_can_only_be_used_in_TypeScript_files_8010",
            "Type annotations can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref Type_arguments_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8011,
            DiagnosticCategory::Error,
            "Type_arguments_can_only_be_used_in_TypeScript_files_8011",
            "Type arguments can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref Parameter_modifiers_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8012,
            DiagnosticCategory::Error,
            "Parameter_modifiers_can_only_be_used_in_TypeScript_files_8012",
            "Parameter modifiers can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref Non_null_assertions_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8013,
            DiagnosticCategory::Error,
            "Non_null_assertions_can_only_be_used_in_TypeScript_files_8013",
            "Non-null assertions can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref Type_assertion_expressions_can_only_be_used_in_TypeScript_files: DiagnosticMessage = diag(
            8016,
            DiagnosticCategory::Error,
            "Type_assertion_expressions_can_only_be_used_in_TypeScript_files_8016",
            "Type assertion expressions can only be used in TypeScript files.",
        );
    }
    lazy_static! {
        pub static ref Octal_literal_types_must_use_ES2015_syntax_Use_the_syntax_0: DiagnosticMessage = diag(
            8017,
            DiagnosticCategory::Error,
            "Octal_literal_types_must_use_ES2015_syntax_Use_the_syntax_0_8017",
            "Octal literal types must use ES2015 syntax. Use the syntax '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Octal_literals_are_not_allowed_in_enums_members_initializer_Use_the_syntax_0: DiagnosticMessage = diag(
            8018,
            DiagnosticCategory::Error,
            "Octal_literals_are_not_allowed_in_enums_members_initializer_Use_the_syntax_0_8018",
            "Octal literals are not allowed in enums members initializer. Use the syntax '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Report_errors_in_js_files: DiagnosticMessage = diag(
            8019,
            DiagnosticCategory::Message,
            "Report_errors_in_js_files_8019",
            "Report errors in .js files.",
        );
    }
    lazy_static! {
        pub static ref JSDoc_types_can_only_be_used_inside_documentation_comments: DiagnosticMessage = diag(
            8020,
            DiagnosticCategory::Error,
            "JSDoc_types_can_only_be_used_inside_documentation_comments_8020",
            "JSDoc types can only be used inside documentation comments.",
        );
    }
    lazy_static! {
        pub static ref JSDoc_typedef_tag_should_either_have_a_type_annotation_or_be_followed_by_property_or_member_tags: DiagnosticMessage = diag(
            8021,
            DiagnosticCategory::Error,
            "JSDoc_typedef_tag_should_either_have_a_type_annotation_or_be_followed_by_property_or_member_tags_8021",
            "JSDoc '@typedef' tag should either have a type annotation or be followed by '@property' or '@member' tags.",
        );
    }
    lazy_static! {
        pub static ref JSDoc_0_is_not_attached_to_a_class: DiagnosticMessage = diag(
            8022,
            DiagnosticCategory::Error,
            "JSDoc_0_is_not_attached_to_a_class_8022",
            "JSDoc '@{0}' is not attached to a class.",
        );
    }
    lazy_static! {
        pub static ref JSDoc_0_1_does_not_match_the_extends_2_clause: DiagnosticMessage = diag(
            8023,
            DiagnosticCategory::Error,
            "JSDoc_0_1_does_not_match_the_extends_2_clause_8023",
            "JSDoc '@{0} {1}' does not match the 'extends {2}' clause.",
        );
    }
    lazy_static! {
        pub static ref JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name: DiagnosticMessage = diag(
            8024,
            DiagnosticCategory::Error,
            "JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_8024",
            "JSDoc '@param' tag has name '{0}', but there is no parameter with that name.",
        );
    }
    lazy_static! {
        pub static ref Class_declarations_cannot_have_more_than_one_augments_or_extends_tag: DiagnosticMessage = diag(
            8025,
            DiagnosticCategory::Error,
            "Class_declarations_cannot_have_more_than_one_augments_or_extends_tag_8025",
            "Class declarations cannot have more than one '@augments' or '@extends' tag.",
        );
    }
    lazy_static! {
        pub static ref Expected_0_type_arguments_provide_these_with_an_extends_tag: DiagnosticMessage = diag(
            8026,
            DiagnosticCategory::Error,
            "Expected_0_type_arguments_provide_these_with_an_extends_tag_8026",
            "Expected {0} type arguments; provide these with an '@extends' tag.",
        );
    }
    lazy_static! {
        pub static ref Expected_0_1_type_arguments_provide_these_with_an_extends_tag: DiagnosticMessage = diag(
            8027,
            DiagnosticCategory::Error,
            "Expected_0_1_type_arguments_provide_these_with_an_extends_tag_8027",
            "Expected {0}-{1} type arguments; provide these with an '@extends' tag.",
        );
    }
    lazy_static! {
        pub static ref JSDoc_may_only_appear_in_the_last_parameter_of_a_signature: DiagnosticMessage = diag(
            8028,
            DiagnosticCategory::Error,
            "JSDoc_may_only_appear_in_the_last_parameter_of_a_signature_8028",
            "JSDoc '...' may only appear in the last parameter of a signature.",
        );
    }
    lazy_static! {
        pub static ref JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_It_would_match_arguments_if_it_had_an_array_type: DiagnosticMessage = diag(
            8029,
            DiagnosticCategory::Error,
            "JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_It_would_match_arguments_if_it_h_8029",
            "JSDoc '@param' tag has name '{0}', but there is no parameter with that name. It would match 'arguments' if it had an array type.",
        );
    }
    lazy_static! {
        pub static ref The_type_of_a_function_declaration_must_match_the_function_s_signature: DiagnosticMessage = diag(
            8030,
            DiagnosticCategory::Error,
            "The_type_of_a_function_declaration_must_match_the_function_s_signature_8030",
            "The type of a function declaration must match the function's signature.",
        );
    }
    lazy_static! {
        pub static ref You_cannot_rename_a_module_via_a_global_import: DiagnosticMessage = diag(
            8031,
            DiagnosticCategory::Error,
            "You_cannot_rename_a_module_via_a_global_import_8031",
            "You cannot rename a module via a global import.",
        );
    }
    lazy_static! {
        pub static ref Qualified_name_0_is_not_allowed_without_a_leading_param_object_1: DiagnosticMessage = diag(
            8032,
            DiagnosticCategory::Error,
            "Qualified_name_0_is_not_allowed_without_a_leading_param_object_1_8032",
            "Qualified name '{0}' is not allowed without a leading '@param {object} {1}'.",
        );
    }
    lazy_static! {
        pub static ref A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags: DiagnosticMessage = diag(
            8033,
            DiagnosticCategory::Error,
            "A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags_8033",
            "A JSDoc '@typedef' comment may not contain multiple '@type' tags.",
        );
    }
    lazy_static! {
        pub static ref The_tag_was_first_specified_here: DiagnosticMessage = diag(
            8034,
            DiagnosticCategory::Error,
            "The_tag_was_first_specified_here_8034",
            "The tag was first specified here.",
        );
    }
    lazy_static! {
        pub static ref Declaration_emit_for_this_file_requires_using_private_name_0_An_explicit_type_annotation_may_unblock_declaration_emit: DiagnosticMessage = diag(
            9005,
            DiagnosticCategory::Error,
            "Declaration_emit_for_this_file_requires_using_private_name_0_An_explicit_type_annotation_may_unblock_9005",
            "Declaration emit for this file requires using private name '{0}'. An explicit type annotation may unblock declaration emit.",
        );
    }
    lazy_static! {
        pub static ref Declaration_emit_for_this_file_requires_using_private_name_0_from_module_1_An_explicit_type_annotation_may_unblock_declaration_emit: DiagnosticMessage = diag(
            9006,
            DiagnosticCategory::Error,
            "Declaration_emit_for_this_file_requires_using_private_name_0_from_module_1_An_explicit_type_annotati_9006",
            "Declaration emit for this file requires using private name '{0}' from module '{1}'. An explicit type annotation may unblock declaration emit.",
        );
    }
    lazy_static! {
        pub static ref JSX_attributes_must_only_be_assigned_a_non_empty_expression: DiagnosticMessage = diag(
            17000,
            DiagnosticCategory::Error,
            "JSX_attributes_must_only_be_assigned_a_non_empty_expression_17000",
            "JSX attributes must only be assigned a non-empty 'expression'.",
        );
    }
    lazy_static! {
        pub static ref JSX_elements_cannot_have_multiple_attributes_with_the_same_name: DiagnosticMessage = diag(
            17001,
            DiagnosticCategory::Error,
            "JSX_elements_cannot_have_multiple_attributes_with_the_same_name_17001",
            "JSX elements cannot have multiple attributes with the same name.",
        );
    }
    lazy_static! {
        pub static ref Expected_corresponding_JSX_closing_tag_for_0: DiagnosticMessage = diag(
            17002,
            DiagnosticCategory::Error,
            "Expected_corresponding_JSX_closing_tag_for_0_17002",
            "Expected corresponding JSX closing tag for '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Cannot_use_JSX_unless_the_jsx_flag_is_provided: DiagnosticMessage = diag(
            17004,
            DiagnosticCategory::Error,
            "Cannot_use_JSX_unless_the_jsx_flag_is_provided_17004",
            "Cannot use JSX unless the '--jsx' flag is provided.",
        );
    }
    lazy_static! {
        pub static ref A_constructor_cannot_contain_a_super_call_when_its_class_extends_null: DiagnosticMessage = diag(
            17005,
            DiagnosticCategory::Error,
            "A_constructor_cannot_contain_a_super_call_when_its_class_extends_null_17005",
            "A constructor cannot contain a 'super' call when its class extends 'null'.",
        );
    }
    lazy_static! {
        pub static ref An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses: DiagnosticMessage = diag(
            17006,
            DiagnosticCategory::Error,
            "An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_ex_17006",
            "An unary expression with the '{0}' operator is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses.",
        );
    }
    lazy_static! {
        pub static ref A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses: DiagnosticMessage = diag(
            17007,
            DiagnosticCategory::Error,
            "A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Con_17007",
            "A type assertion expression is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses.",
        );
    }
    lazy_static! {
        pub static ref JSX_element_0_has_no_corresponding_closing_tag: DiagnosticMessage = diag(
            17008,
            DiagnosticCategory::Error,
            "JSX_element_0_has_no_corresponding_closing_tag_17008",
            "JSX element '{0}' has no corresponding closing tag.",
        );
    }
    lazy_static! {
        pub static ref super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class: DiagnosticMessage = diag(
            17009,
            DiagnosticCategory::Error,
            "super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class_17009",
            "'super' must be called before accessing 'this' in the constructor of a derived class.",
        );
    }
    lazy_static! {
        pub static ref Unknown_type_acquisition_option_0: DiagnosticMessage = diag(
            17010,
            DiagnosticCategory::Error,
            "Unknown_type_acquisition_option_0_17010",
            "Unknown type acquisition option '{0}'.",
        );
    }
    lazy_static! {
        pub static ref super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class: DiagnosticMessage = diag(
            17011,
            DiagnosticCategory::Error,
            "super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class_17011",
            "'super' must be called before accessing a property of 'super' in the constructor of a derived class.",
        );
    }
    lazy_static! {
        pub static ref _0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2: DiagnosticMessage = diag(
            17012,
            DiagnosticCategory::Error,
            "_0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2_17012",
            "'{0}' is not a valid meta-property for keyword '{1}'. Did you mean '{2}'?",
        );
    }
    lazy_static! {
        pub static ref Meta_property_0_is_only_allowed_in_the_body_of_a_function_declaration_function_expression_or_constructor: DiagnosticMessage = diag(
            17013,
            DiagnosticCategory::Error,
            "Meta_property_0_is_only_allowed_in_the_body_of_a_function_declaration_function_expression_or_constru_17013",
            "Meta-property '{0}' is only allowed in the body of a function declaration, function expression, or constructor.",
        );
    }
    lazy_static! {
        pub static ref JSX_fragment_has_no_corresponding_closing_tag: DiagnosticMessage = diag(
            17014,
            DiagnosticCategory::Error,
            "JSX_fragment_has_no_corresponding_closing_tag_17014",
            "JSX fragment has no corresponding closing tag.",
        );
    }
    lazy_static! {
        pub static ref Expected_corresponding_closing_tag_for_JSX_fragment: DiagnosticMessage = diag(
            17015,
            DiagnosticCategory::Error,
            "Expected_corresponding_closing_tag_for_JSX_fragment_17015",
            "Expected corresponding closing tag for JSX fragment.",
        );
    }
    lazy_static! {
        pub static ref The_jsxFragmentFactory_compiler_option_must_be_provided_to_use_JSX_fragments_with_the_jsxFactory_compiler_option: DiagnosticMessage = diag(
            17016,
            DiagnosticCategory::Error,
            "The_jsxFragmentFactory_compiler_option_must_be_provided_to_use_JSX_fragments_with_the_jsxFactory_com_17016",
            "The 'jsxFragmentFactory' compiler option must be provided to use JSX fragments with the 'jsxFactory' compiler option.",
        );
    }
    lazy_static! {
        pub static ref An_jsxFrag_pragma_is_required_when_using_an_jsx_pragma_with_JSX_fragments: DiagnosticMessage = diag(
            17017,
            DiagnosticCategory::Error,
            "An_jsxFrag_pragma_is_required_when_using_an_jsx_pragma_with_JSX_fragments_17017",
            "An @jsxFrag pragma is required when using an @jsx pragma with JSX fragments.",
        );
    }
    lazy_static! {
        pub static ref Unknown_type_acquisition_option_0_Did_you_mean_1: DiagnosticMessage = diag(
            17018,
            DiagnosticCategory::Error,
            "Unknown_type_acquisition_option_0_Did_you_mean_1_17018",
            "Unknown type acquisition option '{0}'. Did you mean '{1}'?",
        );
    }
    lazy_static! {
        pub static ref Circularity_detected_while_resolving_configuration_Colon_0: DiagnosticMessage = diag(
            18000,
            DiagnosticCategory::Error,
            "Circularity_detected_while_resolving_configuration_Colon_0_18000",
            "Circularity detected while resolving configuration: {0}",
        );
    }
    lazy_static! {
        pub static ref The_files_list_in_config_file_0_is_empty: DiagnosticMessage = diag(
            18002,
            DiagnosticCategory::Error,
            "The_files_list_in_config_file_0_is_empty_18002",
            "The 'files' list in config file '{0}' is empty.",
        );
    }
    lazy_static! {
        pub static ref No_inputs_were_found_in_config_file_0_Specified_include_paths_were_1_and_exclude_paths_were_2: DiagnosticMessage = diag(
            18003,
            DiagnosticCategory::Error,
            "No_inputs_were_found_in_config_file_0_Specified_include_paths_were_1_and_exclude_paths_were_2_18003",
            "No inputs were found in config file '{0}'. Specified 'include' paths were '{1}' and 'exclude' paths were '{2}'.",
        );
    }
    lazy_static! {
        pub static ref No_value_exists_in_scope_for_the_shorthand_property_0_Either_declare_one_or_provide_an_initializer: DiagnosticMessage = diag(
            18004,
            DiagnosticCategory::Error,
            "No_value_exists_in_scope_for_the_shorthand_property_0_Either_declare_one_or_provide_an_initializer_18004",
            "No value exists in scope for the shorthand property '{0}'. Either declare one or provide an initializer.",
        );
    }
    lazy_static! {
        pub static ref Classes_may_not_have_a_field_named_constructor: DiagnosticMessage = diag(
            18006,
            DiagnosticCategory::Error,
            "Classes_may_not_have_a_field_named_constructor_18006",
            "Classes may not have a field named 'constructor'.",
        );
    }
    lazy_static! {
        pub static ref JSX_expressions_may_not_use_the_comma_operator_Did_you_mean_to_write_an_array: DiagnosticMessage = diag(
            18007,
            DiagnosticCategory::Error,
            "JSX_expressions_may_not_use_the_comma_operator_Did_you_mean_to_write_an_array_18007",
            "JSX expressions may not use the comma operator. Did you mean to write an array?",
        );
    }
    lazy_static! {
        pub static ref Private_identifiers_cannot_be_used_as_parameters: DiagnosticMessage = diag(
            18009,
            DiagnosticCategory::Error,
            "Private_identifiers_cannot_be_used_as_parameters_18009",
            "Private identifiers cannot be used as parameters.",
        );
    }
    lazy_static! {
        pub static ref An_accessibility_modifier_cannot_be_used_with_a_private_identifier: DiagnosticMessage = diag(
            18010,
            DiagnosticCategory::Error,
            "An_accessibility_modifier_cannot_be_used_with_a_private_identifier_18010",
            "An accessibility modifier cannot be used with a private identifier.",
        );
    }
    lazy_static! {
        pub static ref The_operand_of_a_delete_operator_cannot_be_a_private_identifier: DiagnosticMessage = diag(
            18011,
            DiagnosticCategory::Error,
            "The_operand_of_a_delete_operator_cannot_be_a_private_identifier_18011",
            "The operand of a 'delete' operator cannot be a private identifier.",
        );
    }
    lazy_static! {
        pub static ref constructor_is_a_reserved_word: DiagnosticMessage = diag(
            18012,
            DiagnosticCategory::Error,
            "constructor_is_a_reserved_word_18012",
            "'#constructor' is a reserved word.",
        );
    }
    lazy_static! {
        pub static ref Property_0_is_not_accessible_outside_class_1_because_it_has_a_private_identifier: DiagnosticMessage = diag(
            18013,
            DiagnosticCategory::Error,
            "Property_0_is_not_accessible_outside_class_1_because_it_has_a_private_identifier_18013",
            "Property '{0}' is not accessible outside class '{1}' because it has a private identifier.",
        );
    }
    lazy_static! {
        pub static ref The_property_0_cannot_be_accessed_on_type_1_within_this_class_because_it_is_shadowed_by_another_private_identifier_with_the_same_spelling: DiagnosticMessage = diag(
            18014,
            DiagnosticCategory::Error,
            "The_property_0_cannot_be_accessed_on_type_1_within_this_class_because_it_is_shadowed_by_another_priv_18014",
            "The property '{0}' cannot be accessed on type '{1}' within this class because it is shadowed by another private identifier with the same spelling.",
        );
    }
    lazy_static! {
        pub static ref Property_0_in_type_1_refers_to_a_different_member_that_cannot_be_accessed_from_within_type_2: DiagnosticMessage = diag(
            18015,
            DiagnosticCategory::Error,
            "Property_0_in_type_1_refers_to_a_different_member_that_cannot_be_accessed_from_within_type_2_18015",
            "Property '{0}' in type '{1}' refers to a different member that cannot be accessed from within type '{2}'.",
        );
    }
    lazy_static! {
        pub static ref Private_identifiers_are_not_allowed_outside_class_bodies: DiagnosticMessage = diag(
            18016,
            DiagnosticCategory::Error,
            "Private_identifiers_are_not_allowed_outside_class_bodies_18016",
            "Private identifiers are not allowed outside class bodies.",
        );
    }
    lazy_static! {
        pub static ref The_shadowing_declaration_of_0_is_defined_here: DiagnosticMessage = diag(
            18017,
            DiagnosticCategory::Error,
            "The_shadowing_declaration_of_0_is_defined_here_18017",
            "The shadowing declaration of '{0}' is defined here",
        );
    }
    lazy_static! {
        pub static ref The_declaration_of_0_that_you_probably_intended_to_use_is_defined_here: DiagnosticMessage = diag(
            18018,
            DiagnosticCategory::Error,
            "The_declaration_of_0_that_you_probably_intended_to_use_is_defined_here_18018",
            "The declaration of '{0}' that you probably intended to use is defined here",
        );
    }
    lazy_static! {
        pub static ref _0_modifier_cannot_be_used_with_a_private_identifier: DiagnosticMessage = diag(
            18019,
            DiagnosticCategory::Error,
            "_0_modifier_cannot_be_used_with_a_private_identifier_18019",
            "'{0}' modifier cannot be used with a private identifier.",
        );
    }
    lazy_static! {
        pub static ref An_enum_member_cannot_be_named_with_a_private_identifier: DiagnosticMessage = diag(
            18024,
            DiagnosticCategory::Error,
            "An_enum_member_cannot_be_named_with_a_private_identifier_18024",
            "An enum member cannot be named with a private identifier.",
        );
    }
    lazy_static! {
        pub static ref can_only_be_used_at_the_start_of_a_file: DiagnosticMessage = diag(
            18026,
            DiagnosticCategory::Error,
            "can_only_be_used_at_the_start_of_a_file_18026",
            "'#!' can only be used at the start of a file.",
        );
    }
    lazy_static! {
        pub static ref Compiler_reserves_name_0_when_emitting_private_identifier_downlevel: DiagnosticMessage = diag(
            18027,
            DiagnosticCategory::Error,
            "Compiler_reserves_name_0_when_emitting_private_identifier_downlevel_18027",
            "Compiler reserves name '{0}' when emitting private identifier downlevel.",
        );
    }
    lazy_static! {
        pub static ref Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher: DiagnosticMessage = diag(
            18028,
            DiagnosticCategory::Error,
            "Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher_18028",
            "Private identifiers are only available when targeting ECMAScript 2015 and higher.",
        );
    }
    lazy_static! {
        pub static ref Private_identifiers_are_not_allowed_in_variable_declarations: DiagnosticMessage = diag(
            18029,
            DiagnosticCategory::Error,
            "Private_identifiers_are_not_allowed_in_variable_declarations_18029",
            "Private identifiers are not allowed in variable declarations.",
        );
    }
    lazy_static! {
        pub static ref An_optional_chain_cannot_contain_private_identifiers: DiagnosticMessage = diag(
            18030,
            DiagnosticCategory::Error,
            "An_optional_chain_cannot_contain_private_identifiers_18030",
            "An optional chain cannot contain private identifiers.",
        );
    }
    lazy_static! {
        pub static ref The_intersection_0_was_reduced_to_never_because_property_1_has_conflicting_types_in_some_constituents: DiagnosticMessage = diag(
            18031,
            DiagnosticCategory::Error,
            "The_intersection_0_was_reduced_to_never_because_property_1_has_conflicting_types_in_some_constituent_18031",
            "The intersection '{0}' was reduced to 'never' because property '{1}' has conflicting types in some constituents.",
        );
    }
    lazy_static! {
        pub static ref The_intersection_0_was_reduced_to_never_because_property_1_exists_in_multiple_constituents_and_is_private_in_some: DiagnosticMessage = diag(
            18032,
            DiagnosticCategory::Error,
            "The_intersection_0_was_reduced_to_never_because_property_1_exists_in_multiple_constituents_and_is_pr_18032",
            "The intersection '{0}' was reduced to 'never' because property '{1}' exists in multiple constituents and is private in some.",
        );
    }
    lazy_static! {
        pub static ref Only_numeric_enums_can_have_computed_members_but_this_expression_has_type_0_If_you_do_not_need_exhaustiveness_checks_consider_using_an_object_literal_instead: DiagnosticMessage = diag(
            18033,
            DiagnosticCategory::Error,
            "Only_numeric_enums_can_have_computed_members_but_this_expression_has_type_0_If_you_do_not_need_exhau_18033",
            "Only numeric enums can have computed members, but this expression has type '{0}'. If you do not need exhaustiveness checks, consider using an object literal instead.",
        );
    }
    lazy_static! {
        pub static ref Specify_the_JSX_fragment_factory_function_to_use_when_targeting_react_JSX_emit_with_jsxFactory_compiler_option_is_specified_e_g_Fragment: DiagnosticMessage = diag(
            18034,
            DiagnosticCategory::Message,
            "Specify_the_JSX_fragment_factory_function_to_use_when_targeting_react_JSX_emit_with_jsxFactory_compi_18034",
            "Specify the JSX fragment factory function to use when targeting 'react' JSX emit with 'jsxFactory' compiler option is specified, e.g. 'Fragment'.",
        );
    }
    lazy_static! {
        pub static ref Invalid_value_for_jsxFragmentFactory_0_is_not_a_valid_identifier_or_qualified_name: DiagnosticMessage = diag(
            18035,
            DiagnosticCategory::Error,
            "Invalid_value_for_jsxFragmentFactory_0_is_not_a_valid_identifier_or_qualified_name_18035",
            "Invalid value for 'jsxFragmentFactory'. '{0}' is not a valid identifier or qualified-name.",
        );
    }
    lazy_static! {
        pub static ref Class_decorators_can_t_be_used_with_static_private_identifier_Consider_removing_the_experimental_decorator: DiagnosticMessage = diag(
            18036,
            DiagnosticCategory::Error,
            "Class_decorators_can_t_be_used_with_static_private_identifier_Consider_removing_the_experimental_dec_18036",
            "Class decorators can't be used with static private identifier. Consider removing the experimental decorator.",
        );
    }
    lazy_static! {
        pub static ref Await_expression_cannot_be_used_inside_a_class_static_block: DiagnosticMessage = diag(
            18037,
            DiagnosticCategory::Error,
            "Await_expression_cannot_be_used_inside_a_class_static_block_18037",
            "Await expression cannot be used inside a class static block.",
        );
    }
    lazy_static! {
        pub static ref For_await_loops_cannot_be_used_inside_a_class_static_block: DiagnosticMessage = diag(
            18038,
            DiagnosticCategory::Error,
            "For_await_loops_cannot_be_used_inside_a_class_static_block_18038",
            "'For await' loops cannot be used inside a class static block.",
        );
    }
    lazy_static! {
        pub static ref Invalid_use_of_0_It_cannot_be_used_inside_a_class_static_block: DiagnosticMessage = diag(
            18039,
            DiagnosticCategory::Error,
            "Invalid_use_of_0_It_cannot_be_used_inside_a_class_static_block_18039",
            "Invalid use of '{0}'. It cannot be used inside a class static block.",
        );
    }
    lazy_static! {
        pub static ref A_return_statement_cannot_be_used_inside_a_class_static_block: DiagnosticMessage = diag(
            18041,
            DiagnosticCategory::Error,
            "A_return_statement_cannot_be_used_inside_a_class_static_block_18041",
            "A 'return' statement cannot be used inside a class static block.",
        );
    }
    lazy_static! {
        pub static ref module_AMD_or_UMD_or_System_or_ES6_then_Classic_Otherwise_Node: DiagnosticMessage = diag(
            69010,
            DiagnosticCategory::Message,
            "module_AMD_or_UMD_or_System_or_ES6_then_Classic_Otherwise_Node_69010",
            "module === `AMD` or `UMD` or `System` or `ES6`, then `Classic`, Otherwise `Node`",
        );
    }
    lazy_static! {
        pub static ref File_is_a_CommonJS_module_it_may_be_converted_to_an_ES_module: DiagnosticMessage = diag(
            80001,
            DiagnosticCategory::Suggestion,
            "File_is_a_CommonJS_module_it_may_be_converted_to_an_ES_module_80001",
            "File is a CommonJS module; it may be converted to an ES module.",
        );
    }
    lazy_static! {
        pub static ref This_constructor_function_may_be_converted_to_a_class_declaration: DiagnosticMessage = diag(
            80002,
            DiagnosticCategory::Suggestion,
            "This_constructor_function_may_be_converted_to_a_class_declaration_80002",
            "This constructor function may be converted to a class declaration.",
        );
    }
    lazy_static! {
        pub static ref Import_may_be_converted_to_a_default_import: DiagnosticMessage = diag(
            80003,
            DiagnosticCategory::Suggestion,
            "Import_may_be_converted_to_a_default_import_80003",
            "Import may be converted to a default import.",
        );
    }
    lazy_static! {
        pub static ref JSDoc_types_may_be_moved_to_TypeScript_types: DiagnosticMessage = diag(
            80004,
            DiagnosticCategory::Suggestion,
            "JSDoc_types_may_be_moved_to_TypeScript_types_80004",
            "JSDoc types may be moved to TypeScript types.",
        );
    }
    lazy_static! {
        pub static ref require_call_may_be_converted_to_an_import: DiagnosticMessage = diag(
            80005,
            DiagnosticCategory::Suggestion,
            "require_call_may_be_converted_to_an_import_80005",
            "'require' call may be converted to an import.",
        );
    }
    lazy_static! {
        pub static ref This_may_be_converted_to_an_async_function: DiagnosticMessage = diag(
            80006,
            DiagnosticCategory::Suggestion,
            "This_may_be_converted_to_an_async_function_80006",
            "This may be converted to an async function.",
        );
    }
    lazy_static! {
        pub static ref await_has_no_effect_on_the_type_of_this_expression: DiagnosticMessage = diag(
            80007,
            DiagnosticCategory::Suggestion,
            "await_has_no_effect_on_the_type_of_this_expression_80007",
            "'await' has no effect on the type of this expression.",
        );
    }
    lazy_static! {
        pub static ref Numeric_literals_with_absolute_values_equal_to_2_53_or_greater_are_too_large_to_be_represented_accurately_as_integers: DiagnosticMessage = diag(
            80008,
            DiagnosticCategory::Suggestion,
            "Numeric_literals_with_absolute_values_equal_to_2_53_or_greater_are_too_large_to_be_represented_accur_80008",
            "Numeric literals with absolute values equal to 2^53 or greater are too large to be represented accurately as integers.",
        );
    }
    lazy_static! {
        pub static ref Add_missing_super_call: DiagnosticMessage = diag(
            90001,
            DiagnosticCategory::Message,
            "Add_missing_super_call_90001",
            "Add missing 'super()' call",
        );
    }
    lazy_static! {
        pub static ref Make_super_call_the_first_statement_in_the_constructor: DiagnosticMessage = diag(
            90002,
            DiagnosticCategory::Message,
            "Make_super_call_the_first_statement_in_the_constructor_90002",
            "Make 'super()' call the first statement in the constructor",
        );
    }
    lazy_static! {
        pub static ref Change_extends_to_implements: DiagnosticMessage = diag(
            90003,
            DiagnosticCategory::Message,
            "Change_extends_to_implements_90003",
            "Change 'extends' to 'implements'",
        );
    }
    lazy_static! {
        pub static ref Remove_unused_declaration_for_Colon_0: DiagnosticMessage = diag(
            90004,
            DiagnosticCategory::Message,
            "Remove_unused_declaration_for_Colon_0_90004",
            "Remove unused declaration for: '{0}'",
        );
    }
    lazy_static! {
        pub static ref Remove_import_from_0: DiagnosticMessage = diag(
            90005,
            DiagnosticCategory::Message,
            "Remove_import_from_0_90005",
            "Remove import from '{0}'",
        );
    }
    lazy_static! {
        pub static ref Implement_interface_0: DiagnosticMessage = diag(
            90006,
            DiagnosticCategory::Message,
            "Implement_interface_0_90006",
            "Implement interface '{0}'",
        );
    }
    lazy_static! {
        pub static ref Implement_inherited_abstract_class: DiagnosticMessage = diag(
            90007,
            DiagnosticCategory::Message,
            "Implement_inherited_abstract_class_90007",
            "Implement inherited abstract class",
        );
    }
    lazy_static! {
        pub static ref Add_0_to_unresolved_variable: DiagnosticMessage = diag(
            90008,
            DiagnosticCategory::Message,
            "Add_0_to_unresolved_variable_90008",
            "Add '{0}.' to unresolved variable",
        );
    }
    lazy_static! {
        pub static ref Remove_variable_statement: DiagnosticMessage = diag(
            90010,
            DiagnosticCategory::Message,
            "Remove_variable_statement_90010",
            "Remove variable statement",
        );
    }
    lazy_static! {
        pub static ref Remove_template_tag: DiagnosticMessage = diag(
            90011,
            DiagnosticCategory::Message,
            "Remove_template_tag_90011",
            "Remove template tag",
        );
    }
    lazy_static! {
        pub static ref Remove_type_parameters: DiagnosticMessage = diag(
            90012,
            DiagnosticCategory::Message,
            "Remove_type_parameters_90012",
            "Remove type parameters",
        );
    }
    lazy_static! {
        pub static ref Import_0_from_module_1: DiagnosticMessage = diag(
            90013,
            DiagnosticCategory::Message,
            "Import_0_from_module_1_90013",
            "Import '{0}' from module \"{1}\"",
        );
    }
    lazy_static! {
        pub static ref Change_0_to_1: DiagnosticMessage = diag(
            90014,
            DiagnosticCategory::Message,
            "Change_0_to_1_90014",
            "Change '{0}' to '{1}'",
        );
    }
    lazy_static! {
        pub static ref Add_0_to_existing_import_declaration_from_1: DiagnosticMessage = diag(
            90015,
            DiagnosticCategory::Message,
            "Add_0_to_existing_import_declaration_from_1_90015",
            "Add '{0}' to existing import declaration from \"{1}\"",
        );
    }
    lazy_static! {
        pub static ref Declare_property_0: DiagnosticMessage = diag(
            90016,
            DiagnosticCategory::Message,
            "Declare_property_0_90016",
            "Declare property '{0}'",
        );
    }
    lazy_static! {
        pub static ref Add_index_signature_for_property_0: DiagnosticMessage = diag(
            90017,
            DiagnosticCategory::Message,
            "Add_index_signature_for_property_0_90017",
            "Add index signature for property '{0}'",
        );
    }
    lazy_static! {
        pub static ref Disable_checking_for_this_file: DiagnosticMessage = diag(
            90018,
            DiagnosticCategory::Message,
            "Disable_checking_for_this_file_90018",
            "Disable checking for this file",
        );
    }
    lazy_static! {
        pub static ref Ignore_this_error_message: DiagnosticMessage = diag(
            90019,
            DiagnosticCategory::Message,
            "Ignore_this_error_message_90019",
            "Ignore this error message",
        );
    }
    lazy_static! {
        pub static ref Initialize_property_0_in_the_constructor: DiagnosticMessage = diag(
            90020,
            DiagnosticCategory::Message,
            "Initialize_property_0_in_the_constructor_90020",
            "Initialize property '{0}' in the constructor",
        );
    }
    lazy_static! {
        pub static ref Initialize_static_property_0: DiagnosticMessage = diag(
            90021,
            DiagnosticCategory::Message,
            "Initialize_static_property_0_90021",
            "Initialize static property '{0}'",
        );
    }
    lazy_static! {
        pub static ref Change_spelling_to_0: DiagnosticMessage = diag(
            90022,
            DiagnosticCategory::Message,
            "Change_spelling_to_0_90022",
            "Change spelling to '{0}'",
        );
    }
    lazy_static! {
        pub static ref Declare_method_0: DiagnosticMessage = diag(
            90023,
            DiagnosticCategory::Message,
            "Declare_method_0_90023",
            "Declare method '{0}'",
        );
    }
    lazy_static! {
        pub static ref Declare_static_method_0: DiagnosticMessage = diag(
            90024,
            DiagnosticCategory::Message,
            "Declare_static_method_0_90024",
            "Declare static method '{0}'",
        );
    }
    lazy_static! {
        pub static ref Prefix_0_with_an_underscore: DiagnosticMessage = diag(
            90025,
            DiagnosticCategory::Message,
            "Prefix_0_with_an_underscore_90025",
            "Prefix '{0}' with an underscore",
        );
    }
    lazy_static! {
        pub static ref Rewrite_as_the_indexed_access_type_0: DiagnosticMessage = diag(
            90026,
            DiagnosticCategory::Message,
            "Rewrite_as_the_indexed_access_type_0_90026",
            "Rewrite as the indexed access type '{0}'",
        );
    }
    lazy_static! {
        pub static ref Declare_static_property_0: DiagnosticMessage = diag(
            90027,
            DiagnosticCategory::Message,
            "Declare_static_property_0_90027",
            "Declare static property '{0}'",
        );
    }
    lazy_static! {
        pub static ref Call_decorator_expression: DiagnosticMessage = diag(
            90028,
            DiagnosticCategory::Message,
            "Call_decorator_expression_90028",
            "Call decorator expression",
        );
    }
    lazy_static! {
        pub static ref Add_async_modifier_to_containing_function: DiagnosticMessage = diag(
            90029,
            DiagnosticCategory::Message,
            "Add_async_modifier_to_containing_function_90029",
            "Add async modifier to containing function",
        );
    }
    lazy_static! {
        pub static ref Replace_infer_0_with_unknown: DiagnosticMessage = diag(
            90030,
            DiagnosticCategory::Message,
            "Replace_infer_0_with_unknown_90030",
            "Replace 'infer {0}' with 'unknown'",
        );
    }
    lazy_static! {
        pub static ref Replace_all_unused_infer_with_unknown: DiagnosticMessage = diag(
            90031,
            DiagnosticCategory::Message,
            "Replace_all_unused_infer_with_unknown_90031",
            "Replace all unused 'infer' with 'unknown'",
        );
    }
    lazy_static! {
        pub static ref Import_default_0_from_module_1: DiagnosticMessage = diag(
            90032,
            DiagnosticCategory::Message,
            "Import_default_0_from_module_1_90032",
            "Import default '{0}' from module \"{1}\"",
        );
    }
    lazy_static! {
        pub static ref Add_default_import_0_to_existing_import_declaration_from_1: DiagnosticMessage = diag(
            90033,
            DiagnosticCategory::Message,
            "Add_default_import_0_to_existing_import_declaration_from_1_90033",
            "Add default import '{0}' to existing import declaration from \"{1}\"",
        );
    }
    lazy_static! {
        pub static ref Add_parameter_name: DiagnosticMessage = diag(
            90034,
            DiagnosticCategory::Message,
            "Add_parameter_name_90034",
            "Add parameter name",
        );
    }
    lazy_static! {
        pub static ref Declare_private_property_0: DiagnosticMessage = diag(
            90035,
            DiagnosticCategory::Message,
            "Declare_private_property_0_90035",
            "Declare private property '{0}'",
        );
    }
    lazy_static! {
        pub static ref Replace_0_with_Promise_1: DiagnosticMessage = diag(
            90036,
            DiagnosticCategory::Message,
            "Replace_0_with_Promise_1_90036",
            "Replace '{0}' with 'Promise<{1}>'",
        );
    }
    lazy_static! {
        pub static ref Fix_all_incorrect_return_type_of_an_async_functions: DiagnosticMessage = diag(
            90037,
            DiagnosticCategory::Message,
            "Fix_all_incorrect_return_type_of_an_async_functions_90037",
            "Fix all incorrect return type of an async functions",
        );
    }
    lazy_static! {
        pub static ref Declare_private_method_0: DiagnosticMessage = diag(
            90038,
            DiagnosticCategory::Message,
            "Declare_private_method_0_90038",
            "Declare private method '{0}'",
        );
    }
    lazy_static! {
        pub static ref Remove_unused_destructuring_declaration: DiagnosticMessage = diag(
            90039,
            DiagnosticCategory::Message,
            "Remove_unused_destructuring_declaration_90039",
            "Remove unused destructuring declaration",
        );
    }
    lazy_static! {
        pub static ref Remove_unused_declarations_for_Colon_0: DiagnosticMessage = diag(
            90041,
            DiagnosticCategory::Message,
            "Remove_unused_declarations_for_Colon_0_90041",
            "Remove unused declarations for: '{0}'",
        );
    }
    lazy_static! {
        pub static ref Declare_a_private_field_named_0: DiagnosticMessage = diag(
            90053,
            DiagnosticCategory::Message,
            "Declare_a_private_field_named_0_90053",
            "Declare a private field named '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Includes_imports_of_types_referenced_by_0: DiagnosticMessage = diag(
            90054,
            DiagnosticCategory::Message,
            "Includes_imports_of_types_referenced_by_0_90054",
            "Includes imports of types referenced by '{0}'",
        );
    }
    lazy_static! {
        pub static ref Convert_function_to_an_ES2015_class: DiagnosticMessage = diag(
            95001,
            DiagnosticCategory::Message,
            "Convert_function_to_an_ES2015_class_95001",
            "Convert function to an ES2015 class",
        );
    }
    lazy_static! {
        pub static ref Convert_0_to_1_in_0: DiagnosticMessage = diag(
            95003,
            DiagnosticCategory::Message,
            "Convert_0_to_1_in_0_95003",
            "Convert '{0}' to '{1} in {0}'",
        );
    }
    lazy_static! {
        pub static ref Extract_to_0_in_1: DiagnosticMessage = diag(
            95004,
            DiagnosticCategory::Message,
            "Extract_to_0_in_1_95004",
            "Extract to {0} in {1}",
        );
    }
    lazy_static! {
        pub static ref Extract_function: DiagnosticMessage = diag(
            95005,
            DiagnosticCategory::Message,
            "Extract_function_95005",
            "Extract function",
        );
    }
    lazy_static! {
        pub static ref Extract_constant: DiagnosticMessage = diag(
            95006,
            DiagnosticCategory::Message,
            "Extract_constant_95006",
            "Extract constant",
        );
    }
    lazy_static! {
        pub static ref Extract_to_0_in_enclosing_scope: DiagnosticMessage = diag(
            95007,
            DiagnosticCategory::Message,
            "Extract_to_0_in_enclosing_scope_95007",
            "Extract to {0} in enclosing scope",
        );
    }
    lazy_static! {
        pub static ref Extract_to_0_in_1_scope: DiagnosticMessage = diag(
            95008,
            DiagnosticCategory::Message,
            "Extract_to_0_in_1_scope_95008",
            "Extract to {0} in {1} scope",
        );
    }
    lazy_static! {
        pub static ref Annotate_with_type_from_JSDoc: DiagnosticMessage = diag(
            95009,
            DiagnosticCategory::Message,
            "Annotate_with_type_from_JSDoc_95009",
            "Annotate with type from JSDoc",
        );
    }
    lazy_static! {
        pub static ref Infer_type_of_0_from_usage: DiagnosticMessage = diag(
            95011,
            DiagnosticCategory::Message,
            "Infer_type_of_0_from_usage_95011",
            "Infer type of '{0}' from usage",
        );
    }
    lazy_static! {
        pub static ref Infer_parameter_types_from_usage: DiagnosticMessage = diag(
            95012,
            DiagnosticCategory::Message,
            "Infer_parameter_types_from_usage_95012",
            "Infer parameter types from usage",
        );
    }
    lazy_static! {
        pub static ref Convert_to_default_import: DiagnosticMessage = diag(
            95013,
            DiagnosticCategory::Message,
            "Convert_to_default_import_95013",
            "Convert to default import",
        );
    }
    lazy_static! {
        pub static ref Install_0: DiagnosticMessage = diag(
            95014,
            DiagnosticCategory::Message,
            "Install_0_95014",
            "Install '{0}'",
        );
    }
    lazy_static! {
        pub static ref Replace_import_with_0: DiagnosticMessage = diag(
            95015,
            DiagnosticCategory::Message,
            "Replace_import_with_0_95015",
            "Replace import with '{0}'.",
        );
    }
    lazy_static! {
        pub static ref Use_synthetic_default_member: DiagnosticMessage = diag(
            95016,
            DiagnosticCategory::Message,
            "Use_synthetic_default_member_95016",
            "Use synthetic 'default' member.",
        );
    }
    lazy_static! {
        pub static ref Convert_to_ES_module: DiagnosticMessage = diag(
            95017,
            DiagnosticCategory::Message,
            "Convert_to_ES_module_95017",
            "Convert to ES module",
        );
    }
    lazy_static! {
        pub static ref Add_undefined_type_to_property_0: DiagnosticMessage = diag(
            95018,
            DiagnosticCategory::Message,
            "Add_undefined_type_to_property_0_95018",
            "Add 'undefined' type to property '{0}'",
        );
    }
    lazy_static! {
        pub static ref Add_initializer_to_property_0: DiagnosticMessage = diag(
            95019,
            DiagnosticCategory::Message,
            "Add_initializer_to_property_0_95019",
            "Add initializer to property '{0}'",
        );
    }
    lazy_static! {
        pub static ref Add_definite_assignment_assertion_to_property_0: DiagnosticMessage = diag(
            95020,
            DiagnosticCategory::Message,
            "Add_definite_assignment_assertion_to_property_0_95020",
            "Add definite assignment assertion to property '{0}'",
        );
    }
    lazy_static! {
        pub static ref Convert_all_type_literals_to_mapped_type: DiagnosticMessage = diag(
            95021,
            DiagnosticCategory::Message,
            "Convert_all_type_literals_to_mapped_type_95021",
            "Convert all type literals to mapped type",
        );
    }
    lazy_static! {
        pub static ref Add_all_missing_members: DiagnosticMessage = diag(
            95022,
            DiagnosticCategory::Message,
            "Add_all_missing_members_95022",
            "Add all missing members",
        );
    }
    lazy_static! {
        pub static ref Infer_all_types_from_usage: DiagnosticMessage = diag(
            95023,
            DiagnosticCategory::Message,
            "Infer_all_types_from_usage_95023",
            "Infer all types from usage",
        );
    }
    lazy_static! {
        pub static ref Delete_all_unused_declarations: DiagnosticMessage = diag(
            95024,
            DiagnosticCategory::Message,
            "Delete_all_unused_declarations_95024",
            "Delete all unused declarations",
        );
    }
    lazy_static! {
        pub static ref Prefix_all_unused_declarations_with_where_possible: DiagnosticMessage = diag(
            95025,
            DiagnosticCategory::Message,
            "Prefix_all_unused_declarations_with_where_possible_95025",
            "Prefix all unused declarations with '_' where possible",
        );
    }
    lazy_static! {
        pub static ref Fix_all_detected_spelling_errors: DiagnosticMessage = diag(
            95026,
            DiagnosticCategory::Message,
            "Fix_all_detected_spelling_errors_95026",
            "Fix all detected spelling errors",
        );
    }
    lazy_static! {
        pub static ref Add_initializers_to_all_uninitialized_properties: DiagnosticMessage = diag(
            95027,
            DiagnosticCategory::Message,
            "Add_initializers_to_all_uninitialized_properties_95027",
            "Add initializers to all uninitialized properties",
        );
    }
    lazy_static! {
        pub static ref Add_definite_assignment_assertions_to_all_uninitialized_properties: DiagnosticMessage = diag(
            95028,
            DiagnosticCategory::Message,
            "Add_definite_assignment_assertions_to_all_uninitialized_properties_95028",
            "Add definite assignment assertions to all uninitialized properties",
        );
    }
    lazy_static! {
        pub static ref Add_undefined_type_to_all_uninitialized_properties: DiagnosticMessage = diag(
            95029,
            DiagnosticCategory::Message,
            "Add_undefined_type_to_all_uninitialized_properties_95029",
            "Add undefined type to all uninitialized properties",
        );
    }
    lazy_static! {
        pub static ref Change_all_jsdoc_style_types_to_TypeScript: DiagnosticMessage = diag(
            95030,
            DiagnosticCategory::Message,
            "Change_all_jsdoc_style_types_to_TypeScript_95030",
            "Change all jsdoc-style types to TypeScript",
        );
    }
    lazy_static! {
        pub static ref Change_all_jsdoc_style_types_to_TypeScript_and_add_undefined_to_nullable_types: DiagnosticMessage = diag(
            95031,
            DiagnosticCategory::Message,
            "Change_all_jsdoc_style_types_to_TypeScript_and_add_undefined_to_nullable_types_95031",
            "Change all jsdoc-style types to TypeScript (and add '| undefined' to nullable types)",
        );
    }
    lazy_static! {
        pub static ref Implement_all_unimplemented_interfaces: DiagnosticMessage = diag(
            95032,
            DiagnosticCategory::Message,
            "Implement_all_unimplemented_interfaces_95032",
            "Implement all unimplemented interfaces",
        );
    }
    lazy_static! {
        pub static ref Install_all_missing_types_packages: DiagnosticMessage = diag(
            95033,
            DiagnosticCategory::Message,
            "Install_all_missing_types_packages_95033",
            "Install all missing types packages",
        );
    }
    lazy_static! {
        pub static ref Rewrite_all_as_indexed_access_types: DiagnosticMessage = diag(
            95034,
            DiagnosticCategory::Message,
            "Rewrite_all_as_indexed_access_types_95034",
            "Rewrite all as indexed access types",
        );
    }
    lazy_static! {
        pub static ref Convert_all_to_default_imports: DiagnosticMessage = diag(
            95035,
            DiagnosticCategory::Message,
            "Convert_all_to_default_imports_95035",
            "Convert all to default imports",
        );
    }
    lazy_static! {
        pub static ref Make_all_super_calls_the_first_statement_in_their_constructor: DiagnosticMessage = diag(
            95036,
            DiagnosticCategory::Message,
            "Make_all_super_calls_the_first_statement_in_their_constructor_95036",
            "Make all 'super()' calls the first statement in their constructor",
        );
    }
    lazy_static! {
        pub static ref Add_qualifier_to_all_unresolved_variables_matching_a_member_name: DiagnosticMessage = diag(
            95037,
            DiagnosticCategory::Message,
            "Add_qualifier_to_all_unresolved_variables_matching_a_member_name_95037",
            "Add qualifier to all unresolved variables matching a member name",
        );
    }
    lazy_static! {
        pub static ref Change_all_extended_interfaces_to_implements: DiagnosticMessage = diag(
            95038,
            DiagnosticCategory::Message,
            "Change_all_extended_interfaces_to_implements_95038",
            "Change all extended interfaces to 'implements'",
        );
    }
    lazy_static! {
        pub static ref Add_all_missing_super_calls: DiagnosticMessage = diag(
            95039,
            DiagnosticCategory::Message,
            "Add_all_missing_super_calls_95039",
            "Add all missing super calls",
        );
    }
    lazy_static! {
        pub static ref Implement_all_inherited_abstract_classes: DiagnosticMessage = diag(
            95040,
            DiagnosticCategory::Message,
            "Implement_all_inherited_abstract_classes_95040",
            "Implement all inherited abstract classes",
        );
    }
    lazy_static! {
        pub static ref Add_all_missing_async_modifiers: DiagnosticMessage = diag(
            95041,
            DiagnosticCategory::Message,
            "Add_all_missing_async_modifiers_95041",
            "Add all missing 'async' modifiers",
        );
    }
    lazy_static! {
        pub static ref Add_ts_ignore_to_all_error_messages: DiagnosticMessage = diag(
            95042,
            DiagnosticCategory::Message,
            "Add_ts_ignore_to_all_error_messages_95042",
            "Add '@ts-ignore' to all error messages",
        );
    }
    lazy_static! {
        pub static ref Annotate_everything_with_types_from_JSDoc: DiagnosticMessage = diag(
            95043,
            DiagnosticCategory::Message,
            "Annotate_everything_with_types_from_JSDoc_95043",
            "Annotate everything with types from JSDoc",
        );
    }
    lazy_static! {
        pub static ref Add_to_all_uncalled_decorators: DiagnosticMessage = diag(
            95044,
            DiagnosticCategory::Message,
            "Add_to_all_uncalled_decorators_95044",
            "Add '()' to all uncalled decorators",
        );
    }
    lazy_static! {
        pub static ref Convert_all_constructor_functions_to_classes: DiagnosticMessage = diag(
            95045,
            DiagnosticCategory::Message,
            "Convert_all_constructor_functions_to_classes_95045",
            "Convert all constructor functions to classes",
        );
    }
    lazy_static! {
        pub static ref Generate_get_and_set_accessors: DiagnosticMessage = diag(
            95046,
            DiagnosticCategory::Message,
            "Generate_get_and_set_accessors_95046",
            "Generate 'get' and 'set' accessors",
        );
    }
    lazy_static! {
        pub static ref Convert_require_to_import: DiagnosticMessage = diag(
            95047,
            DiagnosticCategory::Message,
            "Convert_require_to_import_95047",
            "Convert 'require' to 'import'",
        );
    }
    lazy_static! {
        pub static ref Convert_all_require_to_import: DiagnosticMessage = diag(
            95048,
            DiagnosticCategory::Message,
            "Convert_all_require_to_import_95048",
            "Convert all 'require' to 'import'",
        );
    }
    lazy_static! {
        pub static ref Move_to_a_new_file: DiagnosticMessage = diag(
            95049,
            DiagnosticCategory::Message,
            "Move_to_a_new_file_95049",
            "Move to a new file",
        );
    }
    lazy_static! {
        pub static ref Remove_unreachable_code: DiagnosticMessage = diag(
            95050,
            DiagnosticCategory::Message,
            "Remove_unreachable_code_95050",
            "Remove unreachable code",
        );
    }
    lazy_static! {
        pub static ref Remove_all_unreachable_code: DiagnosticMessage = diag(
            95051,
            DiagnosticCategory::Message,
            "Remove_all_unreachable_code_95051",
            "Remove all unreachable code",
        );
    }
    lazy_static! {
        pub static ref Add_missing_typeof: DiagnosticMessage = diag(
            95052,
            DiagnosticCategory::Message,
            "Add_missing_typeof_95052",
            "Add missing 'typeof'",
        );
    }
    lazy_static! {
        pub static ref Remove_unused_label: DiagnosticMessage = diag(
            95053,
            DiagnosticCategory::Message,
            "Remove_unused_label_95053",
            "Remove unused label",
        );
    }
    lazy_static! {
        pub static ref Remove_all_unused_labels: DiagnosticMessage = diag(
            95054,
            DiagnosticCategory::Message,
            "Remove_all_unused_labels_95054",
            "Remove all unused labels",
        );
    }
    lazy_static! {
        pub static ref Convert_0_to_mapped_object_type: DiagnosticMessage = diag(
            95055,
            DiagnosticCategory::Message,
            "Convert_0_to_mapped_object_type_95055",
            "Convert '{0}' to mapped object type",
        );
    }
    lazy_static! {
        pub static ref Convert_namespace_import_to_named_imports: DiagnosticMessage = diag(
            95056,
            DiagnosticCategory::Message,
            "Convert_namespace_import_to_named_imports_95056",
            "Convert namespace import to named imports",
        );
    }
    lazy_static! {
        pub static ref Convert_named_imports_to_namespace_import: DiagnosticMessage = diag(
            95057,
            DiagnosticCategory::Message,
            "Convert_named_imports_to_namespace_import_95057",
            "Convert named imports to namespace import",
        );
    }
    lazy_static! {
        pub static ref Add_or_remove_braces_in_an_arrow_function: DiagnosticMessage = diag(
            95058,
            DiagnosticCategory::Message,
            "Add_or_remove_braces_in_an_arrow_function_95058",
            "Add or remove braces in an arrow function",
        );
    }
    lazy_static! {
        pub static ref Add_braces_to_arrow_function: DiagnosticMessage = diag(
            95059,
            DiagnosticCategory::Message,
            "Add_braces_to_arrow_function_95059",
            "Add braces to arrow function",
        );
    }
    lazy_static! {
        pub static ref Remove_braces_from_arrow_function: DiagnosticMessage = diag(
            95060,
            DiagnosticCategory::Message,
            "Remove_braces_from_arrow_function_95060",
            "Remove braces from arrow function",
        );
    }
    lazy_static! {
        pub static ref Convert_default_export_to_named_export: DiagnosticMessage = diag(
            95061,
            DiagnosticCategory::Message,
            "Convert_default_export_to_named_export_95061",
            "Convert default export to named export",
        );
    }
    lazy_static! {
        pub static ref Convert_named_export_to_default_export: DiagnosticMessage = diag(
            95062,
            DiagnosticCategory::Message,
            "Convert_named_export_to_default_export_95062",
            "Convert named export to default export",
        );
    }
    lazy_static! {
        pub static ref Add_missing_enum_member_0: DiagnosticMessage = diag(
            95063,
            DiagnosticCategory::Message,
            "Add_missing_enum_member_0_95063",
            "Add missing enum member '{0}'",
        );
    }
    lazy_static! {
        pub static ref Add_all_missing_imports: DiagnosticMessage = diag(
            95064,
            DiagnosticCategory::Message,
            "Add_all_missing_imports_95064",
            "Add all missing imports",
        );
    }
    lazy_static! {
        pub static ref Convert_to_async_function: DiagnosticMessage = diag(
            95065,
            DiagnosticCategory::Message,
            "Convert_to_async_function_95065",
            "Convert to async function",
        );
    }
    lazy_static! {
        pub static ref Convert_all_to_async_functions: DiagnosticMessage = diag(
            95066,
            DiagnosticCategory::Message,
            "Convert_all_to_async_functions_95066",
            "Convert all to async functions",
        );
    }
    lazy_static! {
        pub static ref Add_missing_call_parentheses: DiagnosticMessage = diag(
            95067,
            DiagnosticCategory::Message,
            "Add_missing_call_parentheses_95067",
            "Add missing call parentheses",
        );
    }
    lazy_static! {
        pub static ref Add_all_missing_call_parentheses: DiagnosticMessage = diag(
            95068,
            DiagnosticCategory::Message,
            "Add_all_missing_call_parentheses_95068",
            "Add all missing call parentheses",
        );
    }
    lazy_static! {
        pub static ref Add_unknown_conversion_for_non_overlapping_types: DiagnosticMessage = diag(
            95069,
            DiagnosticCategory::Message,
            "Add_unknown_conversion_for_non_overlapping_types_95069",
            "Add 'unknown' conversion for non-overlapping types",
        );
    }
    lazy_static! {
        pub static ref Add_unknown_to_all_conversions_of_non_overlapping_types: DiagnosticMessage = diag(
            95070,
            DiagnosticCategory::Message,
            "Add_unknown_to_all_conversions_of_non_overlapping_types_95070",
            "Add 'unknown' to all conversions of non-overlapping types",
        );
    }
    lazy_static! {
        pub static ref Add_missing_new_operator_to_call: DiagnosticMessage = diag(
            95071,
            DiagnosticCategory::Message,
            "Add_missing_new_operator_to_call_95071",
            "Add missing 'new' operator to call",
        );
    }
    lazy_static! {
        pub static ref Add_missing_new_operator_to_all_calls: DiagnosticMessage = diag(
            95072,
            DiagnosticCategory::Message,
            "Add_missing_new_operator_to_all_calls_95072",
            "Add missing 'new' operator to all calls",
        );
    }
    lazy_static! {
        pub static ref Add_names_to_all_parameters_without_names: DiagnosticMessage = diag(
            95073,
            DiagnosticCategory::Message,
            "Add_names_to_all_parameters_without_names_95073",
            "Add names to all parameters without names",
        );
    }
    lazy_static! {
        pub static ref Enable_the_experimentalDecorators_option_in_your_configuration_file: DiagnosticMessage = diag(
            95074,
            DiagnosticCategory::Message,
            "Enable_the_experimentalDecorators_option_in_your_configuration_file_95074",
            "Enable the 'experimentalDecorators' option in your configuration file",
        );
    }
    lazy_static! {
        pub static ref Convert_parameters_to_destructured_object: DiagnosticMessage = diag(
            95075,
            DiagnosticCategory::Message,
            "Convert_parameters_to_destructured_object_95075",
            "Convert parameters to destructured object",
        );
    }
    lazy_static! {
        pub static ref Extract_type: DiagnosticMessage = diag(
            95077,
            DiagnosticCategory::Message,
            "Extract_type_95077",
            "Extract type",
        );
    }
    lazy_static! {
        pub static ref Extract_to_type_alias: DiagnosticMessage = diag(
            95078,
            DiagnosticCategory::Message,
            "Extract_to_type_alias_95078",
            "Extract to type alias",
        );
    }
    lazy_static! {
        pub static ref Extract_to_typedef: DiagnosticMessage = diag(
            95079,
            DiagnosticCategory::Message,
            "Extract_to_typedef_95079",
            "Extract to typedef",
        );
    }
    lazy_static! {
        pub static ref Infer_this_type_of_0_from_usage: DiagnosticMessage = diag(
            95080,
            DiagnosticCategory::Message,
            "Infer_this_type_of_0_from_usage_95080",
            "Infer 'this' type of '{0}' from usage",
        );
    }
    lazy_static! {
        pub static ref Add_const_to_unresolved_variable: DiagnosticMessage = diag(
            95081,
            DiagnosticCategory::Message,
            "Add_const_to_unresolved_variable_95081",
            "Add 'const' to unresolved variable",
        );
    }
    lazy_static! {
        pub static ref Add_const_to_all_unresolved_variables: DiagnosticMessage = diag(
            95082,
            DiagnosticCategory::Message,
            "Add_const_to_all_unresolved_variables_95082",
            "Add 'const' to all unresolved variables",
        );
    }
    lazy_static! {
        pub static ref Add_await: DiagnosticMessage = diag(
            95083,
            DiagnosticCategory::Message,
            "Add_await_95083",
            "Add 'await'",
        );
    }
    lazy_static! {
        pub static ref Add_await_to_initializer_for_0: DiagnosticMessage = diag(
            95084,
            DiagnosticCategory::Message,
            "Add_await_to_initializer_for_0_95084",
            "Add 'await' to initializer for '{0}'",
        );
    }
    lazy_static! {
        pub static ref Fix_all_expressions_possibly_missing_await: DiagnosticMessage = diag(
            95085,
            DiagnosticCategory::Message,
            "Fix_all_expressions_possibly_missing_await_95085",
            "Fix all expressions possibly missing 'await'",
        );
    }
    lazy_static! {
        pub static ref Remove_unnecessary_await: DiagnosticMessage = diag(
            95086,
            DiagnosticCategory::Message,
            "Remove_unnecessary_await_95086",
            "Remove unnecessary 'await'",
        );
    }
    lazy_static! {
        pub static ref Remove_all_unnecessary_uses_of_await: DiagnosticMessage = diag(
            95087,
            DiagnosticCategory::Message,
            "Remove_all_unnecessary_uses_of_await_95087",
            "Remove all unnecessary uses of 'await'",
        );
    }
    lazy_static! {
        pub static ref Enable_the_jsx_flag_in_your_configuration_file: DiagnosticMessage = diag(
            95088,
            DiagnosticCategory::Message,
            "Enable_the_jsx_flag_in_your_configuration_file_95088",
            "Enable the '--jsx' flag in your configuration file",
        );
    }
    lazy_static! {
        pub static ref Add_await_to_initializers: DiagnosticMessage = diag(
            95089,
            DiagnosticCategory::Message,
            "Add_await_to_initializers_95089",
            "Add 'await' to initializers",
        );
    }
    lazy_static! {
        pub static ref Extract_to_interface: DiagnosticMessage = diag(
            95090,
            DiagnosticCategory::Message,
            "Extract_to_interface_95090",
            "Extract to interface",
        );
    }
    lazy_static! {
        pub static ref Convert_to_a_bigint_numeric_literal: DiagnosticMessage = diag(
            95091,
            DiagnosticCategory::Message,
            "Convert_to_a_bigint_numeric_literal_95091",
            "Convert to a bigint numeric literal",
        );
    }
    lazy_static! {
        pub static ref Convert_all_to_bigint_numeric_literals: DiagnosticMessage = diag(
            95092,
            DiagnosticCategory::Message,
            "Convert_all_to_bigint_numeric_literals_95092",
            "Convert all to bigint numeric literals",
        );
    }
    lazy_static! {
        pub static ref Convert_const_to_let: DiagnosticMessage = diag(
            95093,
            DiagnosticCategory::Message,
            "Convert_const_to_let_95093",
            "Convert 'const' to 'let'",
        );
    }
    lazy_static! {
        pub static ref Prefix_with_declare: DiagnosticMessage = diag(
            95094,
            DiagnosticCategory::Message,
            "Prefix_with_declare_95094",
            "Prefix with 'declare'",
        );
    }
    lazy_static! {
        pub static ref Prefix_all_incorrect_property_declarations_with_declare: DiagnosticMessage = diag(
            95095,
            DiagnosticCategory::Message,
            "Prefix_all_incorrect_property_declarations_with_declare_95095",
            "Prefix all incorrect property declarations with 'declare'",
        );
    }
    lazy_static! {
        pub static ref Convert_to_template_string: DiagnosticMessage = diag(
            95096,
            DiagnosticCategory::Message,
            "Convert_to_template_string_95096",
            "Convert to template string",
        );
    }
    lazy_static! {
        pub static ref Add_export_to_make_this_file_into_a_module: DiagnosticMessage = diag(
            95097,
            DiagnosticCategory::Message,
            "Add_export_to_make_this_file_into_a_module_95097",
            "Add 'export {}' to make this file into a module",
        );
    }
    lazy_static! {
        pub static ref Set_the_target_option_in_your_configuration_file_to_0: DiagnosticMessage = diag(
            95098,
            DiagnosticCategory::Message,
            "Set_the_target_option_in_your_configuration_file_to_0_95098",
            "Set the 'target' option in your configuration file to '{0}'",
        );
    }
    lazy_static! {
        pub static ref Set_the_module_option_in_your_configuration_file_to_0: DiagnosticMessage = diag(
            95099,
            DiagnosticCategory::Message,
            "Set_the_module_option_in_your_configuration_file_to_0_95099",
            "Set the 'module' option in your configuration file to '{0}'",
        );
    }
    lazy_static! {
        pub static ref Convert_invalid_character_to_its_html_entity_code: DiagnosticMessage = diag(
            95100,
            DiagnosticCategory::Message,
            "Convert_invalid_character_to_its_html_entity_code_95100",
            "Convert invalid character to its html entity code",
        );
    }
    lazy_static! {
        pub static ref Convert_all_invalid_characters_to_HTML_entity_code: DiagnosticMessage = diag(
            95101,
            DiagnosticCategory::Message,
            "Convert_all_invalid_characters_to_HTML_entity_code_95101",
            "Convert all invalid characters to HTML entity code",
        );
    }
    lazy_static! {
        pub static ref Convert_function_expression_0_to_arrow_function: DiagnosticMessage = diag(
            95105,
            DiagnosticCategory::Message,
            "Convert_function_expression_0_to_arrow_function_95105",
            "Convert function expression '{0}' to arrow function",
        );
    }
    lazy_static! {
        pub static ref Convert_function_declaration_0_to_arrow_function: DiagnosticMessage = diag(
            95106,
            DiagnosticCategory::Message,
            "Convert_function_declaration_0_to_arrow_function_95106",
            "Convert function declaration '{0}' to arrow function",
        );
    }
    lazy_static! {
        pub static ref Fix_all_implicit_this_errors: DiagnosticMessage = diag(
            95107,
            DiagnosticCategory::Message,
            "Fix_all_implicit_this_errors_95107",
            "Fix all implicit-'this' errors",
        );
    }
    lazy_static! {
        pub static ref Wrap_invalid_character_in_an_expression_container: DiagnosticMessage = diag(
            95108,
            DiagnosticCategory::Message,
            "Wrap_invalid_character_in_an_expression_container_95108",
            "Wrap invalid character in an expression container",
        );
    }
    lazy_static! {
        pub static ref Wrap_all_invalid_characters_in_an_expression_container: DiagnosticMessage = diag(
            95109,
            DiagnosticCategory::Message,
            "Wrap_all_invalid_characters_in_an_expression_container_95109",
            "Wrap all invalid characters in an expression container",
        );
    }
    lazy_static! {
        pub static ref Visit_https_Colon_Slash_Slashaka_ms_Slashtsconfig_json_to_read_more_about_this_file: DiagnosticMessage = diag(
            95110,
            DiagnosticCategory::Message,
            "Visit_https_Colon_Slash_Slashaka_ms_Slashtsconfig_json_to_read_more_about_this_file_95110",
            "Visit https://aka.ms/tsconfig.json to read more about this file",
        );
    }
    lazy_static! {
        pub static ref Add_a_return_statement: DiagnosticMessage = diag(
            95111,
            DiagnosticCategory::Message,
            "Add_a_return_statement_95111",
            "Add a return statement",
        );
    }
    lazy_static! {
        pub static ref Remove_braces_from_arrow_function_body: DiagnosticMessage = diag(
            95112,
            DiagnosticCategory::Message,
            "Remove_braces_from_arrow_function_body_95112",
            "Remove braces from arrow function body",
        );
    }
    lazy_static! {
        pub static ref Wrap_the_following_body_with_parentheses_which_should_be_an_object_literal: DiagnosticMessage = diag(
            95113,
            DiagnosticCategory::Message,
            "Wrap_the_following_body_with_parentheses_which_should_be_an_object_literal_95113",
            "Wrap the following body with parentheses which should be an object literal",
        );
    }
    lazy_static! {
        pub static ref Add_all_missing_return_statement: DiagnosticMessage = diag(
            95114,
            DiagnosticCategory::Message,
            "Add_all_missing_return_statement_95114",
            "Add all missing return statement",
        );
    }
    lazy_static! {
        pub static ref Remove_braces_from_all_arrow_function_bodies_with_relevant_issues: DiagnosticMessage = diag(
            95115,
            DiagnosticCategory::Message,
            "Remove_braces_from_all_arrow_function_bodies_with_relevant_issues_95115",
            "Remove braces from all arrow function bodies with relevant issues",
        );
    }
    lazy_static! {
        pub static ref Wrap_all_object_literal_with_parentheses: DiagnosticMessage = diag(
            95116,
            DiagnosticCategory::Message,
            "Wrap_all_object_literal_with_parentheses_95116",
            "Wrap all object literal with parentheses",
        );
    }
    lazy_static! {
        pub static ref Move_labeled_tuple_element_modifiers_to_labels: DiagnosticMessage = diag(
            95117,
            DiagnosticCategory::Message,
            "Move_labeled_tuple_element_modifiers_to_labels_95117",
            "Move labeled tuple element modifiers to labels",
        );
    }
    lazy_static! {
        pub static ref Convert_overload_list_to_single_signature: DiagnosticMessage = diag(
            95118,
            DiagnosticCategory::Message,
            "Convert_overload_list_to_single_signature_95118",
            "Convert overload list to single signature",
        );
    }
    lazy_static! {
        pub static ref Generate_get_and_set_accessors_for_all_overriding_properties: DiagnosticMessage = diag(
            95119,
            DiagnosticCategory::Message,
            "Generate_get_and_set_accessors_for_all_overriding_properties_95119",
            "Generate 'get' and 'set' accessors for all overriding properties",
        );
    }
    lazy_static! {
        pub static ref Wrap_in_JSX_fragment: DiagnosticMessage = diag(
            95120,
            DiagnosticCategory::Message,
            "Wrap_in_JSX_fragment_95120",
            "Wrap in JSX fragment",
        );
    }
    lazy_static! {
        pub static ref Wrap_all_unparented_JSX_in_JSX_fragment: DiagnosticMessage = diag(
            95121,
            DiagnosticCategory::Message,
            "Wrap_all_unparented_JSX_in_JSX_fragment_95121",
            "Wrap all unparented JSX in JSX fragment",
        );
    }
    lazy_static! {
        pub static ref Convert_arrow_function_or_function_expression: DiagnosticMessage = diag(
            95122,
            DiagnosticCategory::Message,
            "Convert_arrow_function_or_function_expression_95122",
            "Convert arrow function or function expression",
        );
    }
    lazy_static! {
        pub static ref Convert_to_anonymous_function: DiagnosticMessage = diag(
            95123,
            DiagnosticCategory::Message,
            "Convert_to_anonymous_function_95123",
            "Convert to anonymous function",
        );
    }
    lazy_static! {
        pub static ref Convert_to_named_function: DiagnosticMessage = diag(
            95124,
            DiagnosticCategory::Message,
            "Convert_to_named_function_95124",
            "Convert to named function",
        );
    }
    lazy_static! {
        pub static ref Convert_to_arrow_function: DiagnosticMessage = diag(
            95125,
            DiagnosticCategory::Message,
            "Convert_to_arrow_function_95125",
            "Convert to arrow function",
        );
    }
    lazy_static! {
        pub static ref Remove_parentheses: DiagnosticMessage = diag(
            95126,
            DiagnosticCategory::Message,
            "Remove_parentheses_95126",
            "Remove parentheses",
        );
    }
    lazy_static! {
        pub static ref Could_not_find_a_containing_arrow_function: DiagnosticMessage = diag(
            95127,
            DiagnosticCategory::Message,
            "Could_not_find_a_containing_arrow_function_95127",
            "Could not find a containing arrow function",
        );
    }
    lazy_static! {
        pub static ref Containing_function_is_not_an_arrow_function: DiagnosticMessage = diag(
            95128,
            DiagnosticCategory::Message,
            "Containing_function_is_not_an_arrow_function_95128",
            "Containing function is not an arrow function",
        );
    }
    lazy_static! {
        pub static ref Could_not_find_export_statement: DiagnosticMessage = diag(
            95129,
            DiagnosticCategory::Message,
            "Could_not_find_export_statement_95129",
            "Could not find export statement",
        );
    }
    lazy_static! {
        pub static ref This_file_already_has_a_default_export: DiagnosticMessage = diag(
            95130,
            DiagnosticCategory::Message,
            "This_file_already_has_a_default_export_95130",
            "This file already has a default export",
        );
    }
    lazy_static! {
        pub static ref Could_not_find_import_clause: DiagnosticMessage = diag(
            95131,
            DiagnosticCategory::Message,
            "Could_not_find_import_clause_95131",
            "Could not find import clause",
        );
    }
    lazy_static! {
        pub static ref Could_not_find_namespace_import_or_named_imports: DiagnosticMessage = diag(
            95132,
            DiagnosticCategory::Message,
            "Could_not_find_namespace_import_or_named_imports_95132",
            "Could not find namespace import or named imports",
        );
    }
    lazy_static! {
        pub static ref Selection_is_not_a_valid_type_node: DiagnosticMessage = diag(
            95133,
            DiagnosticCategory::Message,
            "Selection_is_not_a_valid_type_node_95133",
            "Selection is not a valid type node",
        );
    }
    lazy_static! {
        pub static ref No_type_could_be_extracted_from_this_type_node: DiagnosticMessage = diag(
            95134,
            DiagnosticCategory::Message,
            "No_type_could_be_extracted_from_this_type_node_95134",
            "No type could be extracted from this type node",
        );
    }
    lazy_static! {
        pub static ref Could_not_find_property_for_which_to_generate_accessor: DiagnosticMessage = diag(
            95135,
            DiagnosticCategory::Message,
            "Could_not_find_property_for_which_to_generate_accessor_95135",
            "Could not find property for which to generate accessor",
        );
    }
    lazy_static! {
        pub static ref Name_is_not_valid: DiagnosticMessage = diag(
            95136,
            DiagnosticCategory::Message,
            "Name_is_not_valid_95136",
            "Name is not valid",
        );
    }
    lazy_static! {
        pub static ref Can_only_convert_property_with_modifier: DiagnosticMessage = diag(
            95137,
            DiagnosticCategory::Message,
            "Can_only_convert_property_with_modifier_95137",
            "Can only convert property with modifier",
        );
    }
    lazy_static! {
        pub static ref Switch_each_misused_0_to_1: DiagnosticMessage = diag(
            95138,
            DiagnosticCategory::Message,
            "Switch_each_misused_0_to_1_95138",
            "Switch each misused '{0}' to '{1}'",
        );
    }
    lazy_static! {
        pub static ref Convert_to_optional_chain_expression: DiagnosticMessage = diag(
            95139,
            DiagnosticCategory::Message,
            "Convert_to_optional_chain_expression_95139",
            "Convert to optional chain expression",
        );
    }
    lazy_static! {
        pub static ref Could_not_find_convertible_access_expression: DiagnosticMessage = diag(
            95140,
            DiagnosticCategory::Message,
            "Could_not_find_convertible_access_expression_95140",
            "Could not find convertible access expression",
        );
    }
    lazy_static! {
        pub static ref Could_not_find_matching_access_expressions: DiagnosticMessage = diag(
            95141,
            DiagnosticCategory::Message,
            "Could_not_find_matching_access_expressions_95141",
            "Could not find matching access expressions",
        );
    }
    lazy_static! {
        pub static ref Can_only_convert_logical_AND_access_chains: DiagnosticMessage = diag(
            95142,
            DiagnosticCategory::Message,
            "Can_only_convert_logical_AND_access_chains_95142",
            "Can only convert logical AND access chains",
        );
    }
    lazy_static! {
        pub static ref Add_void_to_Promise_resolved_without_a_value: DiagnosticMessage = diag(
            95143,
            DiagnosticCategory::Message,
            "Add_void_to_Promise_resolved_without_a_value_95143",
            "Add 'void' to Promise resolved without a value",
        );
    }
    lazy_static! {
        pub static ref Add_void_to_all_Promises_resolved_without_a_value: DiagnosticMessage = diag(
            95144,
            DiagnosticCategory::Message,
            "Add_void_to_all_Promises_resolved_without_a_value_95144",
            "Add 'void' to all Promises resolved without a value",
        );
    }
    lazy_static! {
        pub static ref Use_element_access_for_0: DiagnosticMessage = diag(
            95145,
            DiagnosticCategory::Message,
            "Use_element_access_for_0_95145",
            "Use element access for '{0}'",
        );
    }
    lazy_static! {
        pub static ref Use_element_access_for_all_undeclared_properties: DiagnosticMessage = diag(
            95146,
            DiagnosticCategory::Message,
            "Use_element_access_for_all_undeclared_properties_95146",
            "Use element access for all undeclared properties.",
        );
    }
    lazy_static! {
        pub static ref Delete_all_unused_imports: DiagnosticMessage = diag(
            95147,
            DiagnosticCategory::Message,
            "Delete_all_unused_imports_95147",
            "Delete all unused imports",
        );
    }
    lazy_static! {
        pub static ref Infer_function_return_type: DiagnosticMessage = diag(
            95148,
            DiagnosticCategory::Message,
            "Infer_function_return_type_95148",
            "Infer function return type",
        );
    }
    lazy_static! {
        pub static ref Return_type_must_be_inferred_from_a_function: DiagnosticMessage = diag(
            95149,
            DiagnosticCategory::Message,
            "Return_type_must_be_inferred_from_a_function_95149",
            "Return type must be inferred from a function",
        );
    }
    lazy_static! {
        pub static ref Could_not_determine_function_return_type: DiagnosticMessage = diag(
            95150,
            DiagnosticCategory::Message,
            "Could_not_determine_function_return_type_95150",
            "Could not determine function return type",
        );
    }
    lazy_static! {
        pub static ref Could_not_convert_to_arrow_function: DiagnosticMessage = diag(
            95151,
            DiagnosticCategory::Message,
            "Could_not_convert_to_arrow_function_95151",
            "Could not convert to arrow function",
        );
    }
    lazy_static! {
        pub static ref Could_not_convert_to_named_function: DiagnosticMessage = diag(
            95152,
            DiagnosticCategory::Message,
            "Could_not_convert_to_named_function_95152",
            "Could not convert to named function",
        );
    }
    lazy_static! {
        pub static ref Could_not_convert_to_anonymous_function: DiagnosticMessage = diag(
            95153,
            DiagnosticCategory::Message,
            "Could_not_convert_to_anonymous_function_95153",
            "Could not convert to anonymous function",
        );
    }
    lazy_static! {
        pub static ref Can_only_convert_string_concatenation: DiagnosticMessage = diag(
            95154,
            DiagnosticCategory::Message,
            "Can_only_convert_string_concatenation_95154",
            "Can only convert string concatenation",
        );
    }
    lazy_static! {
        pub static ref Selection_is_not_a_valid_statement_or_statements: DiagnosticMessage = diag(
            95155,
            DiagnosticCategory::Message,
            "Selection_is_not_a_valid_statement_or_statements_95155",
            "Selection is not a valid statement or statements",
        );
    }
    lazy_static! {
        pub static ref Add_missing_function_declaration_0: DiagnosticMessage = diag(
            95156,
            DiagnosticCategory::Message,
            "Add_missing_function_declaration_0_95156",
            "Add missing function declaration '{0}'",
        );
    }
    lazy_static! {
        pub static ref Add_all_missing_function_declarations: DiagnosticMessage = diag(
            95157,
            DiagnosticCategory::Message,
            "Add_all_missing_function_declarations_95157",
            "Add all missing function declarations",
        );
    }
    lazy_static! {
        pub static ref Method_not_implemented: DiagnosticMessage = diag(
            95158,
            DiagnosticCategory::Message,
            "Method_not_implemented_95158",
            "Method not implemented.",
        );
    }
    lazy_static! {
        pub static ref Function_not_implemented: DiagnosticMessage = diag(
            95159,
            DiagnosticCategory::Message,
            "Function_not_implemented_95159",
            "Function not implemented.",
        );
    }
    lazy_static! {
        pub static ref Add_override_modifier: DiagnosticMessage = diag(
            95160,
            DiagnosticCategory::Message,
            "Add_override_modifier_95160",
            "Add 'override' modifier",
        );
    }
    lazy_static! {
        pub static ref Remove_override_modifier: DiagnosticMessage = diag(
            95161,
            DiagnosticCategory::Message,
            "Remove_override_modifier_95161",
            "Remove 'override' modifier",
        );
    }
    lazy_static! {
        pub static ref Add_all_missing_override_modifiers: DiagnosticMessage = diag(
            95162,
            DiagnosticCategory::Message,
            "Add_all_missing_override_modifiers_95162",
            "Add all missing 'override' modifiers",
        );
    }
    lazy_static! {
        pub static ref Remove_all_unnecessary_override_modifiers: DiagnosticMessage = diag(
            95163,
            DiagnosticCategory::Message,
            "Remove_all_unnecessary_override_modifiers_95163",
            "Remove all unnecessary 'override' modifiers",
        );
    }
    lazy_static! {
        pub static ref Can_only_convert_named_export: DiagnosticMessage = diag(
            95164,
            DiagnosticCategory::Message,
            "Can_only_convert_named_export_95164",
            "Can only convert named export",
        );
    }
    lazy_static! {
        pub static ref Add_missing_properties: DiagnosticMessage = diag(
            95165,
            DiagnosticCategory::Message,
            "Add_missing_properties_95165",
            "Add missing properties",
        );
    }
    lazy_static! {
        pub static ref Add_all_missing_properties: DiagnosticMessage = diag(
            95166,
            DiagnosticCategory::Message,
            "Add_all_missing_properties_95166",
            "Add all missing properties",
        );
    }
    lazy_static! {
        pub static ref Add_missing_attributes: DiagnosticMessage = diag(
            95167,
            DiagnosticCategory::Message,
            "Add_missing_attributes_95167",
            "Add missing attributes",
        );
    }
    lazy_static! {
        pub static ref Add_all_missing_attributes: DiagnosticMessage = diag(
            95168,
            DiagnosticCategory::Message,
            "Add_all_missing_attributes_95168",
            "Add all missing attributes",
        );
    }
    lazy_static! {
        pub static ref Add_undefined_to_optional_property_type: DiagnosticMessage = diag(
            95169,
            DiagnosticCategory::Message,
            "Add_undefined_to_optional_property_type_95169",
            "Add 'undefined' to optional property type",
        );
    }
}
