#![allow(non_upper_case_globals)]

use regex::Regex;
use std::array::IntoIter;
use std::cell::{Ref, RefCell};
use std::cmp;
use std::collections::HashMap;
use std::convert::{TryFrom, TryInto};
use std::iter::FromIterator;

use super::code_point_at;
use crate::{
    binary_search_copy_key, compare_values, maybe_text_char_at_index, position_is_synthesized,
    text_char_at_index, text_len, text_str_num_chars, text_substring, CharacterCodes, Debug_,
    DiagnosticMessage, Diagnostics, LineAndCharacter, ScriptTarget, SourceFileLike,
    SourceTextAsChars, SyntaxKind, TokenFlags,
};

pub type ErrorCallback<'callback> = &'callback dyn Fn(&DiagnosticMessage, usize);

pub fn token_is_identifier_or_keyword(token: SyntaxKind) -> bool {
    token >= SyntaxKind::Identifier
}

pub(crate) fn token_is_identifier_or_keyword_or_greater_than(token: SyntaxKind) -> bool {
    token == SyntaxKind::GreaterThanToken || token_is_identifier_or_keyword(token)
}

lazy_static! {
    pub(super) static ref text_to_keyword_obj: HashMap<String, SyntaxKind> =
        HashMap::from_iter(IntoIter::new([
            ("abstract".to_string(), SyntaxKind::AbstractKeyword),
            ("any".to_string(), SyntaxKind::AnyKeyword),
            ("as".to_string(), SyntaxKind::AsKeyword),
            ("asserts".to_string(), SyntaxKind::AssertsKeyword),
            ("assert".to_string(), SyntaxKind::AssertKeyword),
            ("bigint".to_string(), SyntaxKind::BigIntKeyword),
            ("boolean".to_string(), SyntaxKind::BooleanKeyword),
            ("break".to_string(), SyntaxKind::BreakKeyword),
            ("case".to_string(), SyntaxKind::CaseKeyword),
            ("catch".to_string(), SyntaxKind::CatchKeyword),
            ("class".to_string(), SyntaxKind::ClassKeyword),
            ("continue".to_string(), SyntaxKind::ContinueKeyword),
            ("const".to_string(), SyntaxKind::ConstKeyword),
            ("constructor".to_string(), SyntaxKind::ConstructorKeyword),
            ("debugger".to_string(), SyntaxKind::DebuggerKeyword),
            ("declare".to_string(), SyntaxKind::DeclareKeyword),
            ("default".to_string(), SyntaxKind::DefaultKeyword),
            ("delete".to_string(), SyntaxKind::DeleteKeyword),
            ("do".to_string(), SyntaxKind::DoKeyword),
            ("else".to_string(), SyntaxKind::ElseKeyword),
            ("enum".to_string(), SyntaxKind::EnumKeyword),
            ("export".to_string(), SyntaxKind::ExportKeyword),
            ("extends".to_string(), SyntaxKind::ExtendsKeyword),
            ("false".to_string(), SyntaxKind::FalseKeyword),
            ("finally".to_string(), SyntaxKind::FinallyKeyword),
            ("for".to_string(), SyntaxKind::ForKeyword),
            ("from".to_string(), SyntaxKind::FromKeyword),
            ("function".to_string(), SyntaxKind::FunctionKeyword),
            ("get".to_string(), SyntaxKind::GetKeyword),
            ("if".to_string(), SyntaxKind::IfKeyword),
            ("implements".to_string(), SyntaxKind::ImplementsKeyword),
            ("import".to_string(), SyntaxKind::ImportKeyword),
            ("in".to_string(), SyntaxKind::InKeyword),
            ("infer".to_string(), SyntaxKind::InferKeyword),
            ("instanceof".to_string(), SyntaxKind::InstanceOfKeyword),
            ("interface".to_string(), SyntaxKind::InterfaceKeyword),
            ("intrinsic".to_string(), SyntaxKind::IntrinsicKeyword),
            ("is".to_string(), SyntaxKind::IsKeyword),
            ("keyof".to_string(), SyntaxKind::KeyOfKeyword),
            ("let".to_string(), SyntaxKind::LetKeyword),
            ("module".to_string(), SyntaxKind::ModuleKeyword),
            ("namespace".to_string(), SyntaxKind::NamespaceKeyword),
            ("never".to_string(), SyntaxKind::NeverKeyword),
            ("new".to_string(), SyntaxKind::NewKeyword),
            ("null".to_string(), SyntaxKind::NullKeyword),
            ("number".to_string(), SyntaxKind::NumberKeyword),
            ("object".to_string(), SyntaxKind::ObjectKeyword),
            ("package".to_string(), SyntaxKind::PackageKeyword),
            ("private".to_string(), SyntaxKind::PrivateKeyword),
            ("protected".to_string(), SyntaxKind::ProtectedKeyword),
            ("public".to_string(), SyntaxKind::PublicKeyword),
            ("override".to_string(), SyntaxKind::OverrideKeyword),
            ("readonly".to_string(), SyntaxKind::ReadonlyKeyword),
            ("require".to_string(), SyntaxKind::RequireKeyword),
            ("global".to_string(), SyntaxKind::GlobalKeyword),
            ("return".to_string(), SyntaxKind::ReturnKeyword),
            ("set".to_string(), SyntaxKind::SetKeyword),
            ("static".to_string(), SyntaxKind::StaticKeyword),
            ("string".to_string(), SyntaxKind::StringKeyword),
            ("super".to_string(), SyntaxKind::SuperKeyword),
            ("switch".to_string(), SyntaxKind::SwitchKeyword),
            ("symbol".to_string(), SyntaxKind::SymbolKeyword),
            ("this".to_string(), SyntaxKind::ThisKeyword),
            ("throw".to_string(), SyntaxKind::ThrowKeyword),
            ("true".to_string(), SyntaxKind::TrueKeyword),
            ("try".to_string(), SyntaxKind::TryKeyword),
            ("type".to_string(), SyntaxKind::TypeKeyword),
            ("typeof".to_string(), SyntaxKind::TypeOfKeyword),
            ("undefined".to_string(), SyntaxKind::UndefinedKeyword),
            ("unique".to_string(), SyntaxKind::UniqueKeyword),
            ("unknown".to_string(), SyntaxKind::UnknownKeyword),
            ("var".to_string(), SyntaxKind::VarKeyword),
            ("void".to_string(), SyntaxKind::VoidKeyword),
            ("while".to_string(), SyntaxKind::WhileKeyword),
            ("with".to_string(), SyntaxKind::WithKeyword),
            ("yield".to_string(), SyntaxKind::YieldKeyword),
            ("async".to_string(), SyntaxKind::AsyncKeyword),
            ("await".to_string(), SyntaxKind::AwaitKeyword),
            ("of".to_string(), SyntaxKind::OfKeyword),
        ]));
}

lazy_static! {
    pub(super) static ref text_to_keyword: HashMap<String, SyntaxKind> =
        text_to_keyword_obj.clone();
}

lazy_static! {
    pub(super) static ref text_to_token: HashMap<String, SyntaxKind> = {
        let mut ret = text_to_keyword_obj.clone();
        ret.extend(IntoIter::new([
            ("{".to_string(), SyntaxKind::OpenBraceToken),
            ("}".to_string(), SyntaxKind::CloseBraceToken),
            ("(".to_string(), SyntaxKind::OpenParenToken),
            (")".to_string(), SyntaxKind::CloseParenToken),
            ("[".to_string(), SyntaxKind::OpenBracketToken),
            ("]".to_string(), SyntaxKind::CloseBracketToken),
            (".".to_string(), SyntaxKind::DotToken),
            ("...".to_string(), SyntaxKind::DotDotDotToken),
            (";".to_string(), SyntaxKind::SemicolonToken),
            (",".to_string(), SyntaxKind::CommaToken),
            ("<".to_string(), SyntaxKind::LessThanToken),
            (">".to_string(), SyntaxKind::GreaterThanToken),
            ("<=".to_string(), SyntaxKind::LessThanEqualsToken),
            (">=".to_string(), SyntaxKind::GreaterThanEqualsToken),
            ("==".to_string(), SyntaxKind::EqualsEqualsToken),
            ("!=".to_string(), SyntaxKind::ExclamationEqualsToken),
            ("===".to_string(), SyntaxKind::EqualsEqualsEqualsToken),
            ("!==".to_string(), SyntaxKind::ExclamationEqualsEqualsToken),
            ("=>".to_string(), SyntaxKind::EqualsGreaterThanToken),
            ("+".to_string(), SyntaxKind::PlusToken),
            ("-".to_string(), SyntaxKind::MinusToken),
            ("**".to_string(), SyntaxKind::AsteriskAsteriskToken),
            ("*".to_string(), SyntaxKind::AsteriskToken),
            ("/".to_string(), SyntaxKind::SlashToken),
            ("%".to_string(), SyntaxKind::PercentToken),
            ("++".to_string(), SyntaxKind::PlusPlusToken),
            ("--".to_string(), SyntaxKind::MinusMinusToken),
            ("<<".to_string(), SyntaxKind::LessThanLessThanToken),
            ("</".to_string(), SyntaxKind::LessThanSlashToken),
            (">>".to_string(), SyntaxKind::GreaterThanGreaterThanToken),
            (
                ">>>".to_string(),
                SyntaxKind::GreaterThanGreaterThanGreaterThanToken,
            ),
            ("&".to_string(), SyntaxKind::AmpersandToken),
            ("|".to_string(), SyntaxKind::BarToken),
            ("^".to_string(), SyntaxKind::CaretToken),
            ("!".to_string(), SyntaxKind::ExclamationToken),
            ("~".to_string(), SyntaxKind::TildeToken),
            ("&&".to_string(), SyntaxKind::AmpersandAmpersandToken),
            ("||".to_string(), SyntaxKind::BarBarToken),
            ("?".to_string(), SyntaxKind::QuestionToken),
            ("??".to_string(), SyntaxKind::QuestionQuestionToken),
            ("?.".to_string(), SyntaxKind::QuestionDotToken),
            (":".to_string(), SyntaxKind::ColonToken),
            ("=".to_string(), SyntaxKind::EqualsToken),
            ("+=".to_string(), SyntaxKind::PlusEqualsToken),
            ("-=".to_string(), SyntaxKind::MinusEqualsToken),
            ("*=".to_string(), SyntaxKind::AsteriskEqualsToken),
            ("**=".to_string(), SyntaxKind::AsteriskAsteriskEqualsToken),
            ("/=".to_string(), SyntaxKind::SlashEqualsToken),
            ("%=".to_string(), SyntaxKind::PercentEqualsToken),
            ("<<=".to_string(), SyntaxKind::LessThanLessThanEqualsToken),
            (
                ">>=".to_string(),
                SyntaxKind::GreaterThanGreaterThanEqualsToken,
            ),
            (
                ">>>=".to_string(),
                SyntaxKind::GreaterThanGreaterThanGreaterThanEqualsToken,
            ),
            ("&=".to_string(), SyntaxKind::AmpersandEqualsToken),
            ("|=".to_string(), SyntaxKind::BarEqualsToken),
            ("^=".to_string(), SyntaxKind::CaretEqualsToken),
            ("||=".to_string(), SyntaxKind::BarBarEqualsToken),
            ("&&=".to_string(), SyntaxKind::AmpersandAmpersandEqualsToken),
            ("??=".to_string(), SyntaxKind::QuestionQuestionEqualsToken),
            ("@".to_string(), SyntaxKind::AtToken),
            ("#".to_string(), SyntaxKind::HashToken),
            ("`".to_string(), SyntaxKind::BacktickToken),
        ]));
        ret
    };
}

lazy_static! {
    pub(super) static ref unicode_es3_identifier_start: Vec<char> = [
        170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696,
        699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929,
        931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269,
        1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600,
        1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957,
        2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474,
        2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576,
        2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674,
        2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745,
        2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866,
        2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965,
        2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077,
        3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216,
        3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346,
        3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526,
        3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725,
        3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760,
        3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913,
        3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342,
        4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688,
        4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784,
        4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848,
        4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740,
        5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840,
        7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,
        8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144,
        8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455,
        8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495,
        8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346,
        12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704,
        12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262,
        64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320,
        64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,
        65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,
        65479, 65482, 65487, 65490, 65495, 65498, 65500,
    ]
    .iter()
    .map(|u32_value| char::from_u32(*u32_value).unwrap())
    .collect();
}

lazy_static! {
    pub(super) static ref unicode_es3_identifier_part: Vec<char> = [
        170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696,
        699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906,
        908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220,
        1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425,
        1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522,
        1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776,
        1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388,
        2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,
        2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525,
        2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610,
        2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652,
        2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730,
        2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784,
        2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870,
        2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927,
        2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979,
        2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031,
        3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3134,
        3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212,
        3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285,
        3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368,
        3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458,
        3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540,
        3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716,
        3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749,
        3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792,
        3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897,
        3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096,
        4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293,
        4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682,
        4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782,
        4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824,
        4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977,
        5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160,
        6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005,
        8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118,
        8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180,
        8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458,
        8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497,
        8499, 8505, 8544, 8579, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353,
        12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588, 12593, 12686, 12704, 12727,
        13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275,
        64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324,
        64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075,
        65076, 65101, 65103, 65136, 65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338,
        65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498,
        65500,
    ]
    .iter()
    .map(|u32_value| char::from_u32(*u32_value).unwrap())
    .collect();
}

lazy_static! {
    pub(super) static ref unicode_es5_identifier_start: Vec<char> = [
        170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748,
        750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013,
        1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568,
        1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791,
        1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048,
        2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361,
        2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451,
        2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,
        2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616,
        2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736,
        2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835,
        2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929,
        2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979,
        2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123,
        3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242,
        3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344,
        3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507,
        3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716,
        3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,
        3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807,
        3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,
        4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295,
        4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704,
        4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822,
        4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761,
        5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996,
        5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320,
        6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740,
        6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245,
        7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965,
        7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064,
        8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172,
        8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458,
        8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,
        8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492,
        11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631,
        11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718,
        11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337,
        12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589,
        12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192,
        42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735,
        42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011,
        43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,
        43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584,
        43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702,
        43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777,
        43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203,
        55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285,
        64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324,
        64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142,
        65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495,
        65498, 65500,
    ]
    .iter()
    .map(|u32_value| char::from_u32(*u32_value).unwrap())
    .collect();
}

lazy_static! {
    pub(super) static ref unicode_es5_identifier_part: Vec<char> = [
        170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748,
        750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013,
        1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471,
        1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641,
        1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984,
        2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403,
        2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474,
        2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,
        2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610,
        2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641,
        2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730,
        2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787,
        2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869,
        2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927,
        2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974,
        2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024,
        3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,
        3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183,
        3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270,
        3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331,
        3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,
        3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517,
        3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648,
        3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735,
        3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776,
        3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881,
        3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993,
        4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346,
        4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752,
        4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885,
        4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792,
        5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000,
        6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176,
        6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,
        6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800,
        6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241,
        7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008,
        8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124,
        8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182,
        8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412,
        8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484,
        8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526,
        8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,
        11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694,
        11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744,
        11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438,
        12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704,
        12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508,
        42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786,
        42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072, 43123, 43136, 43204,
        43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392,
        43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643,
        43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793,
        43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,
        55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285,
        64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433,
        64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075,
        65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343,
        65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,
    ]
    .iter()
    .map(|u32_value| char::from_u32(*u32_value).unwrap())
    .collect();
}

lazy_static! {
    pub(super) static ref unicode_esnext_identifier_start: Vec<char> = [
        65, 90, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,
        740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 895, 895, 902, 902, 904, 906, 908,
        908, 910, 929, 931, 1013, 1015, 1153, 1162, 1327, 1329, 1366, 1369, 1369, 1376, 1416, 1488,
        1514, 1519, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775,
        1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036,
        2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2144, 2154,
        2208, 2228, 2230, 2237, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2432, 2437,
        2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510,
        2524, 2525, 2527, 2529, 2544, 2545, 2556, 2556, 2565, 2570, 2575, 2576, 2579, 2600, 2602,
        2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701,
        2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,
        2785, 2809, 2809, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,
        2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962,
        2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024,
        3077, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3133, 3160, 3162, 3168, 3169, 3200,
        3200, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294,
        3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3412,
        3414, 3423, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526,
        3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3718, 3722, 3724, 3747, 3749,
        3749, 3751, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,
        3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193,
        4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301,
        4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746,
        4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880,
        4882, 4885, 4888, 4954, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761,
        5786, 5792, 5866, 5870, 5880, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996,
        5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6264, 6272, 6312, 6314, 6314, 6320,
        6389, 6400, 6430, 6480, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6656, 6678, 6688, 6740,
        6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245,
        7247, 7258, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7401, 7404, 7406, 7411, 7413, 7414,
        7418, 7418, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025,
        8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132,
        8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319,
        8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484,
        8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264,
        11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559,
        11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696,
        11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 12293, 12295,
        12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12443, 12447, 12449, 12538, 12540,
        12543, 12549, 12591, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40943,
        40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623,
        42653, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42943, 42946, 42950, 42999, 43009,
        43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259,
        43259, 43261, 43262, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471,
        43488, 43492, 43494, 43503, 43514, 43518, 43520, 43560, 43584, 43586, 43588, 43595, 43616,
        43638, 43642, 43642, 43646, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712,
        43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793,
        43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43879, 43888, 44002, 44032, 55203,
        55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285,
        64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324,
        64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142,
        65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495,
        65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616,
        65629, 65664, 65786, 65856, 65908, 66176, 66204, 66208, 66256, 66304, 66335, 66349, 66378,
        66384, 66421, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66717, 66736,
        66771, 66776, 66811, 66816, 66855, 66864, 66915, 67072, 67382, 67392, 67413, 67424, 67431,
        67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680,
        67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023,
        68030, 68031, 68096, 68096, 68112, 68115, 68117, 68119, 68121, 68149, 68192, 68220, 68224,
        68252, 68288, 68295, 68297, 68324, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497,
        68608, 68680, 68736, 68786, 68800, 68850, 68864, 68899, 69376, 69404, 69415, 69415, 69424,
        69445, 69600, 69622, 69635, 69687, 69763, 69807, 69840, 69864, 69891, 69926, 69956, 69956,
        69968, 70002, 70006, 70006, 70019, 70066, 70081, 70084, 70106, 70106, 70108, 70108, 70144,
        70161, 70163, 70187, 70272, 70278, 70280, 70280, 70282, 70285, 70287, 70301, 70303, 70312,
        70320, 70366, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453,
        70457, 70461, 70461, 70480, 70480, 70493, 70497, 70656, 70708, 70727, 70730, 70751, 70751,
        70784, 70831, 70852, 70853, 70855, 70855, 71040, 71086, 71128, 71131, 71168, 71215, 71236,
        71236, 71296, 71338, 71352, 71352, 71424, 71450, 71680, 71723, 71840, 71903, 71935, 71935,
        72096, 72103, 72106, 72144, 72161, 72161, 72163, 72163, 72192, 72192, 72203, 72242, 72250,
        72250, 72272, 72272, 72284, 72329, 72349, 72349, 72384, 72440, 72704, 72712, 72714, 72750,
        72768, 72768, 72818, 72847, 72960, 72966, 72968, 72969, 72971, 73008, 73030, 73030, 73056,
        73061, 73063, 73064, 73066, 73097, 73112, 73112, 73440, 73458, 73728, 74649, 74752, 74862,
        74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92766, 92880, 92909, 92928,
        92975, 92992, 92995, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94032, 94032,
        94099, 94111, 94176, 94177, 94179, 94179, 94208, 100343, 100352, 101106, 110592, 110878,
        110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792,
        113800, 113808, 113817, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970,
        119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005,
        120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126,
        120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514,
        120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686,
        120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 123136, 123180, 123191,
        123197, 123214, 123214, 123584, 123627, 124928, 125124, 125184, 125251, 125259, 125259,
        126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505,
        126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535,
        126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551,
        126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562,
        126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590,
        126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651,
        131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560,
        195101
    ]
    .iter()
    .map(|u32_value| char::from_u32(*u32_value).unwrap())
    .collect();
}

lazy_static! {
    pub(super) static ref unicode_esnext_identifier_part: Vec<char> = [
        48, 57, 65, 90, 95, 95, 97, 122, 170, 170, 181, 181, 183, 183, 186, 186, 192, 214, 216,
        246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 895,
        895, 902, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1327, 1329,
        1366, 1369, 1369, 1376, 1416, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479,
        1488, 1514, 1519, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770,
        1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2045, 2045, 2048, 2093,
        2112, 2139, 2144, 2154, 2208, 2228, 2230, 2237, 2259, 2273, 2275, 2403, 2406, 2415, 2417,
        2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500,
        2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2556, 2556, 2558,
        2558, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614,
        2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654,
        2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739,
        2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2809,
        2815, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,
        2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,
        2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975,
        2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031,
        3031, 3046, 3055, 3072, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3140, 3142, 3144,
        3146, 3149, 3157, 3158, 3160, 3162, 3168, 3171, 3174, 3183, 3200, 3203, 3205, 3212, 3214,
        3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286,
        3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3328, 3331, 3333, 3340, 3342, 3344, 3346,
        3396, 3398, 3400, 3402, 3406, 3412, 3415, 3423, 3427, 3430, 3439, 3450, 3455, 3458, 3459,
        3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542,
        3542, 3544, 3551, 3558, 3567, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714,
        3716, 3716, 3718, 3722, 3724, 3747, 3749, 3749, 3751, 3773, 3776, 3780, 3782, 3782, 3784,
        3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895,
        3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096,
        4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685,
        4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792,
        4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959,
        4969, 4977, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792,
        5866, 5870, 5880, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000,
        6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176,
        6264, 6272, 6314, 6320, 6389, 6400, 6430, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,
        6528, 6571, 6576, 6601, 6608, 6618, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800,
        6809, 6823, 6823, 6832, 6845, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223,
        7232, 7241, 7245, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7376, 7378, 7380, 7418, 7424,
        7673, 7675, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,
        8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144,
        8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8276, 8276, 8305, 8305,
        8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458,
        8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511,
        8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507,
        11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680,
        11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734,
        11736, 11742, 11744, 11775, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353,
        12438, 12441, 12447, 12449, 12538, 12540, 12543, 12549, 12591, 12593, 12686, 12704, 12730,
        12784, 12799, 13312, 19893, 19968, 40943, 40960, 42124, 42192, 42237, 42240, 42508, 42512,
        42539, 42560, 42607, 42612, 42621, 42623, 42737, 42775, 42783, 42786, 42888, 42891, 42943,
        42946, 42950, 42999, 43047, 43072, 43123, 43136, 43205, 43216, 43225, 43232, 43255, 43259,
        43259, 43261, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43488, 43518,
        43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43714, 43739, 43741, 43744,
        43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822,
        43824, 43866, 43868, 43879, 43888, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216,
        55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296,
        64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467,
        64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65071, 65075, 65076,
        65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345,
        65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547,
        65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 65856,
        65908, 66045, 66045, 66176, 66204, 66208, 66256, 66272, 66272, 66304, 66335, 66349, 66378,
        66384, 66426, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66717, 66720,
        66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 67072, 67382, 67392, 67413,
        67424, 67431, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647,
        67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897,
        67968, 68023, 68030, 68031, 68096, 68099, 68101, 68102, 68108, 68115, 68117, 68119, 68121,
        68149, 68152, 68154, 68159, 68159, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68326,
        68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800,
        68850, 68864, 68903, 68912, 68921, 69376, 69404, 69415, 69415, 69424, 69456, 69600, 69622,
        69632, 69702, 69734, 69743, 69759, 69818, 69840, 69864, 69872, 69881, 69888, 69940, 69942,
        69951, 69956, 69958, 69968, 70003, 70006, 70006, 70016, 70084, 70089, 70092, 70096, 70106,
        70108, 70108, 70144, 70161, 70163, 70199, 70206, 70206, 70272, 70278, 70280, 70280, 70282,
        70285, 70287, 70301, 70303, 70312, 70320, 70378, 70384, 70393, 70400, 70403, 70405, 70412,
        70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70459, 70468, 70471,
        70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516,
        70656, 70730, 70736, 70745, 70750, 70751, 70784, 70853, 70855, 70855, 70864, 70873, 71040,
        71093, 71096, 71104, 71128, 71133, 71168, 71232, 71236, 71236, 71248, 71257, 71296, 71352,
        71360, 71369, 71424, 71450, 71453, 71467, 71472, 71481, 71680, 71738, 71840, 71913, 71935,
        71935, 72096, 72103, 72106, 72151, 72154, 72161, 72163, 72164, 72192, 72254, 72263, 72263,
        72272, 72345, 72349, 72349, 72384, 72440, 72704, 72712, 72714, 72758, 72760, 72768, 72784,
        72793, 72818, 72847, 72850, 72871, 72873, 72886, 72960, 72966, 72968, 72969, 72971, 73014,
        73018, 73018, 73020, 73021, 73023, 73031, 73040, 73049, 73056, 73061, 73063, 73064, 73066,
        73102, 73104, 73105, 73107, 73112, 73120, 73129, 73440, 73462, 73728, 74649, 74752, 74862,
        74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92766, 92768, 92777, 92880,
        92909, 92912, 92916, 92928, 92982, 92992, 92995, 93008, 93017, 93027, 93047, 93053, 93071,
        93760, 93823, 93952, 94026, 94031, 94087, 94095, 94111, 94176, 94177, 94179, 94179, 94208,
        100343, 100352, 101106, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355,
        113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113821, 113822, 119141,
        119145, 119149, 119154, 119163, 119170, 119173, 119179, 119210, 119213, 119362, 119364,
        119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977,
        119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074,
        120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134,
        120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570,
        120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714,
        120744, 120746, 120770, 120772, 120779, 120782, 120831, 121344, 121398, 121403, 121452,
        121461, 121461, 121476, 121476, 121499, 121503, 121505, 121519, 122880, 122886, 122888,
        122904, 122907, 122913, 122915, 122916, 122918, 122922, 123136, 123180, 123184, 123197,
        123200, 123209, 123214, 123214, 123584, 123641, 124928, 125124, 125136, 125142, 125184,
        125259, 125264, 125273, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500,
        126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530,
        126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546,
        126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559,
        126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583,
        126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629,
        126633, 126635, 126651, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969,
        183984, 191456, 194560, 195101, 917760, 917999
    ]
    .iter()
    .map(|u32_value| char::from_u32(*u32_value).unwrap())
    .collect();
}

lazy_static! {
    pub(super) static ref comment_directive_regex_single_line: Regex =
        Regex::new(r"^///?\s*@(ts-expect-error|ts-ignore)").unwrap();
}

lazy_static! {
    pub(super) static ref comment_directive_regex_multi_line: Regex =
        Regex::new(r"^(?:/|\*)*\s*@(ts-expect-error|ts-ignore)").unwrap();
}

pub(super) fn lookup_in_unicode_map(code: char, map: &[char]) -> bool {
    if code < map[0] {
        return false;
    }

    let mut lo = 0;
    let mut hi = map.len();
    let mut mid: usize;

    while lo + 1 < hi {
        mid = lo + (hi - lo) / 2;
        mid -= mid % 2;
        if map[mid] <= code && code <= map[mid + 1] {
            return true;
        }

        if code < map[mid] {
            hi = mid;
        } else {
            lo = mid + 2;
        }
    }

    false
}

pub(super) fn is_unicode_identifier_start(
    code: char,
    language_version: Option<ScriptTarget>,
) -> bool {
    if matches!(language_version, Some(language_version) if language_version >= ScriptTarget::ES2015)
    {
        lookup_in_unicode_map(code, &unicode_esnext_identifier_start)
    } else if matches!(language_version, Some(language_version) if language_version == ScriptTarget::ES5)
    {
        lookup_in_unicode_map(code, &unicode_es5_identifier_start)
    } else {
        lookup_in_unicode_map(code, &unicode_es3_identifier_start)
    }
}

pub(super) fn is_unicode_identifier_part(
    code: char,
    language_version: Option<ScriptTarget>,
) -> bool {
    if matches!(language_version, Some(language_version) if language_version >= ScriptTarget::ES2015)
    {
        lookup_in_unicode_map(code, &unicode_esnext_identifier_part)
    } else if matches!(language_version, Some(language_version) if language_version == ScriptTarget::ES5)
    {
        lookup_in_unicode_map(code, &unicode_es5_identifier_part)
    } else {
        lookup_in_unicode_map(code, &unicode_es3_identifier_part)
    }
}

pub(super) fn make_reverse_map(
    source: &HashMap<String, SyntaxKind>,
) -> HashMap<SyntaxKind, String> {
    let mut result = HashMap::new();
    for (key, val) in source.iter() {
        result.insert(*val, key.clone());
    }
    result
}

lazy_static! {
    pub(super) static ref token_strings: HashMap<SyntaxKind, String> =
        make_reverse_map(&text_to_token);
}
pub fn token_to_string(t: SyntaxKind) -> Option<&'static String> {
    token_strings.get(&t)
}

pub(crate) fn string_to_token(s: &str) -> Option<SyntaxKind> {
    text_to_token.get(s).map(|token| *token)
}

pub(crate) fn compute_line_starts(text: &SourceTextAsChars) -> Vec<usize> {
    let mut result = vec![];
    let mut pos = 0;
    let mut line_start = 0;
    while pos < text_len(text) {
        let ch = text_char_at_index(text, pos);
        pos += 1;
        match ch {
            CharacterCodes::carriage_return => {
                if matches!(
                    maybe_text_char_at_index(text, pos),
                    Some(CharacterCodes::line_feed)
                ) {
                    pos += 1;
                }
                result.push(line_start);
                line_start = pos;
            }
            CharacterCodes::line_feed => {
                result.push(line_start);
                line_start = pos;
            }
            _ => {
                if ch > CharacterCodes::max_ascii_character && is_line_break(ch) {
                    result.push(line_start);
                    line_start = pos;
                }
            }
        }
    }
    result.push(line_start);
    result
}

pub(crate) fn get_line_starts<TSourceFileLike: SourceFileLike>(
    source_file: &TSourceFileLike,
) -> Ref<Vec<usize>> {
    let source_file_line_map_is_some = source_file.maybe_line_map().is_some();
    if source_file_line_map_is_some {
        return source_file.line_map();
    }
    {
        *source_file.maybe_line_map() = Some(compute_line_starts(source_file.text_as_chars()));
    }
    source_file.line_map()
}

pub(crate) fn compute_line_and_character_of_position(
    line_starts: &[usize],
    position: usize,
) -> LineAndCharacter {
    let line_number = compute_line_of_position(line_starts, position, None);
    LineAndCharacter {
        line: line_number,
        character: position - line_starts[line_number],
    }
}

pub(crate) fn compute_line_of_position(
    line_starts: &[usize],
    position: usize,
    lower_bound: Option<usize>,
) -> usize {
    let mut line_number = binary_search_copy_key(
        line_starts,
        &position,
        /*identity*/ |value, _| *value,
        |a, b| compare_values(Some(a), Some(b)),
        lower_bound,
    );
    if line_number < 0 {
        line_number = !line_number - 1;
        Debug_.assert(
            line_number != -1,
            Some("position cannot precede the beginning of the file"),
        );
    }
    line_number.try_into().unwrap()
}

pub(crate) fn get_lines_between_positions<TSourceFileLike: SourceFileLike>(
    source_file: &TSourceFileLike,
    pos1: usize,
    pos2: usize,
) -> usize {
    if pos1 == pos2 {
        return 0;
    }
    let line_starts = get_line_starts(source_file);
    let lower = cmp::min(pos1, pos2);
    let is_negative = lower == pos2;
    let upper = if is_negative { pos1 } else { pos2 };
    let lower_line = compute_line_of_position(&line_starts, lower, None);
    let upper_line = compute_line_of_position(&line_starts, upper, Some(lower_line));
    if is_negative {
        lower_line - upper_line
    } else {
        upper_line - lower_line
    }
}

pub fn get_line_and_character_of_position<TSourceFileLike: SourceFileLike>(
    source_file: &TSourceFileLike,
    position: usize,
) -> LineAndCharacter {
    compute_line_and_character_of_position(&get_line_starts(source_file), position)
}

pub fn is_white_space_like(ch: char) -> bool {
    is_white_space_single_line(ch) || is_line_break(ch)
}

pub fn is_white_space_single_line(ch: char) -> bool {
    ch == CharacterCodes::space
        || ch == CharacterCodes::tab
        || ch == CharacterCodes::vertical_tab
        || ch == CharacterCodes::form_feed
        || ch == CharacterCodes::non_breaking_space
        || ch == CharacterCodes::next_line
        || ch == CharacterCodes::ogham
        || ch >= CharacterCodes::en_quad && ch <= CharacterCodes::zero_width_space
        || ch == CharacterCodes::narrow_no_break_space
        || ch == CharacterCodes::mathematical_space
        || ch == CharacterCodes::ideographic_space
        || ch == CharacterCodes::byte_order_mark
}

pub fn is_line_break(ch: char) -> bool {
    ch == CharacterCodes::line_feed
        || ch == CharacterCodes::carriage_return
        || ch == CharacterCodes::line_separator
        || ch == CharacterCodes::paragraph_separator
}

pub(super) fn is_digit(ch: char) -> bool {
    ch >= CharacterCodes::_0 && ch <= CharacterCodes::_9
}

pub(super) fn is_hex_digit(ch: char) -> bool {
    is_digit(ch)
        || ch >= CharacterCodes::A && ch <= CharacterCodes::F
        || ch >= CharacterCodes::a && ch <= CharacterCodes::f
}

pub(super) fn is_code_point(code: u32) -> bool {
    code <= 0x10ffff
}

pub(crate) fn is_octal_digit(ch: char) -> bool {
    ch >= CharacterCodes::_0 && ch <= CharacterCodes::_7
}

pub fn could_start_trivia(text: &SourceTextAsChars, pos: usize) -> bool {
    let ch = maybe_text_char_at_index(text, pos);
    match ch {
        None => false,
        Some(
            CharacterCodes::carriage_return
            | CharacterCodes::line_feed
            | CharacterCodes::tab
            | CharacterCodes::vertical_tab
            | CharacterCodes::form_feed
            | CharacterCodes::space
            | CharacterCodes::slash
            | CharacterCodes::less_than
            | CharacterCodes::bar
            | CharacterCodes::equals
            | CharacterCodes::greater_than,
        ) => true,
        Some(CharacterCodes::hash) => pos == 0,
        Some(ch) => ch > CharacterCodes::max_ascii_character,
    }
}

pub fn skip_trivia(
    text: &SourceTextAsChars,
    text_str: &str,
    pos: isize,
    stop_after_line_break: Option<bool>,
    stop_at_comments: Option<bool>,
    in_jsdoc: Option<bool>,
) -> isize {
    let stop_after_line_break = stop_after_line_break.unwrap_or(false);
    let stop_at_comments = stop_at_comments.unwrap_or(false);
    let in_jsdoc = in_jsdoc.unwrap_or(false);
    if position_is_synthesized(pos) {
        return pos;
    }

    let mut pos = usize::try_from(pos).unwrap();

    let mut can_consume_star = false;
    loop {
        let ch = maybe_text_char_at_index(text, pos);
        if matches!(ch, None) {
            return isize::try_from(pos).unwrap();
        }
        let ch = ch.unwrap();
        match ch {
            CharacterCodes::carriage_return => {
                if matches!(
                    maybe_text_char_at_index(text, pos + 1),
                    Some(CharacterCodes::line_feed)
                ) {
                    pos += 1;
                }
                pos += 1;
                if stop_after_line_break {
                    return pos.try_into().unwrap();
                }
                can_consume_star = in_jsdoc;
                continue;
            }
            CharacterCodes::line_feed => {
                pos += 1;
                if stop_after_line_break {
                    return pos.try_into().unwrap();
                }
                can_consume_star = in_jsdoc;
                continue;
            }
            CharacterCodes::tab
            | CharacterCodes::vertical_tab
            | CharacterCodes::form_feed
            | CharacterCodes::space => {
                pos += 1;
                continue;
            }
            CharacterCodes::slash => match stop_at_comments {
                true => (),
                false => {
                    if matches!(
                        maybe_text_char_at_index(text, pos + 1),
                        Some(CharacterCodes::slash)
                    ) {
                        pos += 2;
                        while pos < text_len(text) {
                            if is_line_break(text_char_at_index(text, pos)) {
                                break;
                            }
                            pos += 1;
                        }
                        can_consume_star = false;
                        continue;
                    }

                    if matches!(
                        maybe_text_char_at_index(text, pos + 1),
                        Some(CharacterCodes::asterisk)
                    ) {
                        pos += 2;
                        while pos < text_len(text) {
                            if text_char_at_index(text, pos) == CharacterCodes::asterisk
                                && matches!(
                                    maybe_text_char_at_index(text, pos + 1),
                                    Some(CharacterCodes::slash)
                                )
                            {
                                pos += 2;
                                break;
                            }
                            pos += 1;
                        }
                        can_consume_star = false;
                        continue;
                    }
                }
            },
            CharacterCodes::less_than
            | CharacterCodes::bar
            | CharacterCodes::equals
            | CharacterCodes::greater_than => {
                if is_conflict_marker_trivia(text, pos) {
                    pos = scan_conflict_marker_trivia(
                        text,
                        pos,
                        Option::<fn(&DiagnosticMessage, Option<usize>, Option<usize>)>::None,
                    );
                    can_consume_star = false;
                    continue;
                }
            }
            CharacterCodes::hash => {
                if pos == 0 && is_shebang_trivia(text_str, pos) {
                    pos = scan_shebang_trivia(text_str, pos);
                    can_consume_star = false;
                    continue;
                }
            }
            CharacterCodes::asterisk => {
                if can_consume_star {
                    pos += 1;
                    can_consume_star = false;
                    continue;
                }
            }
            _ => {
                if ch > CharacterCodes::max_ascii_character && is_white_space_like(ch) {
                    pos += 1;
                    continue;
                }
            }
        }
        return isize::try_from(pos).unwrap();
    }
}

// lazy_static! {
//     pub(super) static ref merge_conflict_marker_length: usize = "<<<<<<<".len();
// }
pub(super) const fn merge_conflict_marker_length() -> usize {
    // "<<<<<<<".len()
    7
}

fn is_conflict_marker_trivia(text: &SourceTextAsChars, pos: usize) -> bool {
    // Debug_.assert(pos >= 0);

    if pos == 0 || matches!(maybe_text_char_at_index(text, pos - 1), Some(ch) if is_line_break(ch))
    {
        let ch = maybe_text_char_at_index(text, pos);

        if pos + merge_conflict_marker_length() < text_len(text) {
            let ch = ch.unwrap();
            for i in 0..merge_conflict_marker_length() {
                if text_char_at_index(text, pos + i) != ch {
                    return false;
                }
            }

            return ch == CharacterCodes::equals
                || text_char_at_index(text, pos + merge_conflict_marker_length())
                    == CharacterCodes::space;
        }
    }

    false
}

fn scan_conflict_marker_trivia<TError: FnMut(&DiagnosticMessage, Option<usize>, Option<usize>)>(
    text: &SourceTextAsChars,
    mut pos: usize,
    error: Option<TError>,
) -> usize {
    if let Some(error) = error {
        error(
            &Diagnostics::Merge_conflict_marker_encountered,
            Some(pos),
            Some(merge_conflict_marker_length()),
        );
    }

    let ch = text_char_at_index(text, pos);
    let len = text_len(text);

    if matches!(ch, CharacterCodes::less_than | CharacterCodes::greater_than) {
        while pos < len && !is_line_break(text_char_at_index(text, pos)) {
            pos += 1;
        }
    } else {
        Debug_.assert(
            matches!(ch, CharacterCodes::bar | CharacterCodes::equals),
            None,
        );
        while pos < len {
            let current_char = text_char_at_index(text, pos);
            if matches!(
                current_char,
                CharacterCodes::equals | CharacterCodes::greater_than
            ) && current_char != ch
                && is_conflict_marker_trivia(text, pos)
            {
                break;
            }

            pos += 1;
        }
    }

    pos
}

lazy_static! {
    pub(super) static ref shebang_trivia_regex: Regex = Regex::new(r"^#!.*").unwrap();
}

pub(crate) fn is_shebang_trivia(
    text: &str,
    pos: usize, // this is a char index, not a string (byte) index, it's only ok because it's always 0 here
) -> bool {
    Debug_.assert(pos == 0, None);
    shebang_trivia_regex.is_match(text)
}

pub(crate) fn scan_shebang_trivia(
    text: &str,
    mut pos: usize, // this is a char index, not a string (byte) index, it's only ok because it's always 0 here
) -> usize {
    let original_pos = pos;
    let shebang = shebang_trivia_regex.find(text).unwrap().as_str();
    pos = pos + shebang.len();
    text_str_num_chars(text, original_pos, pos)
}

pub(super) fn is_identifier_start(ch: char) -> bool {
    ch >= CharacterCodes::A && ch <= CharacterCodes::Z
        || ch >= CharacterCodes::a && ch <= CharacterCodes::z
        || ch == CharacterCodes::dollar_sign
        || ch == CharacterCodes::underscore
        || ch > CharacterCodes::max_ascii_character && is_unicode_identifier_start(ch)
}

pub(super) fn is_identifier_part(ch: char) -> bool {
    ch >= CharacterCodes::A && ch <= CharacterCodes::Z
        || ch >= CharacterCodes::a && ch <= CharacterCodes::z
        || ch >= CharacterCodes::_0 && ch <= CharacterCodes::_9
        || ch == CharacterCodes::dollar_sign
        || ch == CharacterCodes::underscore
        || ch > CharacterCodes::max_ascii_character && is_unicode_identifier_start(ch)
}

pub fn is_identifier_text(name: &str) -> bool {
    let ch = code_point_at(&name.chars().collect(), 0);
    if !is_identifier_start(ch) {
        return false;
    }
    for ch in name.chars().skip(1) {
        if !is_identifier_part(ch) {
            return false;
        }
    }

    true
}

pub fn create_scanner(skip_trivia: bool) -> Scanner {
    Scanner::new(skip_trivia)
}

pub struct Scanner /*<'on_error>*/ {
    pub(super) skip_trivia: bool,
    // on_error: Option<ErrorCallback<'on_error>>,
    pub(super) text: Option<SourceTextAsChars>,
    pub(super) text_str: Option<String>,
    pub(super) pos: RefCell<Option<usize>>,
    pub(super) end: Option<usize>,
    pub(super) start_pos: RefCell<Option<usize>>,
    pub(super) token_pos: RefCell<Option<usize>>,
    pub(super) token: RefCell<Option<SyntaxKind>>,
    pub(super) token_value: RefCell<Option<String>>,
    pub(super) token_flags: RefCell<Option<TokenFlags>>,
}

impl Scanner {
    pub(super) fn new(skip_trivia: bool) -> Self {
        Scanner {
            skip_trivia,
            // on_error: None,
            text: None,
            text_str: None,
            pos: RefCell::new(None),
            end: None,
            start_pos: RefCell::new(None),
            token_pos: RefCell::new(None),
            token: RefCell::new(None),
            token_value: RefCell::new(None),
            token_flags: RefCell::new(None),
        }
    }

    pub(super) fn text(&self) -> &SourceTextAsChars {
        self.text.as_ref().unwrap()
    }

    pub(super) fn text_str(&self) -> &str {
        self.text_str.as_ref().unwrap()
    }

    pub(super) fn set_text_(&mut self, text: SourceTextAsChars, text_str: String) {
        self.text = Some(text);
        self.text_str = Some(text_str);
    }

    pub(super) fn maybe_text_char_at_index(&self, index: usize) -> Option<char> {
        maybe_text_char_at_index(self.text(), index)
    }

    pub(super) fn text_char_at_index(&self, index: usize) -> char {
        text_char_at_index(self.text(), index)
    }

    pub(super) fn text_substring(&self, start: usize, end: usize) -> String {
        text_substring(self.text(), start, end)
    }

    pub(super) fn pos(&self) -> usize {
        self.pos.borrow().unwrap()
    }

    pub(super) fn set_pos(&self, pos: usize) {
        *self.pos.borrow_mut() = Some(pos);
    }

    pub(super) fn increment_pos(&self) {
        self.set_pos(self.pos() + 1);
    }

    pub(super) fn increment_pos_by(&self, by: usize) {
        self.set_pos(self.pos() + by);
    }

    pub(super) fn end(&self) -> usize {
        self.end.unwrap()
    }

    pub(super) fn set_end(&mut self, end: usize) {
        self.end = Some(end);
    }

    pub(super) fn start_pos(&self) -> usize {
        self.start_pos.borrow().unwrap()
    }

    pub(super) fn set_start_pos(&self, start_pos: usize) {
        *self.start_pos.borrow_mut() = Some(start_pos);
    }

    pub(super) fn token_pos(&self) -> usize {
        self.token_pos.borrow().unwrap()
    }

    pub(super) fn set_token_pos(&self, token_pos: usize) {
        *self.token_pos.borrow_mut() = Some(token_pos);
    }

    pub(super) fn token(&self) -> SyntaxKind {
        self.token.borrow().unwrap()
    }

    pub(super) fn set_token(&self, token: SyntaxKind) -> SyntaxKind {
        *self.token.borrow_mut() = Some(token);
        token
    }

    pub(super) fn token_value(&self) -> String {
        self.token_value.borrow().as_ref().unwrap().to_string()
    }

    pub(super) fn set_token_value(&self, token_value: String) {
        *self.token_value.borrow_mut() = Some(token_value);
    }

    pub(super) fn token_flags(&self) -> TokenFlags {
        self.token_flags.borrow().unwrap()
    }

    pub(super) fn set_token_flags(&self, token_flags: TokenFlags) {
        *self.token_flags.borrow_mut() = Some(token_flags);
    }

    pub(super) fn add_token_flag(&self, flag: TokenFlags) {
        self.set_token_flags(self.token_flags() | flag);
    }

    pub fn get_start_pos(&self) -> usize {
        self.start_pos()
    }

    pub fn get_text_pos(&self) -> usize {
        self.pos()
    }

    pub fn get_token_pos(&self) -> usize {
        self.token_pos()
    }

    pub fn get_token_text(&self) -> String {
        self.text_substring(self.token_pos(), self.pos())
    }

    pub fn get_token_value(&self) -> String {
        self.token_value()
    }

    pub fn has_extended_unicode_escape(&self) -> bool {
        self.token_flags()
            .intersects(TokenFlags::ExtendedUnicodeEscape)
    }

    pub fn is_unterminated(&self) -> bool {
        self.token_flags().intersects(TokenFlags::Unterminated)
    }

    pub fn has_preceding_line_break(&self) -> bool {
        self.token_flags()
            .intersects(TokenFlags::PrecedingLineBreak)
    }

    pub fn get_numeric_literal_flags(&self) -> TokenFlags {
        self.token_flags() & TokenFlags::NumericLiteralFlags
    }

    pub fn get_token_flags(&self) -> TokenFlags {
        self.token_flags()
    }
}
